=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'date'
require 'time'

module OpenapiClient
  class InputDateTimeConversion
    # Source date and time
    attr_accessor :input

    attr_accessor :source

    attr_accessor :target

    # Display format (defaults to 'yyyy-MM-dd HH:mm:ss')
    attr_accessor :format

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'input' => :'input',
        :'source' => :'source',
        :'target' => :'target',
        :'format' => :'format'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'input' => :'String',
        :'source' => :'String',
        :'target' => :'String',
        :'format' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InputDateTimeConversion` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InputDateTimeConversion`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'input')
        self.input = attributes[:'input']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      else
        self.source = 'GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London'
      end

      if attributes.key?(:'target')
        self.target = attributes[:'target']
      else
        self.target = 'GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London'
      end

      if attributes.key?(:'format')
        self.format = attributes[:'format']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @input.nil?
        invalid_properties.push('invalid value for "input", input cannot be nil.')
      end

      if @source.nil?
        invalid_properties.push('invalid value for "source", source cannot be nil.')
      end

      if @target.nil?
        invalid_properties.push('invalid value for "target", target cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @input.nil?
      return false if @source.nil?
      source_validator = EnumAttributeValidator.new('String', ["GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London", "Greenwich Standard Time - (GMT) Monrovia, Reykjavik", "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "W. Central Africa Standard Time - (GMT+01:00) West Central Africa", "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul", "Middle East Standard Time - (GMT+02:00) Beirut", "Egypt Standard Time - (GMT+02:00) Cairo", "South Africa Standard Time - (GMT+02:00) Harare, Pretoria", "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "Israel Standard Time - (GMT+02:00) Jerusalem", "E. Europe Standard Time - (GMT+02:00) Minsk", "Namibia Standard Time - (GMT+02:00) Windhoek", "Arabic Standard Time - (GMT+03:00) Baghdad", "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh", "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd", "E. Africa Standard Time - (GMT+03:00) Nairobi", "Georgian Standard Time - (GMT+03:00) Tbilisi", "Iran Standard Time - (GMT+03:30) Tehran", "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat", "Azerbaijan Standard Time - (GMT+04:00) Baku", "Mauritius Standard Time - (GMT+04:00) Port Louis", "Caucasus Standard Time - (GMT+04:00) Yerevan", "Afghanistan Standard Time - (GMT+04:30) Kabul", "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg", "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi", "West Asia Standard Time - (GMT+05:00) Tashkent", "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi", "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura", "Nepal Standard Time - (GMT+05:45) Kathmandu", "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk", "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka", "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)", "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta", "North Asia Standard Time - (GMT+07:00) Krasnoyarsk", "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar", "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore", "W. Australia Standard Time - (GMT+08:00) Perth", "Taipei Standard Time - (GMT+08:00) Taipei", "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo", "Korea Standard Time - (GMT+09:00) Seoul", "Yakutsk Standard Time - (GMT+09:00) Yakutsk", "Cen. Australia Standard Time - (GMT+09:30) Adelaide", "AUS Central Standard Time - (GMT+09:30) Darwin", "E. Australia Standard Time - (GMT+10:00) Brisbane", "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney", "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby", "Tasmania Standard Time - (GMT+10:00) Hobart", "Vladivostok Standard Time - (GMT+10:00) Vladivostok", "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia", "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington", "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.", "Tonga Standard Time - (GMT+13:00) Nuku'alofa", "Azores Standard Time - (GMT-01:00) Azores", "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.", "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic", "E. South America Standard Time - (GMT-03:00) Brasilia", "Argentina Standard Time - (GMT-03:00) Buenos Aires", "SA Eastern Standard Time - (GMT-03:00) Georgetown", "Greenland Standard Time - (GMT-03:00) Greenland", "Montevideo Standard Time - (GMT-03:00) Montevideo", "Newfoundland Standard Time - (GMT-03:30) Newfoundland", "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)", "SA Western Standard Time - (GMT-04:00) La Paz", "Central Brazilian Standard Time - (GMT-04:00) Manaus", "Pacific SA Standard Time - (GMT-04:00) Santiago", "Venezuela Standard Time - (GMT-04:30) Caracas", "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco", "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)", "US Eastern Standard Time - (GMT-05:00) Indiana (East)", "Central America Standard Time - (GMT-06:00) Central America", "Central Standard Time - (GMT-06:00) Central Time (US & Canada)", "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey", "Canada Central Standard Time - (GMT-06:00) Saskatchewan", "US Mountain Standard Time - (GMT-07:00) Arizona", "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan", "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)", "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)", "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California", "Alaskan Standard Time - (GMT-09:00) Alaska", "Hawaiian Standard Time - (GMT-10:00) Hawaii", "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa", "Dateline Standard Time - (GMT-12:00) International Date Line West"])
      return false unless source_validator.valid?(@source)
      return false if @target.nil?
      target_validator = EnumAttributeValidator.new('String', ["GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London", "Greenwich Standard Time - (GMT) Monrovia, Reykjavik", "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "W. Central Africa Standard Time - (GMT+01:00) West Central Africa", "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul", "Middle East Standard Time - (GMT+02:00) Beirut", "Egypt Standard Time - (GMT+02:00) Cairo", "South Africa Standard Time - (GMT+02:00) Harare, Pretoria", "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "Israel Standard Time - (GMT+02:00) Jerusalem", "E. Europe Standard Time - (GMT+02:00) Minsk", "Namibia Standard Time - (GMT+02:00) Windhoek", "Arabic Standard Time - (GMT+03:00) Baghdad", "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh", "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd", "E. Africa Standard Time - (GMT+03:00) Nairobi", "Georgian Standard Time - (GMT+03:00) Tbilisi", "Iran Standard Time - (GMT+03:30) Tehran", "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat", "Azerbaijan Standard Time - (GMT+04:00) Baku", "Mauritius Standard Time - (GMT+04:00) Port Louis", "Caucasus Standard Time - (GMT+04:00) Yerevan", "Afghanistan Standard Time - (GMT+04:30) Kabul", "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg", "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi", "West Asia Standard Time - (GMT+05:00) Tashkent", "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi", "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura", "Nepal Standard Time - (GMT+05:45) Kathmandu", "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk", "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka", "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)", "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta", "North Asia Standard Time - (GMT+07:00) Krasnoyarsk", "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar", "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore", "W. Australia Standard Time - (GMT+08:00) Perth", "Taipei Standard Time - (GMT+08:00) Taipei", "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo", "Korea Standard Time - (GMT+09:00) Seoul", "Yakutsk Standard Time - (GMT+09:00) Yakutsk", "Cen. Australia Standard Time - (GMT+09:30) Adelaide", "AUS Central Standard Time - (GMT+09:30) Darwin", "E. Australia Standard Time - (GMT+10:00) Brisbane", "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney", "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby", "Tasmania Standard Time - (GMT+10:00) Hobart", "Vladivostok Standard Time - (GMT+10:00) Vladivostok", "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia", "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington", "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.", "Tonga Standard Time - (GMT+13:00) Nuku'alofa", "Azores Standard Time - (GMT-01:00) Azores", "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.", "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic", "E. South America Standard Time - (GMT-03:00) Brasilia", "Argentina Standard Time - (GMT-03:00) Buenos Aires", "SA Eastern Standard Time - (GMT-03:00) Georgetown", "Greenland Standard Time - (GMT-03:00) Greenland", "Montevideo Standard Time - (GMT-03:00) Montevideo", "Newfoundland Standard Time - (GMT-03:30) Newfoundland", "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)", "SA Western Standard Time - (GMT-04:00) La Paz", "Central Brazilian Standard Time - (GMT-04:00) Manaus", "Pacific SA Standard Time - (GMT-04:00) Santiago", "Venezuela Standard Time - (GMT-04:30) Caracas", "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco", "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)", "US Eastern Standard Time - (GMT-05:00) Indiana (East)", "Central America Standard Time - (GMT-06:00) Central America", "Central Standard Time - (GMT-06:00) Central Time (US & Canada)", "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey", "Canada Central Standard Time - (GMT-06:00) Saskatchewan", "US Mountain Standard Time - (GMT-07:00) Arizona", "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan", "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)", "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)", "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California", "Alaskan Standard Time - (GMT-09:00) Alaska", "Hawaiian Standard Time - (GMT-10:00) Hawaii", "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa", "Dateline Standard Time - (GMT-12:00) International Date Line West"])
      return false unless target_validator.valid?(@target)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', ["GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London", "Greenwich Standard Time - (GMT) Monrovia, Reykjavik", "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "W. Central Africa Standard Time - (GMT+01:00) West Central Africa", "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul", "Middle East Standard Time - (GMT+02:00) Beirut", "Egypt Standard Time - (GMT+02:00) Cairo", "South Africa Standard Time - (GMT+02:00) Harare, Pretoria", "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "Israel Standard Time - (GMT+02:00) Jerusalem", "E. Europe Standard Time - (GMT+02:00) Minsk", "Namibia Standard Time - (GMT+02:00) Windhoek", "Arabic Standard Time - (GMT+03:00) Baghdad", "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh", "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd", "E. Africa Standard Time - (GMT+03:00) Nairobi", "Georgian Standard Time - (GMT+03:00) Tbilisi", "Iran Standard Time - (GMT+03:30) Tehran", "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat", "Azerbaijan Standard Time - (GMT+04:00) Baku", "Mauritius Standard Time - (GMT+04:00) Port Louis", "Caucasus Standard Time - (GMT+04:00) Yerevan", "Afghanistan Standard Time - (GMT+04:30) Kabul", "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg", "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi", "West Asia Standard Time - (GMT+05:00) Tashkent", "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi", "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura", "Nepal Standard Time - (GMT+05:45) Kathmandu", "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk", "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka", "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)", "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta", "North Asia Standard Time - (GMT+07:00) Krasnoyarsk", "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar", "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore", "W. Australia Standard Time - (GMT+08:00) Perth", "Taipei Standard Time - (GMT+08:00) Taipei", "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo", "Korea Standard Time - (GMT+09:00) Seoul", "Yakutsk Standard Time - (GMT+09:00) Yakutsk", "Cen. Australia Standard Time - (GMT+09:30) Adelaide", "AUS Central Standard Time - (GMT+09:30) Darwin", "E. Australia Standard Time - (GMT+10:00) Brisbane", "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney", "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby", "Tasmania Standard Time - (GMT+10:00) Hobart", "Vladivostok Standard Time - (GMT+10:00) Vladivostok", "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia", "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington", "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.", "Tonga Standard Time - (GMT+13:00) Nuku'alofa", "Azores Standard Time - (GMT-01:00) Azores", "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.", "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic", "E. South America Standard Time - (GMT-03:00) Brasilia", "Argentina Standard Time - (GMT-03:00) Buenos Aires", "SA Eastern Standard Time - (GMT-03:00) Georgetown", "Greenland Standard Time - (GMT-03:00) Greenland", "Montevideo Standard Time - (GMT-03:00) Montevideo", "Newfoundland Standard Time - (GMT-03:30) Newfoundland", "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)", "SA Western Standard Time - (GMT-04:00) La Paz", "Central Brazilian Standard Time - (GMT-04:00) Manaus", "Pacific SA Standard Time - (GMT-04:00) Santiago", "Venezuela Standard Time - (GMT-04:30) Caracas", "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco", "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)", "US Eastern Standard Time - (GMT-05:00) Indiana (East)", "Central America Standard Time - (GMT-06:00) Central America", "Central Standard Time - (GMT-06:00) Central Time (US & Canada)", "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey", "Canada Central Standard Time - (GMT-06:00) Saskatchewan", "US Mountain Standard Time - (GMT-07:00) Arizona", "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan", "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)", "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)", "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California", "Alaskan Standard Time - (GMT-09:00) Alaska", "Hawaiian Standard Time - (GMT-10:00) Hawaii", "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa", "Dateline Standard Time - (GMT-12:00) International Date Line West"])
      unless validator.valid?(source)
        fail ArgumentError, "invalid value for \"source\", must be one of #{validator.allowable_values}."
      end
      @source = source
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target Object to be assigned
    def target=(target)
      validator = EnumAttributeValidator.new('String', ["GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London", "Greenwich Standard Time - (GMT) Monrovia, Reykjavik", "W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "W. Central Africa Standard Time - (GMT+01:00) West Central Africa", "GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul", "Middle East Standard Time - (GMT+02:00) Beirut", "Egypt Standard Time - (GMT+02:00) Cairo", "South Africa Standard Time - (GMT+02:00) Harare, Pretoria", "FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "Israel Standard Time - (GMT+02:00) Jerusalem", "E. Europe Standard Time - (GMT+02:00) Minsk", "Namibia Standard Time - (GMT+02:00) Windhoek", "Arabic Standard Time - (GMT+03:00) Baghdad", "Arab Standard Time - (GMT+03:00) Kuwait, Riyadh", "Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd", "E. Africa Standard Time - (GMT+03:00) Nairobi", "Georgian Standard Time - (GMT+03:00) Tbilisi", "Iran Standard Time - (GMT+03:30) Tehran", "Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat", "Azerbaijan Standard Time - (GMT+04:00) Baku", "Mauritius Standard Time - (GMT+04:00) Port Louis", "Caucasus Standard Time - (GMT+04:00) Yerevan", "Afghanistan Standard Time - (GMT+04:30) Kabul", "Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg", "Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi", "West Asia Standard Time - (GMT+05:00) Tashkent", "India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi", "Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura", "Nepal Standard Time - (GMT+05:45) Kathmandu", "N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk", "Central Asia Standard Time - (GMT+06:00) Astana, Dhaka", "Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)", "SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta", "North Asia Standard Time - (GMT+07:00) Krasnoyarsk", "China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar", "Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore", "W. Australia Standard Time - (GMT+08:00) Perth", "Taipei Standard Time - (GMT+08:00) Taipei", "Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo", "Korea Standard Time - (GMT+09:00) Seoul", "Yakutsk Standard Time - (GMT+09:00) Yakutsk", "Cen. Australia Standard Time - (GMT+09:30) Adelaide", "AUS Central Standard Time - (GMT+09:30) Darwin", "E. Australia Standard Time - (GMT+10:00) Brisbane", "AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney", "West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby", "Tasmania Standard Time - (GMT+10:00) Hobart", "Vladivostok Standard Time - (GMT+10:00) Vladivostok", "Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia", "New Zealand Standard Time - (GMT+12:00) Auckland, Wellington", "Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.", "Tonga Standard Time - (GMT+13:00) Nuku'alofa", "Azores Standard Time - (GMT-01:00) Azores", "Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.", "Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic", "E. South America Standard Time - (GMT-03:00) Brasilia", "Argentina Standard Time - (GMT-03:00) Buenos Aires", "SA Eastern Standard Time - (GMT-03:00) Georgetown", "Greenland Standard Time - (GMT-03:00) Greenland", "Montevideo Standard Time - (GMT-03:00) Montevideo", "Newfoundland Standard Time - (GMT-03:30) Newfoundland", "Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)", "SA Western Standard Time - (GMT-04:00) La Paz", "Central Brazilian Standard Time - (GMT-04:00) Manaus", "Pacific SA Standard Time - (GMT-04:00) Santiago", "Venezuela Standard Time - (GMT-04:30) Caracas", "SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco", "Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)", "US Eastern Standard Time - (GMT-05:00) Indiana (East)", "Central America Standard Time - (GMT-06:00) Central America", "Central Standard Time - (GMT-06:00) Central Time (US & Canada)", "Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey", "Canada Central Standard Time - (GMT-06:00) Saskatchewan", "US Mountain Standard Time - (GMT-07:00) Arizona", "Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan", "Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)", "Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)", "Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California", "Alaskan Standard Time - (GMT-09:00) Alaska", "Hawaiian Standard Time - (GMT-10:00) Hawaii", "Samoa Standard Time - (GMT-11:00) Midway Island, Samoa", "Dateline Standard Time - (GMT-12:00) International Date Line West"])
      unless validator.valid?(target)
        fail ArgumentError, "invalid value for \"target\", must be one of #{validator.allowable_values}."
      end
      @target = target
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          input == o.input &&
          source == o.source &&
          target == o.target &&
          format == o.format
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [input, source, target, format].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
