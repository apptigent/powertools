=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module OpenapiClient
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Files - Convert Image
    # Convert an image from one format to another
    # @param format [String] Output file format
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [File]
    def convert_image(format, file, opts = {})
      data, _status_code, _headers = convert_image_with_http_info(format, file, opts)
      data
    end

    # Files - Convert Image
    # Convert an image from one format to another
    # @param format [String] Output file format
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def convert_image_with_http_info(format, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.convert_image ...'
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling FilesApi.convert_image"
      end
      # verify enum value
      allowable_values = ["PNG", "JPG", "GIF", "BMP", "TIF"]
      if @api_client.config.client_side_validation && !allowable_values.include?(format)
        fail ArgumentError, "invalid value for \"format\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.convert_image"
      end
      # resource path
      local_var_path = '/ConvertImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'image/gif', 'image/jpeg', 'image/bmp'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['format'] = format
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.convert_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#convert_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - Crop Image
    # Crop an image
    # @param position [String] Crop start position (use negative values to reverse crop area)
    # @param width [Float] Width (X-axis right, negative to reverse)
    # @param height [Float] Height (Y-axis down, negative to reverse)
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [File]
    def crop_image(position, width, height, file, opts = {})
      data, _status_code, _headers = crop_image_with_http_info(position, width, height, file, opts)
      data
    end

    # Files - Crop Image
    # Crop an image
    # @param position [String] Crop start position (use negative values to reverse crop area)
    # @param width [Float] Width (X-axis right, negative to reverse)
    # @param height [Float] Height (Y-axis down, negative to reverse)
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def crop_image_with_http_info(position, width, height, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.crop_image ...'
      end
      # verify the required parameter 'position' is set
      if @api_client.config.client_side_validation && position.nil?
        fail ArgumentError, "Missing the required parameter 'position' when calling FilesApi.crop_image"
      end
      # verify enum value
      allowable_values = ["TopLeft", "TopCenter", "TopRight", "MiddleLeft", "MiddleCenter", "MiddleRight", "BottomLeft", "BottomCenter", "BottomRight"]
      if @api_client.config.client_side_validation && !allowable_values.include?(position)
        fail ArgumentError, "invalid value for \"position\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling FilesApi.crop_image"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling FilesApi.crop_image"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.crop_image"
      end
      # resource path
      local_var_path = '/CropImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'image/gif', 'image/jpeg', 'image/bmp'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['position'] = position
      form_params['Width'] = width
      form_params['Height'] = height
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.crop_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#crop_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - File to string
    # Convert a file to a Base64 string
    # @param file [File] Source file (10MB limit)
    # @param [Hash] opts the optional parameters
    # @return [OutputString]
    def file_to_string(file, opts = {})
      data, _status_code, _headers = file_to_string_with_http_info(file, opts)
      data
    end

    # Files - File to string
    # Convert a file to a Base64 string
    # @param file [File] Source file (10MB limit)
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def file_to_string_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.file_to_string ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.file_to_string"
      end
      # resource path
      local_var_path = '/FileToString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.file_to_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#file_to_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - Flip Image
    # Flip an image (horizontal or vertical)
    # @param orientation [String] Horizontal or Vertical
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [File]
    def flip_image(orientation, file, opts = {})
      data, _status_code, _headers = flip_image_with_http_info(orientation, file, opts)
      data
    end

    # Files - Flip Image
    # Flip an image (horizontal or vertical)
    # @param orientation [String] Horizontal or Vertical
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def flip_image_with_http_info(orientation, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.flip_image ...'
      end
      # verify the required parameter 'orientation' is set
      if @api_client.config.client_side_validation && orientation.nil?
        fail ArgumentError, "Missing the required parameter 'orientation' when calling FilesApi.flip_image"
      end
      # verify enum value
      allowable_values = ["Horizontal", "Vertical"]
      if @api_client.config.client_side_validation && !allowable_values.include?(orientation)
        fail ArgumentError, "invalid value for \"orientation\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.flip_image"
      end
      # resource path
      local_var_path = '/FlipImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['orientation'] = orientation
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.flip_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#flip_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - Generate QR code
    # Generate a QR code image
    # @param [Hash] opts the optional parameters
    # @option opts [InputQRCode] :input_qr_code 
    # @return [File]
    def generate_qr_code(opts = {})
      data, _status_code, _headers = generate_qr_code_with_http_info(opts)
      data
    end

    # Files - Generate QR code
    # Generate a QR code image
    # @param [Hash] opts the optional parameters
    # @option opts [InputQRCode] :input_qr_code 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def generate_qr_code_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.generate_qr_code ...'
      end
      # resource path
      local_var_path = '/GenerateQRCode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'input_qr_code'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.generate_qr_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#generate_qr_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - Resize Image
    # Resize an image
    # @param algorithm [String] Optimize output quality of the target image
    # @param units [String] Image adjustment units
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height Image height (pixels or percent)
    # @option opts [Float] :width Image width (pixels or percent)
    # @return [File]
    def resize_image(algorithm, units, file, opts = {})
      data, _status_code, _headers = resize_image_with_http_info(algorithm, units, file, opts)
      data
    end

    # Files - Resize Image
    # Resize an image
    # @param algorithm [String] Optimize output quality of the target image
    # @param units [String] Image adjustment units
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :height Image height (pixels or percent)
    # @option opts [Float] :width Image width (pixels or percent)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def resize_image_with_http_info(algorithm, units, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.resize_image ...'
      end
      # verify the required parameter 'algorithm' is set
      if @api_client.config.client_side_validation && algorithm.nil?
        fail ArgumentError, "Missing the required parameter 'algorithm' when calling FilesApi.resize_image"
      end
      # verify enum value
      allowable_values = ["Bicubic (default)", "Bilinear", "Cubic (Box)", "Cubic (Catmull-Rom)", "Cubic (Hermite)", "Cubic (Spline)", "Nearest Neighbor", "Sinc (Lanczos2)", "Sinc (Lanczos3)", "Sinc (Lanczos5)", "Sinc (Lanczos8)", "Robidoux", "Robidoux Sharp"]
      if @api_client.config.client_side_validation && !allowable_values.include?(algorithm)
        fail ArgumentError, "invalid value for \"algorithm\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'units' is set
      if @api_client.config.client_side_validation && units.nil?
        fail ArgumentError, "Missing the required parameter 'units' when calling FilesApi.resize_image"
      end
      # verify enum value
      allowable_values = ["Pixels", "Percent"]
      if @api_client.config.client_side_validation && !allowable_values.include?(units)
        fail ArgumentError, "invalid value for \"units\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.resize_image"
      end
      # resource path
      local_var_path = '/ResizeImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png', 'image/gif', 'image/jpeg', 'image/bmp'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['algorithm'] = algorithm
      form_params['units'] = units
      form_params['file'] = file
      form_params['height'] = opts[:'height'] if !opts[:'height'].nil?
      form_params['width'] = opts[:'width'] if !opts[:'width'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.resize_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#resize_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - Rotate Image
    # Rotate an image by specified number of degrees
    # @param degrees [String] Number of degrees
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [File]
    def rotate_image(degrees, file, opts = {})
      data, _status_code, _headers = rotate_image_with_http_info(degrees, file, opts)
      data
    end

    # Files - Rotate Image
    # Rotate an image by specified number of degrees
    # @param degrees [String] Number of degrees
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def rotate_image_with_http_info(degrees, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.rotate_image ...'
      end
      # verify the required parameter 'degrees' is set
      if @api_client.config.client_side_validation && degrees.nil?
        fail ArgumentError, "Missing the required parameter 'degrees' when calling FilesApi.rotate_image"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.rotate_image"
      end
      # resource path
      local_var_path = '/RotateImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['degrees'] = degrees
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.rotate_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#rotate_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Files - Watermark Image
    # Add watermark text to an image
    # @param text [String] Watermark text
    # @param font [String] Text font
    # @param size [Float] Font size (points)
    # @param color [String] Text color hex value
    # @param horizontal [String] Horizontal alignment
    # @param vertical [String] Vertical alignment
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [File]
    def watermark_image(text, font, size, color, horizontal, vertical, file, opts = {})
      data, _status_code, _headers = watermark_image_with_http_info(text, font, size, color, horizontal, vertical, file, opts)
      data
    end

    # Files - Watermark Image
    # Add watermark text to an image
    # @param text [String] Watermark text
    # @param font [String] Text font
    # @param size [Float] Font size (points)
    # @param color [String] Text color hex value
    # @param horizontal [String] Horizontal alignment
    # @param vertical [String] Vertical alignment
    # @param file [File] Source image file
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def watermark_image_with_http_info(text, font, size, color, horizontal, vertical, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.watermark_image ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling FilesApi.watermark_image"
      end
      # verify the required parameter 'font' is set
      if @api_client.config.client_side_validation && font.nil?
        fail ArgumentError, "Missing the required parameter 'font' when calling FilesApi.watermark_image"
      end
      # verify enum value
      allowable_values = ["Arial", "Arial Black", "Arial Narrow", "Book Antiqua", "Britannic Bold", "Brush Script MT", "Calisto MT", "Century Gothic", "Century Schoolbook", "Colonna MT", "Comic Sans MS", "Cooper Black", "Copperplate Gothic Bold", "Copperplate Gothic Light", "Courier New", "Edwardian Script ITC", "Engravers MT", "Franklin Gothic Demi", "Franklin Gothic Heavy", "Franklin Gothic Medium", "Garamond", "Georgia", "Gill Sans MT", "Gill Sans MT Condensed", "Gill Sans Ultra Bold", "Gill Sans Ultra Bold Condensed", "Goudy Old Style", "Haettenschweiler", "Holidays MT", "Impact", "Lucida Calligraphy", "Lucida Console", "Lucida Handwriting", "Lucida Sans Typewriter", "Lucida Sans Unicode", "Marlett", "Microsoft Sans Serif", "MS Outlook", "Palace Script MT", "Palatino Linotype", "Papyrus", "Playbill", "Rockwell", "Rockwell Condensed", "Rockwell Extra Bold", "Script MT Bold", "Stencil", "Symbol", "Tahoma", "Times New Roman", "Trebuchet MS", "Verdana", "Vivaldi", "Webdings", "Wingdings 1", "Wingdings 2", "Wingdings 3"]
      if @api_client.config.client_side_validation && !allowable_values.include?(font)
        fail ArgumentError, "invalid value for \"font\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling FilesApi.watermark_image"
      end
      # verify the required parameter 'color' is set
      if @api_client.config.client_side_validation && color.nil?
        fail ArgumentError, "Missing the required parameter 'color' when calling FilesApi.watermark_image"
      end
      # verify the required parameter 'horizontal' is set
      if @api_client.config.client_side_validation && horizontal.nil?
        fail ArgumentError, "Missing the required parameter 'horizontal' when calling FilesApi.watermark_image"
      end
      # verify enum value
      allowable_values = ["Left", "Center", "Right"]
      if @api_client.config.client_side_validation && !allowable_values.include?(horizontal)
        fail ArgumentError, "invalid value for \"horizontal\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'vertical' is set
      if @api_client.config.client_side_validation && vertical.nil?
        fail ArgumentError, "Missing the required parameter 'vertical' when calling FilesApi.watermark_image"
      end
      # verify enum value
      allowable_values = ["Top", "Center", "Bottom"]
      if @api_client.config.client_side_validation && !allowable_values.include?(vertical)
        fail ArgumentError, "invalid value for \"vertical\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.watermark_image"
      end
      # resource path
      local_var_path = '/WatermarkImage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['text'] = text
      form_params['font'] = font
      form_params['size'] = size
      form_params['color'] = color
      form_params['horizontal'] = horizontal
      form_params['vertical'] = vertical
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FilesApi.watermark_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#watermark_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
