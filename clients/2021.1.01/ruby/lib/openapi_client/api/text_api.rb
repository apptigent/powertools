=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module OpenapiClient
  class TextApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Text - Compare strings
    # Perform a comparison of two strings
    # @param [Hash] opts the optional parameters
    # @option opts [InputStringComparison] :string_comparison 
    # @return [OutputString]
    def compare_strings(opts = {})
      data, _status_code, _headers = compare_strings_with_http_info(opts)
      data
    end

    # Text - Compare strings
    # Perform a comparison of two strings
    # @param [Hash] opts the optional parameters
    # @option opts [InputStringComparison] :string_comparison 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def compare_strings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.compare_strings ...'
      end
      # resource path
      local_var_path = '/CompareStrings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_comparison'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.compare_strings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#compare_strings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Contains string
    # Determine if a string contains another string
    # @param [Hash] opts the optional parameters
    # @option opts [InputStringContains] :string_contains 
    # @return [OutputString]
    def contains_string(opts = {})
      data, _status_code, _headers = contains_string_with_http_info(opts)
      data
    end

    # Text - Contains string
    # Determine if a string contains another string
    # @param [Hash] opts the optional parameters
    # @option opts [InputStringContains] :string_contains 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def contains_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.contains_string ...'
      end
      # resource path
      local_var_path = '/ContainsString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_contains'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.contains_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#contains_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Convert case
    # Convert string to upper, lower or title case
    # @param [Hash] opts the optional parameters
    # @option opts [InputCaseConversion] :case_conversion 
    # @return [OutputString]
    def convert_case(opts = {})
      data, _status_code, _headers = convert_case_with_http_info(opts)
      data
    end

    # Text - Convert case
    # Convert string to upper, lower or title case
    # @param [Hash] opts the optional parameters
    # @option opts [InputCaseConversion] :case_conversion 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def convert_case_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.convert_case ...'
      end
      # resource path
      local_var_path = '/ConvertCase'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'case_conversion'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.convert_case",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#convert_case\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Decode string
    # Decode a string encoded with Base64 encoding
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :string_input 
    # @return [OutputString]
    def decode_string(opts = {})
      data, _status_code, _headers = decode_string_with_http_info(opts)
      data
    end

    # Text - Decode string
    # Decode a string encoded with Base64 encoding
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject] :string_input 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def decode_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.decode_string ...'
      end
      # resource path
      local_var_path = '/DecodeString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.decode_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#decode_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Encode string
    # Encode a string using Base64 encoding
    # @param [Hash] opts the optional parameters
    # @option opts [InputString] :string_input 
    # @return [OutputString]
    def encode_string(opts = {})
      data, _status_code, _headers = encode_string_with_http_info(opts)
      data
    end

    # Text - Encode string
    # Encode a string using Base64 encoding
    # @param [Hash] opts the optional parameters
    # @option opts [InputString] :string_input 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def encode_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.encode_string ...'
      end
      # resource path
      local_var_path = '/EncodeString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.encode_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#encode_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Generate GUID
    # Generate a globally unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [InputGenerateUniqueID] :generate_unique_id 
    # @return [OutputString]
    def generate_guid(opts = {})
      data, _status_code, _headers = generate_guid_with_http_info(opts)
      data
    end

    # Text - Generate GUID
    # Generate a globally unique identifier
    # @param [Hash] opts the optional parameters
    # @option opts [InputGenerateUniqueID] :generate_unique_id 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def generate_guid_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.generate_guid ...'
      end
      # resource path
      local_var_path = '/GenerateGuid'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'generate_unique_id'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.generate_guid",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#generate_guid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Generate hash
    # Generate a hash value from a string
    # @param [Hash] opts the optional parameters
    # @option opts [InputGenerateHash] :generate_hash 
    # @return [OutputString]
    def generate_hash(opts = {})
      data, _status_code, _headers = generate_hash_with_http_info(opts)
      data
    end

    # Text - Generate hash
    # Generate a hash value from a string
    # @param [Hash] opts the optional parameters
    # @option opts [InputGenerateHash] :generate_hash 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def generate_hash_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.generate_hash ...'
      end
      # resource path
      local_var_path = '/GenerateHash'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'generate_hash'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.generate_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#generate_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Join strings
    # Join a collection of strings
    # @param [Hash] opts the optional parameters
    # @option opts [InputJoinStrings] :join_strings 
    # @return [OutputString]
    def join_strings(opts = {})
      data, _status_code, _headers = join_strings_with_http_info(opts)
      data
    end

    # Text - Join strings
    # Join a collection of strings
    # @param [Hash] opts the optional parameters
    # @option opts [InputJoinStrings] :join_strings 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def join_strings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.join_strings ...'
      end
      # resource path
      local_var_path = '/JoinStrings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'join_strings'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.join_strings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#join_strings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Redact string
    # Redact a strng containing sensitive content
    # @param [Hash] opts the optional parameters
    # @option opts [InputRedactString] :redact_string 
    # @return [OutputString]
    def redact_string(opts = {})
      data, _status_code, _headers = redact_string_with_http_info(opts)
      data
    end

    # Text - Redact string
    # Redact a strng containing sensitive content
    # @param [Hash] opts the optional parameters
    # @option opts [InputRedactString] :redact_string 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def redact_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.redact_string ...'
      end
      # resource path
      local_var_path = '/RedactString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'redact_string'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.redact_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#redact_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Replace string
    # Replace one value with another in a string
    # @param [Hash] opts the optional parameters
    # @option opts [InputReplaceString] :replace_string 
    # @return [OutputString]
    def replace_string(opts = {})
      data, _status_code, _headers = replace_string_with_http_info(opts)
      data
    end

    # Text - Replace string
    # Replace one value with another in a string
    # @param [Hash] opts the optional parameters
    # @option opts [InputReplaceString] :replace_string 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def replace_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.replace_string ...'
      end
      # resource path
      local_var_path = '/ReplaceString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'replace_string'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.replace_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#replace_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Shorten hyperlink
    # Generate a simple, short URL from a complex URL
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject1] :string_input 
    # @return [OutputString]
    def shorten_link(opts = {})
      data, _status_code, _headers = shorten_link_with_http_info(opts)
      data
    end

    # Text - Shorten hyperlink
    # Generate a simple, short URL from a complex URL
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject1] :string_input 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def shorten_link_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.shorten_link ...'
      end
      # resource path
      local_var_path = '/ShortenLink'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.shorten_link",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#shorten_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Speech to Text
    # Convert audio file to text (10MB limit)
    # @param language [String] Language of audio input
    # @param file [File] Source audio file (WAV, MP3, AAC, M4A)
    # @param [Hash] opts the optional parameters
    # @return [OutputString]
    def speech_to_text(language, file, opts = {})
      data, _status_code, _headers = speech_to_text_with_http_info(language, file, opts)
      data
    end

    # Text - Speech to Text
    # Convert audio file to text (10MB limit)
    # @param language [String] Language of audio input
    # @param file [File] Source audio file (WAV, MP3, AAC, M4A)
    # @param [Hash] opts the optional parameters
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def speech_to_text_with_http_info(language, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.speech_to_text ...'
      end
      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling TextApi.speech_to_text"
      end
      # verify enum value
      allowable_values = ["Arabic (Bahrain)", "Arabic (Egypt)", "Arabic (Iraq)", "Arabic (Jordan)", "Arabic (Kuwait)", "Arabic (Lebanon)", "Arabic (Oman)", "Arabic (Qatar)", "Arabic (Saudi Arabia)", "Arabic (Syria)", "Arabic (United Arab Emirates)", "Bulgarian (Bulgaria)", "Catalan (Spain)", "Chinese (Cantonese, Traditional)", "Chinese (Mandarin, Simplified)", "Chinese (Taiwanese Mandarin)", "Croatian (Croatia)", "Czech (Czech Republic)", "Danish (Denmark)", "Dutch (Netherlands)", "English (Australia)", "English (Canada)", "English (Hong Kong)", "English (India)", "English (Ireland)", "English (New Zealand)", "English (Philippines)", "English (Singapore)", "English (South Africa)", "English (United Kingdom)", "English (United States)", "Estonian(Estonia)", "Finnish (Finland)", "French (Canada)", "French (France)", "German (Germany)", "Greek (Greece)", "Gujarati (Indian)", "Hindi (India)", "Hungarian (Hungary)", "Irish(Ireland)", "Italian (Italy)", "Japanese (Japan)", "Korean (Korea)", "Latvian (Latvia)", "Lithuanian (Lithuania)", "Maltese(Malta)", "Marathi (India)", "Norwegian (Norway)", "Polish (Poland)", "Portuguese (Brazil)", "Portuguese (Portugal)", "Romanian (Romania)", "Russian (Russia)", "Slovak (Slovakia)", "Slovenian (Slovenia)", "Spanish (Argentina)", "Spanish (Bolivia)", "Spanish (Chile)", "Spanish (Colombia)", "Spanish (Costa Rica)", "Spanish (Cuba)", "Spanish (Dominican Republic)", "Spanish (Ecuador)", "Spanish (El Salvador)", "Spanish (Guatemala)", "Spanish (Honduras)", "Spanish (Mexico)", "Spanish (Nicaragua)", "Spanish (Panama)", "Spanish (Paraguay)", "Spanish (Peru)", "Spanish (Puerto Rico)", "Spanish (Spain)", "Spanish (Uruguay)", "Spanish (USA)", "Spanish (Venezuela)", "Swedish (Sweden)", "Tamil (India)", "Telugu (India)", "Thai (Thailand)", "Turkish (Turkey)"]
      if @api_client.config.client_side_validation && !allowable_values.include?(language)
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling TextApi.speech_to_text"
      end
      # resource path
      local_var_path = '/SpeechToText'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['language'] = language
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.speech_to_text",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#speech_to_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Split string
    # Split a string based upon one or more characters
    # @param [Hash] opts the optional parameters
    # @option opts [InputSplitString] :split_string 
    # @return [OutputStringArray]
    def split_string(opts = {})
      data, _status_code, _headers = split_string_with_http_info(opts)
      data
    end

    # Text - Split string
    # Split a string based upon one or more characters
    # @param [Hash] opts the optional parameters
    # @option opts [InputSplitString] :split_string 
    # @return [Array<(OutputStringArray, Integer, Hash)>] OutputStringArray data, response status code and response headers
    def split_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.split_string ...'
      end
      # resource path
      local_var_path = '/SplitString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'split_string'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputStringArray'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.split_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#split_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - String to File
    # Convert text string to file
    # @param [Hash] opts the optional parameters
    # @option opts [InputStringToFile] :input_string_to_file 
    # @return [File]
    def string_to_file(opts = {})
      data, _status_code, _headers = string_to_file_with_http_info(opts)
      data
    end

    # Text - String to File
    # Convert text string to file
    # @param [Hash] opts the optional parameters
    # @option opts [InputStringToFile] :input_string_to_file 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def string_to_file_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.string_to_file ...'
      end
      # resource path
      local_var_path = '/StringToFile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'text/html', 'text/csv', 'text/javascript', 'text/css', 'application/xml', 'application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'input_string_to_file'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.string_to_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#string_to_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Text to Speech
    # Convert text to an audio file using AI-driven speech synthesis.
    # @param [Hash] opts the optional parameters
    # @option opts [InputTextToSpeech] :text_to_speech 
    # @return [File]
    def text_to_speech(opts = {})
      data, _status_code, _headers = text_to_speech_with_http_info(opts)
      data
    end

    # Text - Text to Speech
    # Convert text to an audio file using AI-driven speech synthesis.
    # @param [Hash] opts the optional parameters
    # @option opts [InputTextToSpeech] :text_to_speech 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def text_to_speech_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.text_to_speech ...'
      end
      # resource path
      local_var_path = '/TextToSpeech'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['audio/mp3'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'text_to_speech'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.text_to_speech",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#text_to_speech\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Translate string
    # Translate a string into a different language
    # @param [Hash] opts the optional parameters
    # @option opts [InputTranslateString] :translate_string 
    # @return [OutputString]
    def translate_string(opts = {})
      data, _status_code, _headers = translate_string_with_http_info(opts)
      data
    end

    # Text - Translate string
    # Translate a string into a different language
    # @param [Hash] opts the optional parameters
    # @option opts [InputTranslateString] :translate_string 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def translate_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.translate_string ...'
      end
      # resource path
      local_var_path = '/TranslateString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'translate_string'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.translate_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#translate_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Trim string
    # Trim leading or trailing whitespace from a string
    # @param [Hash] opts the optional parameters
    # @option opts [InputTrimString] :trim_string 
    # @return [OutputString]
    def trim_string(opts = {})
      data, _status_code, _headers = trim_string_with_http_info(opts)
      data
    end

    # Text - Trim string
    # Trim leading or trailing whitespace from a string
    # @param [Hash] opts the optional parameters
    # @option opts [InputTrimString] :trim_string 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def trim_string_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.trim_string ...'
      end
      # resource path
      local_var_path = '/TrimString'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'trim_string'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.trim_string",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#trim_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Decode URL
    # Decode an encoded URL
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject2] :string_input 
    # @return [OutputString]
    def url_decode(opts = {})
      data, _status_code, _headers = url_decode_with_http_info(opts)
      data
    end

    # Text - Decode URL
    # Decode an encoded URL
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject2] :string_input 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def url_decode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.url_decode ...'
      end
      # resource path
      local_var_path = '/URLDecode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.url_decode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#url_decode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Encode URL
    # Generate an encoded string from a complex hyperlink
    # @param [Hash] opts the optional parameters
    # @option opts [InputString] :string_input 
    # @return [OutputString]
    def url_encode(opts = {})
      data, _status_code, _headers = url_encode_with_http_info(opts)
      data
    end

    # Text - Encode URL
    # Generate an encoded string from a complex hyperlink
    # @param [Hash] opts the optional parameters
    # @option opts [InputString] :string_input 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def url_encode_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.url_encode ...'
      end
      # resource path
      local_var_path = '/URLEncode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.url_encode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#url_encode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Validate email
    # Determine if an email address is valid
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject3] :string_input 
    # @return [OutputString]
    def validate_email(opts = {})
      data, _status_code, _headers = validate_email_with_http_info(opts)
      data
    end

    # Text - Validate email
    # Determine if an email address is valid
    # @param [Hash] opts the optional parameters
    # @option opts [InlineObject3] :string_input 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def validate_email_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.validate_email ...'
      end
      # resource path
      local_var_path = '/ValidateEmail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'string_input'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.validate_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#validate_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text - Verify hash
    # Verify a hashed value against the original source string
    # @param [Hash] opts the optional parameters
    # @option opts [InputVerifyHash] :verify_hash 
    # @return [OutputBoolean]
    def verify_hash(opts = {})
      data, _status_code, _headers = verify_hash_with_http_info(opts)
      data
    end

    # Text - Verify hash
    # Verify a hashed value against the original source string
    # @param [Hash] opts the optional parameters
    # @option opts [InputVerifyHash] :verify_hash 
    # @return [Array<(OutputBoolean, Integer, Hash)>] OutputBoolean data, response status code and response headers
    def verify_hash_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.verify_hash ...'
      end
      # resource path
      local_var_path = '/VerifyHash'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'verify_hash'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputBoolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"TextApi.verify_hash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#verify_hash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
