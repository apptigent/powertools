=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module OpenapiClient
  class MathApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Math - Calculate Absolute
    # Calculate the absolute value of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [OutputNumber]
    def calculate_absolute(opts = {})
      data, _status_code, _headers = calculate_absolute_with_http_info(opts)
      data
    end

    # Math - Calculate Absolute
    # Calculate the absolute value of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_absolute_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_absolute ...'
      end
      # resource path
      local_var_path = '/CalculateAbsolute'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_absolute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_absolute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Addition
    # Calculate the sum of two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [OutputNumber]
    def calculate_addition(opts = {})
      data, _status_code, _headers = calculate_addition_with_http_info(opts)
      data
    end

    # Math - Calculate Addition
    # Calculate the sum of two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_addition_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_addition ...'
      end
      # resource path
      local_var_path = '/CalculateAddition'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_numbers'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_addition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_addition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate average
    # Calculate the average of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [OutputNumber]
    def calculate_average(opts = {})
      data, _status_code, _headers = calculate_average_with_http_info(opts)
      data
    end

    # Math - Calculate average
    # Calculate the average of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_average_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_average ...'
      end
      # resource path
      local_var_path = '/CalculateAverage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_series'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_average",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_average\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Cosine
    # Calculate the cosine value of an angle
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [OutputNumber]
    def calculate_cosine(opts = {})
      data, _status_code, _headers = calculate_cosine_with_http_info(opts)
      data
    end

    # Math - Calculate Cosine
    # Calculate the cosine value of an angle
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_cosine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_cosine ...'
      end
      # resource path
      local_var_path = '/CalculateCosine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_cosine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_cosine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Division
    # Calculate the quotient of two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [OutputNumber]
    def calculate_division(opts = {})
      data, _status_code, _headers = calculate_division_with_http_info(opts)
      data
    end

    # Math - Calculate Division
    # Calculate the quotient of two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_division_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_division ...'
      end
      # resource path
      local_var_path = '/CalculateDivision'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_numbers'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_division",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_division\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Logarithm
    # Calculate the logarithm of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [OutputNumber]
    def calculate_logarithm(opts = {})
      data, _status_code, _headers = calculate_logarithm_with_http_info(opts)
      data
    end

    # Math - Calculate Logarithm
    # Calculate the logarithm of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_logarithm_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_logarithm ...'
      end
      # resource path
      local_var_path = '/CalculateLogarithm'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_logarithm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_logarithm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate median
    # Calculate the median of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [OutputNumber]
    def calculate_median(opts = {})
      data, _status_code, _headers = calculate_median_with_http_info(opts)
      data
    end

    # Math - Calculate median
    # Calculate the median of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_median_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_median ...'
      end
      # resource path
      local_var_path = '/CalculateMedian'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_series'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_median",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_median\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate minimum or maximum
    # Calculate the minimum or maximum value in a sequence of numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateMinMax] :calculate_series Series calculation parameters
    # @return [OutputNumber]
    def calculate_min_max(opts = {})
      data, _status_code, _headers = calculate_min_max_with_http_info(opts)
      data
    end

    # Math - Calculate minimum or maximum
    # Calculate the minimum or maximum value in a sequence of numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateMinMax] :calculate_series Series calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_min_max_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_min_max ...'
      end
      # resource path
      local_var_path = '/CalculateMinMax'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_series'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_min_max",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_min_max\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Modulo
    # Calculate the remainder of dividing two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [OutputNumber]
    def calculate_modulo(opts = {})
      data, _status_code, _headers = calculate_modulo_with_http_info(opts)
      data
    end

    # Math - Calculate Modulo
    # Calculate the remainder of dividing two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_modulo_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_modulo ...'
      end
      # resource path
      local_var_path = '/CalculateModulo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_numbers'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_modulo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_modulo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Multiplication
    # Calculate the product of two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [OutputNumber]
    def calculate_multiplication(opts = {})
      data, _status_code, _headers = calculate_multiplication_with_http_info(opts)
      data
    end

    # Math - Calculate Multiplication
    # Calculate the product of two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_multiplication_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_multiplication ...'
      end
      # resource path
      local_var_path = '/CalculateMultiplication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_numbers'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_multiplication",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_multiplication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Nth Root
    # Calculate the n-th root of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [OutputNumber]
    def calculate_nth_root(opts = {})
      data, _status_code, _headers = calculate_nth_root_with_http_info(opts)
      data
    end

    # Math - Calculate Nth Root
    # Calculate the n-th root of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_nth_root_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_nth_root ...'
      end
      # resource path
      local_var_path = '/CalculateNthRoot'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_numbers'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_nth_root",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_nth_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate power
    # Raise number to a specified power
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculatePower] :calculate_power Power calculation parameters
    # @return [OutputNumber]
    def calculate_power(opts = {})
      data, _status_code, _headers = calculate_power_with_http_info(opts)
      data
    end

    # Math - Calculate power
    # Raise number to a specified power
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculatePower] :calculate_power Power calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_power_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_power ...'
      end
      # resource path
      local_var_path = '/CalculatePower'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_power'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_power",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_power\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Sine
    # Calculate the sine value of an angle
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [OutputNumber]
    def calculate_sine(opts = {})
      data, _status_code, _headers = calculate_sine_with_http_info(opts)
      data
    end

    # Math - Calculate Sine
    # Calculate the sine value of an angle
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_sine_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_sine ...'
      end
      # resource path
      local_var_path = '/CalculateSine'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_sine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_sine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Square Root
    # Calculate the square root of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [OutputNumber]
    def calculate_square_root(opts = {})
      data, _status_code, _headers = calculate_square_root_with_http_info(opts)
      data
    end

    # Math - Calculate Square Root
    # Calculate the square root of a number
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_square_root_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_square_root ...'
      end
      # resource path
      local_var_path = '/CalculateSquareRoot'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_square_root",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_square_root\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Subtraction
    # Calculate the difference between two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [OutputNumber]
    def calculate_subtraction(opts = {})
      data, _status_code, _headers = calculate_subtraction_with_http_info(opts)
      data
    end

    # Math - Calculate Subtraction
    # Calculate the difference between two numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_subtraction_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_subtraction ...'
      end
      # resource path
      local_var_path = '/CalculateSubtraction'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_numbers'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_subtraction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_subtraction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate sum
    # Calculate the sum of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [OutputNumber]
    def calculate_sum(opts = {})
      data, _status_code, _headers = calculate_sum_with_http_info(opts)
      data
    end

    # Math - Calculate sum
    # Calculate the sum of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_sum_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_sum ...'
      end
      # resource path
      local_var_path = '/CalculateSum'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_series'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_sum",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_sum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate Tangent
    # Calculate the tangent value of an angle
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [OutputNumber]
    def calculate_tangent(opts = {})
      data, _status_code, _headers = calculate_tangent_with_http_info(opts)
      data
    end

    # Math - Calculate Tangent
    # Calculate the tangent value of an angle
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_tangent_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_tangent ...'
      end
      # resource path
      local_var_path = '/CalculateTangent'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_tangent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_tangent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate variance
    # Calculate the statistical variance of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [OutputNumber]
    def calculate_variance(opts = {})
      data, _status_code, _headers = calculate_variance_with_http_info(opts)
      data
    end

    # Math - Calculate variance
    # Calculate the statistical variance of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def calculate_variance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.calculate_variance ...'
      end
      # resource path
      local_var_path = '/CalculateVariance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_series'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.calculate_variance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#calculate_variance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert angle
    # Convert value from one angle measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertAngle] :convert_angle 
    # @return [OutputNumber]
    def convert_angle(opts = {})
      data, _status_code, _headers = convert_angle_with_http_info(opts)
      data
    end

    # Math - Convert angle
    # Convert value from one angle measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertAngle] :convert_angle 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_angle_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_angle ...'
      end
      # resource path
      local_var_path = '/ConvertAngle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_angle'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_angle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_angle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert area
    # Convert value from one area measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertArea] :convert_area 
    # @return [OutputNumber]
    def convert_area(opts = {})
      data, _status_code, _headers = convert_area_with_http_info(opts)
      data
    end

    # Math - Convert area
    # Convert value from one area measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertArea] :convert_area 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_area_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_area ...'
      end
      # resource path
      local_var_path = '/ConvertArea'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_area'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_area",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_area\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert distance
    # Convert value from one distance measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertDistance] :convert_distance 
    # @return [OutputNumber]
    def convert_distance(opts = {})
      data, _status_code, _headers = convert_distance_with_http_info(opts)
      data
    end

    # Math - Convert distance
    # Convert value from one distance measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertDistance] :convert_distance 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_distance_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_distance ...'
      end
      # resource path
      local_var_path = '/ConvertDistance'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_distance'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_distance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_distance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert duration
    # Convert value from one duration measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertDuration] :convert_duration 
    # @return [OutputNumber]
    def convert_duration(opts = {})
      data, _status_code, _headers = convert_duration_with_http_info(opts)
      data
    end

    # Math - Convert duration
    # Convert value from one duration measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertDuration] :convert_duration 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_duration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_duration ...'
      end
      # resource path
      local_var_path = '/ConvertDuration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_duration'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_duration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_duration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert energy
    # Convert value from one energy measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertEnergy] :convert_energy 
    # @return [OutputNumber]
    def convert_energy(opts = {})
      data, _status_code, _headers = convert_energy_with_http_info(opts)
      data
    end

    # Math - Convert energy
    # Convert value from one energy measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertEnergy] :convert_energy 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_energy_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_energy ...'
      end
      # resource path
      local_var_path = '/ConvertEnergy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_energy'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_energy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_energy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert power
    # Convert value from one power measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertPower] :convert_power 
    # @return [OutputNumber]
    def convert_power(opts = {})
      data, _status_code, _headers = convert_power_with_http_info(opts)
      data
    end

    # Math - Convert power
    # Convert value from one power measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertPower] :convert_power 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_power_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_power ...'
      end
      # resource path
      local_var_path = '/ConvertPower'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_power'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_power",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_power\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert speed
    # Convert value from one speed measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertSpeed] :convert_speed 
    # @return [OutputNumber]
    def convert_speed(opts = {})
      data, _status_code, _headers = convert_speed_with_http_info(opts)
      data
    end

    # Math - Convert speed
    # Convert value from one speed measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertSpeed] :convert_speed 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_speed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_speed ...'
      end
      # resource path
      local_var_path = '/ConvertSpeed'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_speed'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_speed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_speed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert temperature
    # Convert value from one temperature measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertTemperature] :convert_temperature 
    # @return [OutputNumber]
    def convert_temperature(opts = {})
      data, _status_code, _headers = convert_temperature_with_http_info(opts)
      data
    end

    # Math - Convert temperature
    # Convert value from one temperature measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertTemperature] :convert_temperature 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_temperature_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_temperature ...'
      end
      # resource path
      local_var_path = '/ConvertTemperature'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_temperature'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_temperature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_temperature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert volume
    # Convert value from one volume measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertVolume] :convert_volume 
    # @return [OutputNumber]
    def convert_volume(opts = {})
      data, _status_code, _headers = convert_volume_with_http_info(opts)
      data
    end

    # Math - Convert volume
    # Convert value from one volume measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertVolume] :convert_volume 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_volume_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_volume ...'
      end
      # resource path
      local_var_path = '/ConvertVolume'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_volume'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_volume",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_volume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Convert weight
    # Convert value from one weight measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertWeight] :convert_weight 
    # @return [OutputNumber]
    def convert_weight(opts = {})
      data, _status_code, _headers = convert_weight_with_http_info(opts)
      data
    end

    # Math - Convert weight
    # Convert value from one weight measurement to another
    # @param [Hash] opts the optional parameters
    # @option opts [InputConvertWeight] :convert_weight 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_weight_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_weight ...'
      end
      # resource path
      local_var_path = '/ConvertWeight'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'convert_weight'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.convert_weight",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_weight\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Random number
    # Generate a random number within a specified range
    # @param [Hash] opts the optional parameters
    # @option opts [InputNumberRange] :number_range 
    # @return [OutputNumber]
    def random_number(opts = {})
      data, _status_code, _headers = random_number_with_http_info(opts)
      data
    end

    # Math - Random number
    # Generate a random number within a specified range
    # @param [Hash] opts the optional parameters
    # @option opts [InputNumberRange] :number_range 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def random_number_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.random_number ...'
      end
      # resource path
      local_var_path = '/RandomNumber'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'number_range'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.random_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#random_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Round number
    # Round a numeric value up or down
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Numeric calculation parameters
    # @return [OutputNumber]
    def round_number(opts = {})
      data, _status_code, _headers = round_number_with_http_info(opts)
      data
    end

    # Math - Round number
    # Round a numeric value up or down
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateNumber] :calculate_number Numeric calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def round_number_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.round_number ...'
      end
      # resource path
      local_var_path = '/RoundNumber'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_number'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.round_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#round_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Math - Calculate standard deviation
    # Calculate the standard deviation of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [OutputNumber]
    def standard_deviation(opts = {})
      data, _status_code, _headers = standard_deviation_with_http_info(opts)
      data
    end

    # Math - Calculate standard deviation
    # Calculate the standard deviation of two or more numbers
    # @param [Hash] opts the optional parameters
    # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def standard_deviation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.standard_deviation ...'
      end
      # resource path
      local_var_path = '/StandardDeviation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'calculate_series'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"MathApi.standard_deviation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#standard_deviation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
