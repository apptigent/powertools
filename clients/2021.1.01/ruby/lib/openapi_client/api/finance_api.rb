=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module OpenapiClient
  class FinanceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Currency - Convert currency
    # Calculate monetary value in a different currency
    # @param [Hash] opts the optional parameters
    # @option opts [InputCurrencyConversion] :currency_conversion 
    # @return [OutputNumber]
    def convert_currency(opts = {})
      data, _status_code, _headers = convert_currency_with_http_info(opts)
      data
    end

    # Currency - Convert currency
    # Calculate monetary value in a different currency
    # @param [Hash] opts the optional parameters
    # @option opts [InputCurrencyConversion] :currency_conversion 
    # @return [Array<(OutputNumber, Integer, Hash)>] OutputNumber data, response status code and response headers
    def convert_currency_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FinanceApi.convert_currency ...'
      end
      # resource path
      local_var_path = '/ConvertCurrency'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'currency_conversion'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputNumber'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FinanceApi.convert_currency",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FinanceApi#convert_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Currency - Format currency
    # Apply currency symbol to a numeric value
    # @param [Hash] opts the optional parameters
    # @option opts [InputCurrencyFormat] :currency_format 
    # @return [OutputString]
    def format_currency(opts = {})
      data, _status_code, _headers = format_currency_with_http_info(opts)
      data
    end

    # Currency - Format currency
    # Apply currency symbol to a numeric value
    # @param [Hash] opts the optional parameters
    # @option opts [InputCurrencyFormat] :currency_format 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def format_currency_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FinanceApi.format_currency ...'
      end
      # resource path
      local_var_path = '/FormatCurrency'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'currency_format'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FinanceApi.format_currency",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FinanceApi#format_currency\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finance - Market index
    # Get current and historical market index information
    # @param [Hash] opts the optional parameters
    # @option opts [InputMarketIndex] :market_index 
    # @return [OutputMarketIndex]
    def market_index(opts = {})
      data, _status_code, _headers = market_index_with_http_info(opts)
      data
    end

    # Finance - Market index
    # Get current and historical market index information
    # @param [Hash] opts the optional parameters
    # @option opts [InputMarketIndex] :market_index 
    # @return [Array<(OutputMarketIndex, Integer, Hash)>] OutputMarketIndex data, response status code and response headers
    def market_index_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FinanceApi.market_index ...'
      end
      # resource path
      local_var_path = '/MarketIndex'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'market_index'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputMarketIndex'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FinanceApi.market_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FinanceApi#market_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Finance - Stock prices
    # Get current and historical stock price information
    # @param [Hash] opts the optional parameters
    # @option opts [InputStockPrices] :stock_prices 
    # @return [OutputStockPrice]
    def stock_prices(opts = {})
      data, _status_code, _headers = stock_prices_with_http_info(opts)
      data
    end

    # Finance - Stock prices
    # Get current and historical stock price information
    # @param [Hash] opts the optional parameters
    # @option opts [InputStockPrices] :stock_prices 
    # @return [Array<(OutputStockPrice, Integer, Hash)>] OutputStockPrice data, response status code and response headers
    def stock_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FinanceApi.stock_prices ...'
      end
      # resource path
      local_var_path = '/StockPrices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'stock_prices'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputStockPrice'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"FinanceApi.stock_prices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FinanceApi#stock_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
