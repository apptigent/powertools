=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'cgi'

module OpenapiClient
  class DataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Data - CSV to JSON
    # Convert a CSV string to a JSON array
    # @param [Hash] opts the optional parameters
    # @option opts [InputCsvConversionJSON] :csv_conversion_json 
    # @return [OutputString]
    def csv_to_json(opts = {})
      data, _status_code, _headers = csv_to_json_with_http_info(opts)
      data
    end

    # Data - CSV to JSON
    # Convert a CSV string to a JSON array
    # @param [Hash] opts the optional parameters
    # @option opts [InputCsvConversionJSON] :csv_conversion_json 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def csv_to_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.csv_to_json ...'
      end
      # resource path
      local_var_path = '/CSVtoJSON'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'csv_conversion_json'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.csv_to_json",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#csv_to_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data - JSON to CSV
    # Convert a JSON array to CSV string
    # @param [Hash] opts the optional parameters
    # @option opts [InputJsonConversionCSV] :json_conversion_csv 
    # @return [OutputString]
    def json_to_csv(opts = {})
      data, _status_code, _headers = json_to_csv_with_http_info(opts)
      data
    end

    # Data - JSON to CSV
    # Convert a JSON array to CSV string
    # @param [Hash] opts the optional parameters
    # @option opts [InputJsonConversionCSV] :json_conversion_csv 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def json_to_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.json_to_csv ...'
      end
      # resource path
      local_var_path = '/JSONtoCSV'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'json_conversion_csv'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.json_to_csv",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#json_to_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data - JSON to HTML Table
    # Convert a JSON array to an HTML table
    # @param [Hash] opts the optional parameters
    # @option opts [InputJsonConversionHTML] :json_conversion_html 
    # @return [OutputString]
    def json_to_html(opts = {})
      data, _status_code, _headers = json_to_html_with_http_info(opts)
      data
    end

    # Data - JSON to HTML Table
    # Convert a JSON array to an HTML table
    # @param [Hash] opts the optional parameters
    # @option opts [InputJsonConversionHTML] :json_conversion_html 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def json_to_html_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.json_to_html ...'
      end
      # resource path
      local_var_path = '/JSONtoHTML'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'json_conversion_html'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.json_to_html",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#json_to_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data - JSON to XML
    # Convert a JSON object to an XML string
    # @param [Hash] opts the optional parameters
    # @option opts [InputJsonConversionXML] :json_conversion_xml 
    # @return [OutputString]
    def json_to_xml(opts = {})
      data, _status_code, _headers = json_to_xml_with_http_info(opts)
      data
    end

    # Data - JSON to XML
    # Convert a JSON object to an XML string
    # @param [Hash] opts the optional parameters
    # @option opts [InputJsonConversionXML] :json_conversion_xml 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def json_to_xml_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.json_to_xml ...'
      end
      # resource path
      local_var_path = '/JSONtoXML'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'json_conversion_xml'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.json_to_xml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#json_to_xml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data - Query JSON
    # Query a JSON object using a JSONPath expression
    # @param [Hash] opts the optional parameters
    # @option opts [InputDataQuery] :input_data_query 
    # @return [OutputString]
    def query_json(opts = {})
      data, _status_code, _headers = query_json_with_http_info(opts)
      data
    end

    # Data - Query JSON
    # Query a JSON object using a JSONPath expression
    # @param [Hash] opts the optional parameters
    # @option opts [InputDataQuery] :input_data_query 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def query_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.query_json ...'
      end
      # resource path
      local_var_path = '/QueryJSON'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'input_data_query'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.query_json",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#query_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data - Query XML
    # Query an XML string using an XPath expression
    # @param [Hash] opts the optional parameters
    # @option opts [InputDataQuery] :input_data_query 
    # @return [OutputString]
    def query_xml(opts = {})
      data, _status_code, _headers = query_xml_with_http_info(opts)
      data
    end

    # Data - Query XML
    # Query an XML string using an XPath expression
    # @param [Hash] opts the optional parameters
    # @option opts [InputDataQuery] :input_data_query 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def query_xml_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.query_xml ...'
      end
      # resource path
      local_var_path = '/QueryXML'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'input_data_query'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.query_xml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#query_xml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Data - XML to JSON
    # Convert an XML string to a JSON object
    # @param [Hash] opts the optional parameters
    # @option opts [InputXmlConversionJSON] :xml_conversion_json 
    # @return [OutputString]
    def xml_to_json(opts = {})
      data, _status_code, _headers = xml_to_json_with_http_info(opts)
      data
    end

    # Data - XML to JSON
    # Convert an XML string to a JSON object
    # @param [Hash] opts the optional parameters
    # @option opts [InputXmlConversionJSON] :xml_conversion_json 
    # @return [Array<(OutputString, Integer, Hash)>] OutputString data, response status code and response headers
    def xml_to_json_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.xml_to_json ...'
      end
      # resource path
      local_var_path = '/XMLtoJSON'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'xml_conversion_json'])

      # return_type
      return_type = opts[:debug_return_type] || 'OutputString'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyHeader']

      new_options = opts.merge(
        :operation => :"DataApi.xml_to_json",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#xml_to_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
