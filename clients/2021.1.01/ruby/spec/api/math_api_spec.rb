=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::MathApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'MathApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::MathApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of MathApi' do
    it 'should create an instance of MathApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::MathApi)
    end
  end

  # unit tests for calculate_absolute
  # Math - Calculate Absolute
  # Calculate the absolute value of a number
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_absolute test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_addition
  # Math - Calculate Addition
  # Calculate the sum of two numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_addition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_average
  # Math - Calculate average
  # Calculate the average of two or more numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
  # @return [OutputNumber]
  describe 'calculate_average test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_cosine
  # Math - Calculate Cosine
  # Calculate the cosine value of an angle
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_cosine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_division
  # Math - Calculate Division
  # Calculate the quotient of two numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_division test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_logarithm
  # Math - Calculate Logarithm
  # Calculate the logarithm of a number
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_logarithm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_median
  # Math - Calculate median
  # Calculate the median of two or more numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
  # @return [OutputNumber]
  describe 'calculate_median test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_min_max
  # Math - Calculate minimum or maximum
  # Calculate the minimum or maximum value in a sequence of numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateMinMax] :calculate_series Series calculation parameters
  # @return [OutputNumber]
  describe 'calculate_min_max test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_modulo
  # Math - Calculate Modulo
  # Calculate the remainder of dividing two numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_modulo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_multiplication
  # Math - Calculate Multiplication
  # Calculate the product of two numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_multiplication test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_nth_root
  # Math - Calculate Nth Root
  # Calculate the n-th root of a number
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_nth_root test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_power
  # Math - Calculate power
  # Raise number to a specified power
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculatePower] :calculate_power Power calculation parameters
  # @return [OutputNumber]
  describe 'calculate_power test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_sine
  # Math - Calculate Sine
  # Calculate the sine value of an angle
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_sine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_square_root
  # Math - Calculate Square Root
  # Calculate the square root of a number
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_square_root test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_subtraction
  # Math - Calculate Subtraction
  # Calculate the difference between two numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumbers] :calculate_numbers Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_subtraction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_sum
  # Math - Calculate sum
  # Calculate the sum of two or more numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
  # @return [OutputNumber]
  describe 'calculate_sum test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_tangent
  # Math - Calculate Tangent
  # Calculate the tangent value of an angle
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Number calculation parameters
  # @return [OutputNumber]
  describe 'calculate_tangent test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for calculate_variance
  # Math - Calculate variance
  # Calculate the statistical variance of two or more numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
  # @return [OutputNumber]
  describe 'calculate_variance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_angle
  # Math - Convert angle
  # Convert value from one angle measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertAngle] :convert_angle 
  # @return [OutputNumber]
  describe 'convert_angle test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_area
  # Math - Convert area
  # Convert value from one area measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertArea] :convert_area 
  # @return [OutputNumber]
  describe 'convert_area test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_distance
  # Math - Convert distance
  # Convert value from one distance measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertDistance] :convert_distance 
  # @return [OutputNumber]
  describe 'convert_distance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_duration
  # Math - Convert duration
  # Convert value from one duration measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertDuration] :convert_duration 
  # @return [OutputNumber]
  describe 'convert_duration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_energy
  # Math - Convert energy
  # Convert value from one energy measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertEnergy] :convert_energy 
  # @return [OutputNumber]
  describe 'convert_energy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_power
  # Math - Convert power
  # Convert value from one power measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertPower] :convert_power 
  # @return [OutputNumber]
  describe 'convert_power test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_speed
  # Math - Convert speed
  # Convert value from one speed measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertSpeed] :convert_speed 
  # @return [OutputNumber]
  describe 'convert_speed test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_temperature
  # Math - Convert temperature
  # Convert value from one temperature measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertTemperature] :convert_temperature 
  # @return [OutputNumber]
  describe 'convert_temperature test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_volume
  # Math - Convert volume
  # Convert value from one volume measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertVolume] :convert_volume 
  # @return [OutputNumber]
  describe 'convert_volume test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_weight
  # Math - Convert weight
  # Convert value from one weight measurement to another
  # @param [Hash] opts the optional parameters
  # @option opts [InputConvertWeight] :convert_weight 
  # @return [OutputNumber]
  describe 'convert_weight test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for random_number
  # Math - Random number
  # Generate a random number within a specified range
  # @param [Hash] opts the optional parameters
  # @option opts [InputNumberRange] :number_range 
  # @return [OutputNumber]
  describe 'random_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for round_number
  # Math - Round number
  # Round a numeric value up or down
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateNumber] :calculate_number Numeric calculation parameters
  # @return [OutputNumber]
  describe 'round_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for standard_deviation
  # Math - Calculate standard deviation
  # Calculate the standard deviation of two or more numbers
  # @param [Hash] opts the optional parameters
  # @option opts [InputCalculateSeries] :calculate_series Series calculation parameters
  # @return [OutputNumber]
  describe 'standard_deviation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
