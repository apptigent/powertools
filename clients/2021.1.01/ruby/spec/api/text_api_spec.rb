=begin
#PowerTools Developer

#Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.

The version of the OpenAPI document: 2021.1.01
Contact: support@apptigent.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::TextApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TextApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::TextApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TextApi' do
    it 'should create an instance of TextApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::TextApi)
    end
  end

  # unit tests for compare_strings
  # Text - Compare strings
  # Perform a comparison of two strings
  # @param [Hash] opts the optional parameters
  # @option opts [InputStringComparison] :string_comparison 
  # @return [OutputString]
  describe 'compare_strings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for contains_string
  # Text - Contains string
  # Determine if a string contains another string
  # @param [Hash] opts the optional parameters
  # @option opts [InputStringContains] :string_contains 
  # @return [OutputString]
  describe 'contains_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for convert_case
  # Text - Convert case
  # Convert string to upper, lower or title case
  # @param [Hash] opts the optional parameters
  # @option opts [InputCaseConversion] :case_conversion 
  # @return [OutputString]
  describe 'convert_case test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for decode_string
  # Text - Decode string
  # Decode a string encoded with Base64 encoding
  # @param [Hash] opts the optional parameters
  # @option opts [InlineObject] :string_input 
  # @return [OutputString]
  describe 'decode_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for encode_string
  # Text - Encode string
  # Encode a string using Base64 encoding
  # @param [Hash] opts the optional parameters
  # @option opts [InputString] :string_input 
  # @return [OutputString]
  describe 'encode_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_guid
  # Text - Generate GUID
  # Generate a globally unique identifier
  # @param [Hash] opts the optional parameters
  # @option opts [InputGenerateUniqueID] :generate_unique_id 
  # @return [OutputString]
  describe 'generate_guid test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for generate_hash
  # Text - Generate hash
  # Generate a hash value from a string
  # @param [Hash] opts the optional parameters
  # @option opts [InputGenerateHash] :generate_hash 
  # @return [OutputString]
  describe 'generate_hash test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for join_strings
  # Text - Join strings
  # Join a collection of strings
  # @param [Hash] opts the optional parameters
  # @option opts [InputJoinStrings] :join_strings 
  # @return [OutputString]
  describe 'join_strings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for redact_string
  # Text - Redact string
  # Redact a strng containing sensitive content
  # @param [Hash] opts the optional parameters
  # @option opts [InputRedactString] :redact_string 
  # @return [OutputString]
  describe 'redact_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_string
  # Text - Replace string
  # Replace one value with another in a string
  # @param [Hash] opts the optional parameters
  # @option opts [InputReplaceString] :replace_string 
  # @return [OutputString]
  describe 'replace_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for shorten_link
  # Text - Shorten hyperlink
  # Generate a simple, short URL from a complex URL
  # @param [Hash] opts the optional parameters
  # @option opts [InlineObject1] :string_input 
  # @return [OutputString]
  describe 'shorten_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for speech_to_text
  # Text - Speech to Text
  # Convert audio file to text (10MB limit)
  # @param language Language of audio input
  # @param file Source audio file (WAV, MP3, AAC, M4A)
  # @param [Hash] opts the optional parameters
  # @return [OutputString]
  describe 'speech_to_text test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for split_string
  # Text - Split string
  # Split a string based upon one or more characters
  # @param [Hash] opts the optional parameters
  # @option opts [InputSplitString] :split_string 
  # @return [OutputStringArray]
  describe 'split_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for string_to_file
  # Text - String to File
  # Convert text string to file
  # @param [Hash] opts the optional parameters
  # @option opts [InputStringToFile] :input_string_to_file 
  # @return [File]
  describe 'string_to_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for text_to_speech
  # Text - Text to Speech
  # Convert text to an audio file using AI-driven speech synthesis.
  # @param [Hash] opts the optional parameters
  # @option opts [InputTextToSpeech] :text_to_speech 
  # @return [File]
  describe 'text_to_speech test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for translate_string
  # Text - Translate string
  # Translate a string into a different language
  # @param [Hash] opts the optional parameters
  # @option opts [InputTranslateString] :translate_string 
  # @return [OutputString]
  describe 'translate_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for trim_string
  # Text - Trim string
  # Trim leading or trailing whitespace from a string
  # @param [Hash] opts the optional parameters
  # @option opts [InputTrimString] :trim_string 
  # @return [OutputString]
  describe 'trim_string test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for url_decode
  # Text - Decode URL
  # Decode an encoded URL
  # @param [Hash] opts the optional parameters
  # @option opts [InlineObject2] :string_input 
  # @return [OutputString]
  describe 'url_decode test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for url_encode
  # Text - Encode URL
  # Generate an encoded string from a complex hyperlink
  # @param [Hash] opts the optional parameters
  # @option opts [InputString] :string_input 
  # @return [OutputString]
  describe 'url_encode test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for validate_email
  # Text - Validate email
  # Determine if an email address is valid
  # @param [Hash] opts the optional parameters
  # @option opts [InlineObject3] :string_input 
  # @return [OutputString]
  describe 'validate_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for verify_hash
  # Text - Verify hash
  # Verify a hashed value against the original source string
  # @param [Hash] opts the optional parameters
  # @option opts [InputVerifyHash] :verify_hash 
  # @return [OutputBoolean]
  describe 'verify_hash test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
