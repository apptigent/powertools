/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputSplitString struct for InputSplitString
type InputSplitString struct {
	// Text to split
	Input string `json:"input"`
	// One or more characters that will be used to split the text
	Characters string `json:"characters"`
}

// NewInputSplitString instantiates a new InputSplitString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSplitString(input string, characters string, ) *InputSplitString {
	this := InputSplitString{}
	this.Input = input
	this.Characters = characters
	return &this
}

// NewInputSplitStringWithDefaults instantiates a new InputSplitString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSplitStringWithDefaults() *InputSplitString {
	this := InputSplitString{}
	return &this
}

// GetInput returns the Input field value
func (o *InputSplitString) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputSplitString) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputSplitString) SetInput(v string) {
	o.Input = v
}

// GetCharacters returns the Characters field value
func (o *InputSplitString) GetCharacters() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Characters
}

// GetCharactersOk returns a tuple with the Characters field value
// and a boolean to check if the value has been set.
func (o *InputSplitString) GetCharactersOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Characters, true
}

// SetCharacters sets field value
func (o *InputSplitString) SetCharacters(v string) {
	o.Characters = v
}

func (o InputSplitString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["characters"] = o.Characters
	}
	return json.Marshal(toSerialize)
}

type NullableInputSplitString struct {
	value *InputSplitString
	isSet bool
}

func (v NullableInputSplitString) Get() *InputSplitString {
	return v.value
}

func (v *NullableInputSplitString) Set(val *InputSplitString) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSplitString) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSplitString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSplitString(val *InputSplitString) *NullableInputSplitString {
	return &NullableInputSplitString{value: val, isSet: true}
}

func (v NullableInputSplitString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSplitString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


