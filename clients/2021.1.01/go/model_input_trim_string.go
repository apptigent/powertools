/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputTrimString struct for InputTrimString
type InputTrimString struct {
	// String containing the text to be trimmed
	Source string `json:"source"`
	// Type of white space to remove
	Type string `json:"type"`
}

// NewInputTrimString instantiates a new InputTrimString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputTrimString(source string, type_ string, ) *InputTrimString {
	this := InputTrimString{}
	this.Source = source
	this.Type = type_
	return &this
}

// NewInputTrimStringWithDefaults instantiates a new InputTrimString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputTrimStringWithDefaults() *InputTrimString {
	this := InputTrimString{}
	return &this
}

// GetSource returns the Source field value
func (o *InputTrimString) GetSource() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *InputTrimString) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *InputTrimString) SetSource(v string) {
	o.Source = v
}

// GetType returns the Type field value
func (o *InputTrimString) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InputTrimString) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InputTrimString) SetType(v string) {
	o.Type = v
}

func (o InputTrimString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableInputTrimString struct {
	value *InputTrimString
	isSet bool
}

func (v NullableInputTrimString) Get() *InputTrimString {
	return v.value
}

func (v *NullableInputTrimString) Set(val *InputTrimString) {
	v.value = val
	v.isSet = true
}

func (v NullableInputTrimString) IsSet() bool {
	return v.isSet
}

func (v *NullableInputTrimString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputTrimString(val *InputTrimString) *NullableInputTrimString {
	return &NullableInputTrimString{value: val, isSet: true}
}

func (v NullableInputTrimString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputTrimString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


