/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputDataQuery struct for InputDataQuery
type InputDataQuery struct {
	// XML or JSON string
	Input string `json:"input"`
	// XPath or JSONPath query
	Query string `json:"query"`
}

// NewInputDataQuery instantiates a new InputDataQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDataQuery(input string, query string, ) *InputDataQuery {
	this := InputDataQuery{}
	this.Input = input
	this.Query = query
	return &this
}

// NewInputDataQueryWithDefaults instantiates a new InputDataQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDataQueryWithDefaults() *InputDataQuery {
	this := InputDataQuery{}
	return &this
}

// GetInput returns the Input field value
func (o *InputDataQuery) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputDataQuery) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputDataQuery) SetInput(v string) {
	o.Input = v
}

// GetQuery returns the Query field value
func (o *InputDataQuery) GetQuery() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *InputDataQuery) GetQueryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *InputDataQuery) SetQuery(v string) {
	o.Query = v
}

func (o InputDataQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableInputDataQuery struct {
	value *InputDataQuery
	isSet bool
}

func (v NullableInputDataQuery) Get() *InputDataQuery {
	return v.value
}

func (v *NullableInputDataQuery) Set(val *InputDataQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDataQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDataQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDataQuery(val *InputDataQuery) *NullableInputDataQuery {
	return &NullableInputDataQuery{value: val, isSet: true}
}

func (v NullableInputDataQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDataQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


