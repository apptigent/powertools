/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputCalculatePower struct for InputCalculatePower
type InputCalculatePower struct {
	// Number to raise
	Input float32 `json:"input"`
	// Power
	Power float32 `json:"power"`
	// Round to number of decimal places
	Decimals float32 `json:"decimals"`
}

// NewInputCalculatePower instantiates a new InputCalculatePower object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputCalculatePower(input float32, power float32, decimals float32, ) *InputCalculatePower {
	this := InputCalculatePower{}
	this.Input = input
	this.Power = power
	this.Decimals = decimals
	return &this
}

// NewInputCalculatePowerWithDefaults instantiates a new InputCalculatePower object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputCalculatePowerWithDefaults() *InputCalculatePower {
	this := InputCalculatePower{}
	return &this
}

// GetInput returns the Input field value
func (o *InputCalculatePower) GetInput() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputCalculatePower) GetInputOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputCalculatePower) SetInput(v float32) {
	o.Input = v
}

// GetPower returns the Power field value
func (o *InputCalculatePower) GetPower() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Power
}

// GetPowerOk returns a tuple with the Power field value
// and a boolean to check if the value has been set.
func (o *InputCalculatePower) GetPowerOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Power, true
}

// SetPower sets field value
func (o *InputCalculatePower) SetPower(v float32) {
	o.Power = v
}

// GetDecimals returns the Decimals field value
func (o *InputCalculatePower) GetDecimals() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *InputCalculatePower) GetDecimalsOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *InputCalculatePower) SetDecimals(v float32) {
	o.Decimals = v
}

func (o InputCalculatePower) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["power"] = o.Power
	}
	if true {
		toSerialize["decimals"] = o.Decimals
	}
	return json.Marshal(toSerialize)
}

type NullableInputCalculatePower struct {
	value *InputCalculatePower
	isSet bool
}

func (v NullableInputCalculatePower) Get() *InputCalculatePower {
	return v.value
}

func (v *NullableInputCalculatePower) Set(val *InputCalculatePower) {
	v.value = val
	v.isSet = true
}

func (v NullableInputCalculatePower) IsSet() bool {
	return v.isSet
}

func (v *NullableInputCalculatePower) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputCalculatePower(val *InputCalculatePower) *NullableInputCalculatePower {
	return &NullableInputCalculatePower{value: val, isSet: true}
}

func (v NullableInputCalculatePower) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputCalculatePower) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


