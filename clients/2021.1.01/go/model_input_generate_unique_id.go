/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputGenerateUniqueID struct for InputGenerateUniqueID
type InputGenerateUniqueID struct {
	// All uppercase alpha characters
	Uppercase string `json:"uppercase"`
}

// NewInputGenerateUniqueID instantiates a new InputGenerateUniqueID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputGenerateUniqueID(uppercase string, ) *InputGenerateUniqueID {
	this := InputGenerateUniqueID{}
	this.Uppercase = uppercase
	return &this
}

// NewInputGenerateUniqueIDWithDefaults instantiates a new InputGenerateUniqueID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputGenerateUniqueIDWithDefaults() *InputGenerateUniqueID {
	this := InputGenerateUniqueID{}
	return &this
}

// GetUppercase returns the Uppercase field value
func (o *InputGenerateUniqueID) GetUppercase() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Uppercase
}

// GetUppercaseOk returns a tuple with the Uppercase field value
// and a boolean to check if the value has been set.
func (o *InputGenerateUniqueID) GetUppercaseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uppercase, true
}

// SetUppercase sets field value
func (o *InputGenerateUniqueID) SetUppercase(v string) {
	o.Uppercase = v
}

func (o InputGenerateUniqueID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uppercase"] = o.Uppercase
	}
	return json.Marshal(toSerialize)
}

type NullableInputGenerateUniqueID struct {
	value *InputGenerateUniqueID
	isSet bool
}

func (v NullableInputGenerateUniqueID) Get() *InputGenerateUniqueID {
	return v.value
}

func (v *NullableInputGenerateUniqueID) Set(val *InputGenerateUniqueID) {
	v.value = val
	v.isSet = true
}

func (v NullableInputGenerateUniqueID) IsSet() bool {
	return v.isSet
}

func (v *NullableInputGenerateUniqueID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputGenerateUniqueID(val *InputGenerateUniqueID) *NullableInputGenerateUniqueID {
	return &NullableInputGenerateUniqueID{value: val, isSet: true}
}

func (v NullableInputGenerateUniqueID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputGenerateUniqueID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


