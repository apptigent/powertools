/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputStockPriceResult struct for OutputStockPriceResult
type OutputStockPriceResult struct {
	// Date
	Date *string `json:"date,omitempty"`
	// Ticker symbol
	Symbol *string `json:"symbol,omitempty"`
	// Stock exchange
	Exchange *string `json:"exchange,omitempty"`
	// Open
	Open *float32 `json:"open,omitempty"`
	// High
	High *float32 `json:"high,omitempty"`
	// Low
	Low *float32 `json:"low,omitempty"`
	// Close
	Close *float32 `json:"close,omitempty"`
	// Volume
	Volume *float32 `json:"volume,omitempty"`
}

// NewOutputStockPriceResult instantiates a new OutputStockPriceResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputStockPriceResult() *OutputStockPriceResult {
	this := OutputStockPriceResult{}
	return &this
}

// NewOutputStockPriceResultWithDefaults instantiates a new OutputStockPriceResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputStockPriceResultWithDefaults() *OutputStockPriceResult {
	this := OutputStockPriceResult{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *OutputStockPriceResult) SetDate(v string) {
	o.Date = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OutputStockPriceResult) SetSymbol(v string) {
	o.Symbol = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *OutputStockPriceResult) SetExchange(v string) {
	o.Exchange = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetOpen() float32 {
	if o == nil || o.Open == nil {
		var ret float32
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetOpenOk() (*float32, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given float32 and assigns it to the Open field.
func (o *OutputStockPriceResult) SetOpen(v float32) {
	o.Open = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetHigh() float32 {
	if o == nil || o.High == nil {
		var ret float32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetHighOk() (*float32, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float32 and assigns it to the High field.
func (o *OutputStockPriceResult) SetHigh(v float32) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetLow() float32 {
	if o == nil || o.Low == nil {
		var ret float32
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetLowOk() (*float32, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given float32 and assigns it to the Low field.
func (o *OutputStockPriceResult) SetLow(v float32) {
	o.Low = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetClose() float32 {
	if o == nil || o.Close == nil {
		var ret float32
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetCloseOk() (*float32, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given float32 and assigns it to the Close field.
func (o *OutputStockPriceResult) SetClose(v float32) {
	o.Close = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *OutputStockPriceResult) GetVolume() float32 {
	if o == nil || o.Volume == nil {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStockPriceResult) GetVolumeOk() (*float32, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *OutputStockPriceResult) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *OutputStockPriceResult) SetVolume(v float32) {
	o.Volume = &v
}

func (o OutputStockPriceResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.Open != nil {
		toSerialize["open"] = o.Open
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableOutputStockPriceResult struct {
	value *OutputStockPriceResult
	isSet bool
}

func (v NullableOutputStockPriceResult) Get() *OutputStockPriceResult {
	return v.value
}

func (v *NullableOutputStockPriceResult) Set(val *OutputStockPriceResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputStockPriceResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputStockPriceResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputStockPriceResult(val *OutputStockPriceResult) *NullableOutputStockPriceResult {
	return &NullableOutputStockPriceResult{value: val, isSet: true}
}

func (v NullableOutputStockPriceResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputStockPriceResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


