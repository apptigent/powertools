/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputMarketIndex struct for OutputMarketIndex
type OutputMarketIndex struct {
	// Date
	Date *string `json:"date,omitempty"`
	// Index symbol
	Symbol *string `json:"symbol,omitempty"`
	// Market exchange
	Exchange *string `json:"exchange,omitempty"`
	// Open value
	Open *float32 `json:"open,omitempty"`
	// High value
	High *float32 `json:"high,omitempty"`
	// Low value
	Low *float32 `json:"low,omitempty"`
	// Close value
	Close *float32 `json:"close,omitempty"`
	// Trading volume
	Volume *float32 `json:"volume,omitempty"`
	// Adjusted open value
	AdjOpen *float32 `json:"adj_open,omitempty"`
	// Adjusted high value
	AdjHigh *float32 `json:"adj_high,omitempty"`
	// Adjusted low value
	AdjLow *float32 `json:"adj_low,omitempty"`
	// Adjusted close value
	AdjClose *float32 `json:"adj_close,omitempty"`
	// Adjusted trading volume
	AdjVolume *float32 `json:"adj_volume,omitempty"`
}

// NewOutputMarketIndex instantiates a new OutputMarketIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputMarketIndex() *OutputMarketIndex {
	this := OutputMarketIndex{}
	return &this
}

// NewOutputMarketIndexWithDefaults instantiates a new OutputMarketIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputMarketIndexWithDefaults() *OutputMarketIndex {
	this := OutputMarketIndex{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *OutputMarketIndex) SetDate(v string) {
	o.Date = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *OutputMarketIndex) SetSymbol(v string) {
	o.Symbol = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *OutputMarketIndex) SetExchange(v string) {
	o.Exchange = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetOpen() float32 {
	if o == nil || o.Open == nil {
		var ret float32
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetOpenOk() (*float32, bool) {
	if o == nil || o.Open == nil {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasOpen() bool {
	if o != nil && o.Open != nil {
		return true
	}

	return false
}

// SetOpen gets a reference to the given float32 and assigns it to the Open field.
func (o *OutputMarketIndex) SetOpen(v float32) {
	o.Open = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetHigh() float32 {
	if o == nil || o.High == nil {
		var ret float32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetHighOk() (*float32, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float32 and assigns it to the High field.
func (o *OutputMarketIndex) SetHigh(v float32) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetLow() float32 {
	if o == nil || o.Low == nil {
		var ret float32
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetLowOk() (*float32, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given float32 and assigns it to the Low field.
func (o *OutputMarketIndex) SetLow(v float32) {
	o.Low = &v
}

// GetClose returns the Close field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetClose() float32 {
	if o == nil || o.Close == nil {
		var ret float32
		return ret
	}
	return *o.Close
}

// GetCloseOk returns a tuple with the Close field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetCloseOk() (*float32, bool) {
	if o == nil || o.Close == nil {
		return nil, false
	}
	return o.Close, true
}

// HasClose returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasClose() bool {
	if o != nil && o.Close != nil {
		return true
	}

	return false
}

// SetClose gets a reference to the given float32 and assigns it to the Close field.
func (o *OutputMarketIndex) SetClose(v float32) {
	o.Close = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetVolume() float32 {
	if o == nil || o.Volume == nil {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetVolumeOk() (*float32, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *OutputMarketIndex) SetVolume(v float32) {
	o.Volume = &v
}

// GetAdjOpen returns the AdjOpen field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetAdjOpen() float32 {
	if o == nil || o.AdjOpen == nil {
		var ret float32
		return ret
	}
	return *o.AdjOpen
}

// GetAdjOpenOk returns a tuple with the AdjOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetAdjOpenOk() (*float32, bool) {
	if o == nil || o.AdjOpen == nil {
		return nil, false
	}
	return o.AdjOpen, true
}

// HasAdjOpen returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasAdjOpen() bool {
	if o != nil && o.AdjOpen != nil {
		return true
	}

	return false
}

// SetAdjOpen gets a reference to the given float32 and assigns it to the AdjOpen field.
func (o *OutputMarketIndex) SetAdjOpen(v float32) {
	o.AdjOpen = &v
}

// GetAdjHigh returns the AdjHigh field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetAdjHigh() float32 {
	if o == nil || o.AdjHigh == nil {
		var ret float32
		return ret
	}
	return *o.AdjHigh
}

// GetAdjHighOk returns a tuple with the AdjHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetAdjHighOk() (*float32, bool) {
	if o == nil || o.AdjHigh == nil {
		return nil, false
	}
	return o.AdjHigh, true
}

// HasAdjHigh returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasAdjHigh() bool {
	if o != nil && o.AdjHigh != nil {
		return true
	}

	return false
}

// SetAdjHigh gets a reference to the given float32 and assigns it to the AdjHigh field.
func (o *OutputMarketIndex) SetAdjHigh(v float32) {
	o.AdjHigh = &v
}

// GetAdjLow returns the AdjLow field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetAdjLow() float32 {
	if o == nil || o.AdjLow == nil {
		var ret float32
		return ret
	}
	return *o.AdjLow
}

// GetAdjLowOk returns a tuple with the AdjLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetAdjLowOk() (*float32, bool) {
	if o == nil || o.AdjLow == nil {
		return nil, false
	}
	return o.AdjLow, true
}

// HasAdjLow returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasAdjLow() bool {
	if o != nil && o.AdjLow != nil {
		return true
	}

	return false
}

// SetAdjLow gets a reference to the given float32 and assigns it to the AdjLow field.
func (o *OutputMarketIndex) SetAdjLow(v float32) {
	o.AdjLow = &v
}

// GetAdjClose returns the AdjClose field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetAdjClose() float32 {
	if o == nil || o.AdjClose == nil {
		var ret float32
		return ret
	}
	return *o.AdjClose
}

// GetAdjCloseOk returns a tuple with the AdjClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetAdjCloseOk() (*float32, bool) {
	if o == nil || o.AdjClose == nil {
		return nil, false
	}
	return o.AdjClose, true
}

// HasAdjClose returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasAdjClose() bool {
	if o != nil && o.AdjClose != nil {
		return true
	}

	return false
}

// SetAdjClose gets a reference to the given float32 and assigns it to the AdjClose field.
func (o *OutputMarketIndex) SetAdjClose(v float32) {
	o.AdjClose = &v
}

// GetAdjVolume returns the AdjVolume field value if set, zero value otherwise.
func (o *OutputMarketIndex) GetAdjVolume() float32 {
	if o == nil || o.AdjVolume == nil {
		var ret float32
		return ret
	}
	return *o.AdjVolume
}

// GetAdjVolumeOk returns a tuple with the AdjVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMarketIndex) GetAdjVolumeOk() (*float32, bool) {
	if o == nil || o.AdjVolume == nil {
		return nil, false
	}
	return o.AdjVolume, true
}

// HasAdjVolume returns a boolean if a field has been set.
func (o *OutputMarketIndex) HasAdjVolume() bool {
	if o != nil && o.AdjVolume != nil {
		return true
	}

	return false
}

// SetAdjVolume gets a reference to the given float32 and assigns it to the AdjVolume field.
func (o *OutputMarketIndex) SetAdjVolume(v float32) {
	o.AdjVolume = &v
}

func (o OutputMarketIndex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.Open != nil {
		toSerialize["open"] = o.Open
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Close != nil {
		toSerialize["close"] = o.Close
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.AdjOpen != nil {
		toSerialize["adj_open"] = o.AdjOpen
	}
	if o.AdjHigh != nil {
		toSerialize["adj_high"] = o.AdjHigh
	}
	if o.AdjLow != nil {
		toSerialize["adj_low"] = o.AdjLow
	}
	if o.AdjClose != nil {
		toSerialize["adj_close"] = o.AdjClose
	}
	if o.AdjVolume != nil {
		toSerialize["adj_volume"] = o.AdjVolume
	}
	return json.Marshal(toSerialize)
}

type NullableOutputMarketIndex struct {
	value *OutputMarketIndex
	isSet bool
}

func (v NullableOutputMarketIndex) Get() *OutputMarketIndex {
	return v.value
}

func (v *NullableOutputMarketIndex) Set(val *OutputMarketIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputMarketIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputMarketIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputMarketIndex(val *OutputMarketIndex) *NullableOutputMarketIndex {
	return &NullableOutputMarketIndex{value: val, isSet: true}
}

func (v NullableOutputMarketIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputMarketIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


