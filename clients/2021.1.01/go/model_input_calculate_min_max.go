/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputCalculateMinMax struct for InputCalculateMinMax
type InputCalculateMinMax struct {
	// Colllection of values to calculate
	Input []float32 `json:"input"`
	// Minimum or Maximum
	Type string `json:"type"`
}

// NewInputCalculateMinMax instantiates a new InputCalculateMinMax object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputCalculateMinMax(input []float32, type_ string, ) *InputCalculateMinMax {
	this := InputCalculateMinMax{}
	this.Input = input
	this.Type = type_
	return &this
}

// NewInputCalculateMinMaxWithDefaults instantiates a new InputCalculateMinMax object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputCalculateMinMaxWithDefaults() *InputCalculateMinMax {
	this := InputCalculateMinMax{}
	var type_ string = "Minimum"
	this.Type = type_
	return &this
}

// GetInput returns the Input field value
func (o *InputCalculateMinMax) GetInput() []float32 {
	if o == nil  {
		var ret []float32
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputCalculateMinMax) GetInputOk() (*[]float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputCalculateMinMax) SetInput(v []float32) {
	o.Input = v
}

// GetType returns the Type field value
func (o *InputCalculateMinMax) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InputCalculateMinMax) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InputCalculateMinMax) SetType(v string) {
	o.Type = v
}

func (o InputCalculateMinMax) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableInputCalculateMinMax struct {
	value *InputCalculateMinMax
	isSet bool
}

func (v NullableInputCalculateMinMax) Get() *InputCalculateMinMax {
	return v.value
}

func (v *NullableInputCalculateMinMax) Set(val *InputCalculateMinMax) {
	v.value = val
	v.isSet = true
}

func (v NullableInputCalculateMinMax) IsSet() bool {
	return v.isSet
}

func (v *NullableInputCalculateMinMax) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputCalculateMinMax(val *InputCalculateMinMax) *NullableInputCalculateMinMax {
	return &NullableInputCalculateMinMax{value: val, isSet: true}
}

func (v NullableInputCalculateMinMax) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputCalculateMinMax) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


