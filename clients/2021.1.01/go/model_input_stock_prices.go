/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputStockPrices struct for InputStockPrices
type InputStockPrices struct {
	// Stock ticker symbols (comma-separated, max 20)
	Symbols string `json:"symbols"`
	// Date (yyyy-MM-dd, leave empty for latest)
	Date *string `json:"date,omitempty"`
	// Stock exchange
	Exchange *string `json:"exchange,omitempty"`
}

// NewInputStockPrices instantiates a new InputStockPrices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputStockPrices(symbols string, ) *InputStockPrices {
	this := InputStockPrices{}
	this.Symbols = symbols
	return &this
}

// NewInputStockPricesWithDefaults instantiates a new InputStockPrices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputStockPricesWithDefaults() *InputStockPrices {
	this := InputStockPrices{}
	return &this
}

// GetSymbols returns the Symbols field value
func (o *InputStockPrices) GetSymbols() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Symbols
}

// GetSymbolsOk returns a tuple with the Symbols field value
// and a boolean to check if the value has been set.
func (o *InputStockPrices) GetSymbolsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbols, true
}

// SetSymbols sets field value
func (o *InputStockPrices) SetSymbols(v string) {
	o.Symbols = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *InputStockPrices) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputStockPrices) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *InputStockPrices) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *InputStockPrices) SetDate(v string) {
	o.Date = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *InputStockPrices) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputStockPrices) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *InputStockPrices) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *InputStockPrices) SetExchange(v string) {
	o.Exchange = &v
}

func (o InputStockPrices) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbols"] = o.Symbols
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	return json.Marshal(toSerialize)
}

type NullableInputStockPrices struct {
	value *InputStockPrices
	isSet bool
}

func (v NullableInputStockPrices) Get() *InputStockPrices {
	return v.value
}

func (v *NullableInputStockPrices) Set(val *InputStockPrices) {
	v.value = val
	v.isSet = true
}

func (v NullableInputStockPrices) IsSet() bool {
	return v.isSet
}

func (v *NullableInputStockPrices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputStockPrices(val *InputStockPrices) *NullableInputStockPrices {
	return &NullableInputStockPrices{value: val, isSet: true}
}

func (v NullableInputStockPrices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputStockPrices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


