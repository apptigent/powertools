/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputMarketIndex struct for InputMarketIndex
type InputMarketIndex struct {
	// Market index
	Symbol string `json:"symbol"`
	// Date (yyyy-MM-dd, leave empty for last trading day)
	Date *string `json:"date,omitempty"`
}

// NewInputMarketIndex instantiates a new InputMarketIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputMarketIndex(symbol string, ) *InputMarketIndex {
	this := InputMarketIndex{}
	this.Symbol = symbol
	return &this
}

// NewInputMarketIndexWithDefaults instantiates a new InputMarketIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputMarketIndexWithDefaults() *InputMarketIndex {
	this := InputMarketIndex{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *InputMarketIndex) GetSymbol() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *InputMarketIndex) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *InputMarketIndex) SetSymbol(v string) {
	o.Symbol = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *InputMarketIndex) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputMarketIndex) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *InputMarketIndex) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *InputMarketIndex) SetDate(v string) {
	o.Date = &v
}

func (o InputMarketIndex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableInputMarketIndex struct {
	value *InputMarketIndex
	isSet bool
}

func (v NullableInputMarketIndex) Get() *InputMarketIndex {
	return v.value
}

func (v *NullableInputMarketIndex) Set(val *InputMarketIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableInputMarketIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableInputMarketIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputMarketIndex(val *InputMarketIndex) *NullableInputMarketIndex {
	return &NullableInputMarketIndex{value: val, isSet: true}
}

func (v NullableInputMarketIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputMarketIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


