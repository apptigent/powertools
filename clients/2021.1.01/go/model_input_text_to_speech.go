/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputTextToSpeech struct for InputTextToSpeech
type InputTextToSpeech struct {
	// Text to convert (10,000 characters max)
	Text string `json:"text"`
	// Text or file type
	Type string `json:"type"`
	// Voice locale (must match language of input text)
	Voice string `json:"voice"`
}

// NewInputTextToSpeech instantiates a new InputTextToSpeech object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputTextToSpeech(text string, type_ string, voice string, ) *InputTextToSpeech {
	this := InputTextToSpeech{}
	this.Text = text
	this.Type = type_
	this.Voice = voice
	return &this
}

// NewInputTextToSpeechWithDefaults instantiates a new InputTextToSpeech object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputTextToSpeechWithDefaults() *InputTextToSpeech {
	this := InputTextToSpeech{}
	var type_ string = "PlainText"
	this.Type = type_
	var voice string = "en-US, Aria (Female)"
	this.Voice = voice
	return &this
}

// GetText returns the Text field value
func (o *InputTextToSpeech) GetText() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *InputTextToSpeech) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *InputTextToSpeech) SetText(v string) {
	o.Text = v
}

// GetType returns the Type field value
func (o *InputTextToSpeech) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InputTextToSpeech) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InputTextToSpeech) SetType(v string) {
	o.Type = v
}

// GetVoice returns the Voice field value
func (o *InputTextToSpeech) GetVoice() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value
// and a boolean to check if the value has been set.
func (o *InputTextToSpeech) GetVoiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Voice, true
}

// SetVoice sets field value
func (o *InputTextToSpeech) SetVoice(v string) {
	o.Voice = v
}

func (o InputTextToSpeech) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["text"] = o.Text
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["voice"] = o.Voice
	}
	return json.Marshal(toSerialize)
}

type NullableInputTextToSpeech struct {
	value *InputTextToSpeech
	isSet bool
}

func (v NullableInputTextToSpeech) Get() *InputTextToSpeech {
	return v.value
}

func (v *NullableInputTextToSpeech) Set(val *InputTextToSpeech) {
	v.value = val
	v.isSet = true
}

func (v NullableInputTextToSpeech) IsSet() bool {
	return v.isSet
}

func (v *NullableInputTextToSpeech) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputTextToSpeech(val *InputTextToSpeech) *NullableInputTextToSpeech {
	return &NullableInputTextToSpeech{value: val, isSet: true}
}

func (v NullableInputTextToSpeech) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputTextToSpeech) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


