/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputVerifyHash struct for InputVerifyHash
type InputVerifyHash struct {
	// Original source string
	Input string `json:"input"`
	// Hash algorithm
	Algorithm string `json:"algorithm"`
	// Hashed result
	Hash string `json:"hash"`
}

// NewInputVerifyHash instantiates a new InputVerifyHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputVerifyHash(input string, algorithm string, hash string, ) *InputVerifyHash {
	this := InputVerifyHash{}
	this.Input = input
	this.Algorithm = algorithm
	this.Hash = hash
	return &this
}

// NewInputVerifyHashWithDefaults instantiates a new InputVerifyHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputVerifyHashWithDefaults() *InputVerifyHash {
	this := InputVerifyHash{}
	return &this
}

// GetInput returns the Input field value
func (o *InputVerifyHash) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputVerifyHash) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputVerifyHash) SetInput(v string) {
	o.Input = v
}

// GetAlgorithm returns the Algorithm field value
func (o *InputVerifyHash) GetAlgorithm() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *InputVerifyHash) GetAlgorithmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *InputVerifyHash) SetAlgorithm(v string) {
	o.Algorithm = v
}

// GetHash returns the Hash field value
func (o *InputVerifyHash) GetHash() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *InputVerifyHash) GetHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *InputVerifyHash) SetHash(v string) {
	o.Hash = v
}

func (o InputVerifyHash) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["algorithm"] = o.Algorithm
	}
	if true {
		toSerialize["hash"] = o.Hash
	}
	return json.Marshal(toSerialize)
}

type NullableInputVerifyHash struct {
	value *InputVerifyHash
	isSet bool
}

func (v NullableInputVerifyHash) Get() *InputVerifyHash {
	return v.value
}

func (v *NullableInputVerifyHash) Set(val *InputVerifyHash) {
	v.value = val
	v.isSet = true
}

func (v NullableInputVerifyHash) IsSet() bool {
	return v.isSet
}

func (v *NullableInputVerifyHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputVerifyHash(val *InputVerifyHash) *NullableInputVerifyHash {
	return &NullableInputVerifyHash{value: val, isSet: true}
}

func (v NullableInputVerifyHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputVerifyHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


