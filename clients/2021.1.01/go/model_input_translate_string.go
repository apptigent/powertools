/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputTranslateString struct for InputTranslateString
type InputTranslateString struct {
	// String containing the text to be translated
	Input string `json:"input"`
	// Translation language
	Language string `json:"language"`
}

// NewInputTranslateString instantiates a new InputTranslateString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputTranslateString(input string, language string, ) *InputTranslateString {
	this := InputTranslateString{}
	this.Input = input
	this.Language = language
	return &this
}

// NewInputTranslateStringWithDefaults instantiates a new InputTranslateString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputTranslateStringWithDefaults() *InputTranslateString {
	this := InputTranslateString{}
	return &this
}

// GetInput returns the Input field value
func (o *InputTranslateString) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputTranslateString) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputTranslateString) SetInput(v string) {
	o.Input = v
}

// GetLanguage returns the Language field value
func (o *InputTranslateString) GetLanguage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *InputTranslateString) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *InputTranslateString) SetLanguage(v string) {
	o.Language = v
}

func (o InputTranslateString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableInputTranslateString struct {
	value *InputTranslateString
	isSet bool
}

func (v NullableInputTranslateString) Get() *InputTranslateString {
	return v.value
}

func (v *NullableInputTranslateString) Set(val *InputTranslateString) {
	v.value = val
	v.isSet = true
}

func (v NullableInputTranslateString) IsSet() bool {
	return v.isSet
}

func (v *NullableInputTranslateString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputTranslateString(val *InputTranslateString) *NullableInputTranslateString {
	return &NullableInputTranslateString{value: val, isSet: true}
}

func (v NullableInputTranslateString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputTranslateString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


