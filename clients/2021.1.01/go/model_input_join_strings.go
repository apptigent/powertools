/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputJoinStrings struct for InputJoinStrings
type InputJoinStrings struct {
	// Collection of strings to be joined
	Input []string `json:"input"`
	// Separator character
	Separator string `json:"separator"`
	// Convert strings in collection to lowercase
	Lower string `json:"lower"`
	// Trim strings in collection
	Trim string `json:"trim"`
}

// NewInputJoinStrings instantiates a new InputJoinStrings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputJoinStrings(input []string, separator string, lower string, trim string, ) *InputJoinStrings {
	this := InputJoinStrings{}
	this.Input = input
	this.Separator = separator
	this.Lower = lower
	this.Trim = trim
	return &this
}

// NewInputJoinStringsWithDefaults instantiates a new InputJoinStrings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputJoinStringsWithDefaults() *InputJoinStrings {
	this := InputJoinStrings{}
	return &this
}

// GetInput returns the Input field value
func (o *InputJoinStrings) GetInput() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputJoinStrings) GetInputOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputJoinStrings) SetInput(v []string) {
	o.Input = v
}

// GetSeparator returns the Separator field value
func (o *InputJoinStrings) GetSeparator() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value
// and a boolean to check if the value has been set.
func (o *InputJoinStrings) GetSeparatorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Separator, true
}

// SetSeparator sets field value
func (o *InputJoinStrings) SetSeparator(v string) {
	o.Separator = v
}

// GetLower returns the Lower field value
func (o *InputJoinStrings) GetLower() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Lower
}

// GetLowerOk returns a tuple with the Lower field value
// and a boolean to check if the value has been set.
func (o *InputJoinStrings) GetLowerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lower, true
}

// SetLower sets field value
func (o *InputJoinStrings) SetLower(v string) {
	o.Lower = v
}

// GetTrim returns the Trim field value
func (o *InputJoinStrings) GetTrim() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Trim
}

// GetTrimOk returns a tuple with the Trim field value
// and a boolean to check if the value has been set.
func (o *InputJoinStrings) GetTrimOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Trim, true
}

// SetTrim sets field value
func (o *InputJoinStrings) SetTrim(v string) {
	o.Trim = v
}

func (o InputJoinStrings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["separator"] = o.Separator
	}
	if true {
		toSerialize["lower"] = o.Lower
	}
	if true {
		toSerialize["trim"] = o.Trim
	}
	return json.Marshal(toSerialize)
}

type NullableInputJoinStrings struct {
	value *InputJoinStrings
	isSet bool
}

func (v NullableInputJoinStrings) Get() *InputJoinStrings {
	return v.value
}

func (v *NullableInputJoinStrings) Set(val *InputJoinStrings) {
	v.value = val
	v.isSet = true
}

func (v NullableInputJoinStrings) IsSet() bool {
	return v.isSet
}

func (v *NullableInputJoinStrings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputJoinStrings(val *InputJoinStrings) *NullableInputJoinStrings {
	return &NullableInputJoinStrings{value: val, isSet: true}
}

func (v NullableInputJoinStrings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputJoinStrings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


