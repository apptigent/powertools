/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputStringContains struct for InputStringContains
type InputStringContains struct {
	// Text to match
	Find string `json:"find"`
	// Text to search
	Input string `json:"input"`
	// Convert strings to lowercase
	Lower string `json:"lower"`
}

// NewInputStringContains instantiates a new InputStringContains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputStringContains(find string, input string, lower string, ) *InputStringContains {
	this := InputStringContains{}
	this.Find = find
	this.Input = input
	this.Lower = lower
	return &this
}

// NewInputStringContainsWithDefaults instantiates a new InputStringContains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputStringContainsWithDefaults() *InputStringContains {
	this := InputStringContains{}
	return &this
}

// GetFind returns the Find field value
func (o *InputStringContains) GetFind() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Find
}

// GetFindOk returns a tuple with the Find field value
// and a boolean to check if the value has been set.
func (o *InputStringContains) GetFindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Find, true
}

// SetFind sets field value
func (o *InputStringContains) SetFind(v string) {
	o.Find = v
}

// GetInput returns the Input field value
func (o *InputStringContains) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputStringContains) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputStringContains) SetInput(v string) {
	o.Input = v
}

// GetLower returns the Lower field value
func (o *InputStringContains) GetLower() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Lower
}

// GetLowerOk returns a tuple with the Lower field value
// and a boolean to check if the value has been set.
func (o *InputStringContains) GetLowerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lower, true
}

// SetLower sets field value
func (o *InputStringContains) SetLower(v string) {
	o.Lower = v
}

func (o InputStringContains) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["find"] = o.Find
	}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["lower"] = o.Lower
	}
	return json.Marshal(toSerialize)
}

type NullableInputStringContains struct {
	value *InputStringContains
	isSet bool
}

func (v NullableInputStringContains) Get() *InputStringContains {
	return v.value
}

func (v *NullableInputStringContains) Set(val *InputStringContains) {
	v.value = val
	v.isSet = true
}

func (v NullableInputStringContains) IsSet() bool {
	return v.isSet
}

func (v *NullableInputStringContains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputStringContains(val *InputStringContains) *NullableInputStringContains {
	return &NullableInputStringContains{value: val, isSet: true}
}

func (v NullableInputStringContains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputStringContains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


