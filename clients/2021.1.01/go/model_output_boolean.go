/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputBoolean struct for OutputBoolean
type OutputBoolean struct {
	// Result
	Result *bool `json:"result,omitempty"`
}

// NewOutputBoolean instantiates a new OutputBoolean object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputBoolean() *OutputBoolean {
	this := OutputBoolean{}
	return &this
}

// NewOutputBooleanWithDefaults instantiates a new OutputBoolean object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputBooleanWithDefaults() *OutputBoolean {
	this := OutputBoolean{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *OutputBoolean) GetResult() bool {
	if o == nil || o.Result == nil {
		var ret bool
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputBoolean) GetResultOk() (*bool, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *OutputBoolean) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given bool and assigns it to the Result field.
func (o *OutputBoolean) SetResult(v bool) {
	o.Result = &v
}

func (o OutputBoolean) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableOutputBoolean struct {
	value *OutputBoolean
	isSet bool
}

func (v NullableOutputBoolean) Get() *OutputBoolean {
	return v.value
}

func (v *NullableOutputBoolean) Set(val *OutputBoolean) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputBoolean) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputBoolean) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputBoolean(val *OutputBoolean) *NullableOutputBoolean {
	return &NullableOutputBoolean{value: val, isSet: true}
}

func (v NullableOutputBoolean) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputBoolean) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


