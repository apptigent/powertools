/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputDateTimeDifference struct for InputDateTimeDifference
type InputDateTimeDifference struct {
	// First date/time value
	DateTime1 string `json:"dateTime1"`
	// Second date/time value
	DateTime2 string `json:"dateTime2"`
}

// NewInputDateTimeDifference instantiates a new InputDateTimeDifference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDateTimeDifference(dateTime1 string, dateTime2 string, ) *InputDateTimeDifference {
	this := InputDateTimeDifference{}
	this.DateTime1 = dateTime1
	this.DateTime2 = dateTime2
	return &this
}

// NewInputDateTimeDifferenceWithDefaults instantiates a new InputDateTimeDifference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDateTimeDifferenceWithDefaults() *InputDateTimeDifference {
	this := InputDateTimeDifference{}
	return &this
}

// GetDateTime1 returns the DateTime1 field value
func (o *InputDateTimeDifference) GetDateTime1() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DateTime1
}

// GetDateTime1Ok returns a tuple with the DateTime1 field value
// and a boolean to check if the value has been set.
func (o *InputDateTimeDifference) GetDateTime1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateTime1, true
}

// SetDateTime1 sets field value
func (o *InputDateTimeDifference) SetDateTime1(v string) {
	o.DateTime1 = v
}

// GetDateTime2 returns the DateTime2 field value
func (o *InputDateTimeDifference) GetDateTime2() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DateTime2
}

// GetDateTime2Ok returns a tuple with the DateTime2 field value
// and a boolean to check if the value has been set.
func (o *InputDateTimeDifference) GetDateTime2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateTime2, true
}

// SetDateTime2 sets field value
func (o *InputDateTimeDifference) SetDateTime2(v string) {
	o.DateTime2 = v
}

func (o InputDateTimeDifference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dateTime1"] = o.DateTime1
	}
	if true {
		toSerialize["dateTime2"] = o.DateTime2
	}
	return json.Marshal(toSerialize)
}

type NullableInputDateTimeDifference struct {
	value *InputDateTimeDifference
	isSet bool
}

func (v NullableInputDateTimeDifference) Get() *InputDateTimeDifference {
	return v.value
}

func (v *NullableInputDateTimeDifference) Set(val *InputDateTimeDifference) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDateTimeDifference) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDateTimeDifference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDateTimeDifference(val *InputDateTimeDifference) *NullableInputDateTimeDifference {
	return &NullableInputDateTimeDifference{value: val, isSet: true}
}

func (v NullableInputDateTimeDifference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDateTimeDifference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


