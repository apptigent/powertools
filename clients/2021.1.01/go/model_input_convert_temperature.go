/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputConvertTemperature struct for InputConvertTemperature
type InputConvertTemperature struct {
	Input float32 `json:"input"`
	Source string `json:"source"`
	Target string `json:"target"`
}

// NewInputConvertTemperature instantiates a new InputConvertTemperature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputConvertTemperature(input float32, source string, target string, ) *InputConvertTemperature {
	this := InputConvertTemperature{}
	this.Input = input
	this.Source = source
	this.Target = target
	return &this
}

// NewInputConvertTemperatureWithDefaults instantiates a new InputConvertTemperature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputConvertTemperatureWithDefaults() *InputConvertTemperature {
	this := InputConvertTemperature{}
	return &this
}

// GetInput returns the Input field value
func (o *InputConvertTemperature) GetInput() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputConvertTemperature) GetInputOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputConvertTemperature) SetInput(v float32) {
	o.Input = v
}

// GetSource returns the Source field value
func (o *InputConvertTemperature) GetSource() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *InputConvertTemperature) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *InputConvertTemperature) SetSource(v string) {
	o.Source = v
}

// GetTarget returns the Target field value
func (o *InputConvertTemperature) GetTarget() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *InputConvertTemperature) GetTargetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *InputConvertTemperature) SetTarget(v string) {
	o.Target = v
}

func (o InputConvertTemperature) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableInputConvertTemperature struct {
	value *InputConvertTemperature
	isSet bool
}

func (v NullableInputConvertTemperature) Get() *InputConvertTemperature {
	return v.value
}

func (v *NullableInputConvertTemperature) Set(val *InputConvertTemperature) {
	v.value = val
	v.isSet = true
}

func (v NullableInputConvertTemperature) IsSet() bool {
	return v.isSet
}

func (v *NullableInputConvertTemperature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputConvertTemperature(val *InputConvertTemperature) *NullableInputConvertTemperature {
	return &NullableInputConvertTemperature{value: val, isSet: true}
}

func (v NullableInputConvertTemperature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputConvertTemperature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


