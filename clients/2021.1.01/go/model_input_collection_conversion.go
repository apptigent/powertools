/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputCollectionConversion struct for InputCollectionConversion
type InputCollectionConversion struct {
	// Collection containing strings to convert
	Input []string `json:"input"`
	// Collection name
	Name string `json:"name"`
}

// NewInputCollectionConversion instantiates a new InputCollectionConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputCollectionConversion(input []string, name string, ) *InputCollectionConversion {
	this := InputCollectionConversion{}
	this.Input = input
	this.Name = name
	return &this
}

// NewInputCollectionConversionWithDefaults instantiates a new InputCollectionConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputCollectionConversionWithDefaults() *InputCollectionConversion {
	this := InputCollectionConversion{}
	return &this
}

// GetInput returns the Input field value
func (o *InputCollectionConversion) GetInput() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputCollectionConversion) GetInputOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputCollectionConversion) SetInput(v []string) {
	o.Input = v
}

// GetName returns the Name field value
func (o *InputCollectionConversion) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InputCollectionConversion) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InputCollectionConversion) SetName(v string) {
	o.Name = v
}

func (o InputCollectionConversion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableInputCollectionConversion struct {
	value *InputCollectionConversion
	isSet bool
}

func (v NullableInputCollectionConversion) Get() *InputCollectionConversion {
	return v.value
}

func (v *NullableInputCollectionConversion) Set(val *InputCollectionConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableInputCollectionConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableInputCollectionConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputCollectionConversion(val *InputCollectionConversion) *NullableInputCollectionConversion {
	return &NullableInputCollectionConversion{value: val, isSet: true}
}

func (v NullableInputCollectionConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputCollectionConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


