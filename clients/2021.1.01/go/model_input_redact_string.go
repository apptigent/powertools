/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputRedactString struct for InputRedactString
type InputRedactString struct {
	// String containing the complete text
	Source string `json:"source"`
	// Individual string to redact
	Value *string `json:"value,omitempty"`
	// Collection of strings to redact
	Values *[]string `json:"values,omitempty"`
	// Regular expression pattern for matching strings
	Regex *string `json:"regex,omitempty"`
}

// NewInputRedactString instantiates a new InputRedactString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputRedactString(source string, ) *InputRedactString {
	this := InputRedactString{}
	this.Source = source
	return &this
}

// NewInputRedactStringWithDefaults instantiates a new InputRedactString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputRedactStringWithDefaults() *InputRedactString {
	this := InputRedactString{}
	return &this
}

// GetSource returns the Source field value
func (o *InputRedactString) GetSource() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *InputRedactString) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *InputRedactString) SetSource(v string) {
	o.Source = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InputRedactString) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputRedactString) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *InputRedactString) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *InputRedactString) SetValue(v string) {
	o.Value = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *InputRedactString) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputRedactString) GetValuesOk() (*[]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *InputRedactString) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *InputRedactString) SetValues(v []string) {
	o.Values = &v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *InputRedactString) GetRegex() string {
	if o == nil || o.Regex == nil {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputRedactString) GetRegexOk() (*string, bool) {
	if o == nil || o.Regex == nil {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *InputRedactString) HasRegex() bool {
	if o != nil && o.Regex != nil {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *InputRedactString) SetRegex(v string) {
	o.Regex = &v
}

func (o InputRedactString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Regex != nil {
		toSerialize["regex"] = o.Regex
	}
	return json.Marshal(toSerialize)
}

type NullableInputRedactString struct {
	value *InputRedactString
	isSet bool
}

func (v NullableInputRedactString) Get() *InputRedactString {
	return v.value
}

func (v *NullableInputRedactString) Set(val *InputRedactString) {
	v.value = val
	v.isSet = true
}

func (v NullableInputRedactString) IsSet() bool {
	return v.isSet
}

func (v *NullableInputRedactString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputRedactString(val *InputRedactString) *NullableInputRedactString {
	return &NullableInputRedactString{value: val, isSet: true}
}

func (v NullableInputRedactString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputRedactString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


