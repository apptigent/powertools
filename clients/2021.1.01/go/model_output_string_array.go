/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputStringArray struct for OutputStringArray
type OutputStringArray struct {
	// data
	Data *[]string `json:"data,omitempty"`
}

// NewOutputStringArray instantiates a new OutputStringArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputStringArray() *OutputStringArray {
	this := OutputStringArray{}
	return &this
}

// NewOutputStringArrayWithDefaults instantiates a new OutputStringArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputStringArrayWithDefaults() *OutputStringArray {
	this := OutputStringArray{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *OutputStringArray) GetData() []string {
	if o == nil || o.Data == nil {
		var ret []string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputStringArray) GetDataOk() (*[]string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *OutputStringArray) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []string and assigns it to the Data field.
func (o *OutputStringArray) SetData(v []string) {
	o.Data = &v
}

func (o OutputStringArray) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableOutputStringArray struct {
	value *OutputStringArray
	isSet bool
}

func (v NullableOutputStringArray) Get() *OutputStringArray {
	return v.value
}

func (v *NullableOutputStringArray) Set(val *OutputStringArray) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputStringArray) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputStringArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputStringArray(val *OutputStringArray) *NullableOutputStringArray {
	return &NullableOutputStringArray{value: val, isSet: true}
}

func (v NullableOutputStringArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputStringArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


