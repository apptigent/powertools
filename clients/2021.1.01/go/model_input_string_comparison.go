/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputStringComparison struct for InputStringComparison
type InputStringComparison struct {
	// Original string
	Input string `json:"input"`
	// Comparison string
	Compare string `json:"compare"`
	// Convert strings to lowercase before comparison
	Lower string `json:"lower"`
	// Trim strings before comparison
	Trim string `json:"trim"`
}

// NewInputStringComparison instantiates a new InputStringComparison object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputStringComparison(input string, compare string, lower string, trim string, ) *InputStringComparison {
	this := InputStringComparison{}
	this.Input = input
	this.Compare = compare
	this.Lower = lower
	this.Trim = trim
	return &this
}

// NewInputStringComparisonWithDefaults instantiates a new InputStringComparison object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputStringComparisonWithDefaults() *InputStringComparison {
	this := InputStringComparison{}
	return &this
}

// GetInput returns the Input field value
func (o *InputStringComparison) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputStringComparison) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputStringComparison) SetInput(v string) {
	o.Input = v
}

// GetCompare returns the Compare field value
func (o *InputStringComparison) GetCompare() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Compare
}

// GetCompareOk returns a tuple with the Compare field value
// and a boolean to check if the value has been set.
func (o *InputStringComparison) GetCompareOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Compare, true
}

// SetCompare sets field value
func (o *InputStringComparison) SetCompare(v string) {
	o.Compare = v
}

// GetLower returns the Lower field value
func (o *InputStringComparison) GetLower() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Lower
}

// GetLowerOk returns a tuple with the Lower field value
// and a boolean to check if the value has been set.
func (o *InputStringComparison) GetLowerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lower, true
}

// SetLower sets field value
func (o *InputStringComparison) SetLower(v string) {
	o.Lower = v
}

// GetTrim returns the Trim field value
func (o *InputStringComparison) GetTrim() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Trim
}

// GetTrimOk returns a tuple with the Trim field value
// and a boolean to check if the value has been set.
func (o *InputStringComparison) GetTrimOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Trim, true
}

// SetTrim sets field value
func (o *InputStringComparison) SetTrim(v string) {
	o.Trim = v
}

func (o InputStringComparison) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["compare"] = o.Compare
	}
	if true {
		toSerialize["lower"] = o.Lower
	}
	if true {
		toSerialize["trim"] = o.Trim
	}
	return json.Marshal(toSerialize)
}

type NullableInputStringComparison struct {
	value *InputStringComparison
	isSet bool
}

func (v NullableInputStringComparison) Get() *InputStringComparison {
	return v.value
}

func (v *NullableInputStringComparison) Set(val *InputStringComparison) {
	v.value = val
	v.isSet = true
}

func (v NullableInputStringComparison) IsSet() bool {
	return v.isSet
}

func (v *NullableInputStringComparison) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputStringComparison(val *InputStringComparison) *NullableInputStringComparison {
	return &NullableInputStringComparison{value: val, isSet: true}
}

func (v NullableInputStringComparison) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputStringComparison) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


