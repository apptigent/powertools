/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputDateTimeFormat struct for InputDateTimeFormat
type InputDateTimeFormat struct {
	// Source date and time
	Input string `json:"input"`
	// Language culture
	Culture string `json:"culture"`
	// Output format
	Format string `json:"format"`
}

// NewInputDateTimeFormat instantiates a new InputDateTimeFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputDateTimeFormat(input string, culture string, format string, ) *InputDateTimeFormat {
	this := InputDateTimeFormat{}
	this.Input = input
	this.Culture = culture
	this.Format = format
	return &this
}

// NewInputDateTimeFormatWithDefaults instantiates a new InputDateTimeFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputDateTimeFormatWithDefaults() *InputDateTimeFormat {
	this := InputDateTimeFormat{}
	var culture string = "en-US"
	this.Culture = culture
	return &this
}

// GetInput returns the Input field value
func (o *InputDateTimeFormat) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputDateTimeFormat) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputDateTimeFormat) SetInput(v string) {
	o.Input = v
}

// GetCulture returns the Culture field value
func (o *InputDateTimeFormat) GetCulture() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Culture
}

// GetCultureOk returns a tuple with the Culture field value
// and a boolean to check if the value has been set.
func (o *InputDateTimeFormat) GetCultureOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Culture, true
}

// SetCulture sets field value
func (o *InputDateTimeFormat) SetCulture(v string) {
	o.Culture = v
}

// GetFormat returns the Format field value
func (o *InputDateTimeFormat) GetFormat() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *InputDateTimeFormat) GetFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *InputDateTimeFormat) SetFormat(v string) {
	o.Format = v
}

func (o InputDateTimeFormat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["culture"] = o.Culture
	}
	if true {
		toSerialize["format"] = o.Format
	}
	return json.Marshal(toSerialize)
}

type NullableInputDateTimeFormat struct {
	value *InputDateTimeFormat
	isSet bool
}

func (v NullableInputDateTimeFormat) Get() *InputDateTimeFormat {
	return v.value
}

func (v *NullableInputDateTimeFormat) Set(val *InputDateTimeFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableInputDateTimeFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableInputDateTimeFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputDateTimeFormat(val *InputDateTimeFormat) *NullableInputDateTimeFormat {
	return &NullableInputDateTimeFormat{value: val, isSet: true}
}

func (v NullableInputDateTimeFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputDateTimeFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


