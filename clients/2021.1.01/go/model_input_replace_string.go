/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputReplaceString struct for InputReplaceString
type InputReplaceString struct {
	// String containing the text to be replaced
	Source string `json:"source"`
	// Text to replace
	Value string `json:"value"`
	// Replacement text
	Replacement string `json:"replacement"`
}

// NewInputReplaceString instantiates a new InputReplaceString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputReplaceString(source string, value string, replacement string, ) *InputReplaceString {
	this := InputReplaceString{}
	this.Source = source
	this.Value = value
	this.Replacement = replacement
	return &this
}

// NewInputReplaceStringWithDefaults instantiates a new InputReplaceString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputReplaceStringWithDefaults() *InputReplaceString {
	this := InputReplaceString{}
	return &this
}

// GetSource returns the Source field value
func (o *InputReplaceString) GetSource() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *InputReplaceString) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *InputReplaceString) SetSource(v string) {
	o.Source = v
}

// GetValue returns the Value field value
func (o *InputReplaceString) GetValue() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *InputReplaceString) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *InputReplaceString) SetValue(v string) {
	o.Value = v
}

// GetReplacement returns the Replacement field value
func (o *InputReplaceString) GetReplacement() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value
// and a boolean to check if the value has been set.
func (o *InputReplaceString) GetReplacementOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Replacement, true
}

// SetReplacement sets field value
func (o *InputReplaceString) SetReplacement(v string) {
	o.Replacement = v
}

func (o InputReplaceString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["replacement"] = o.Replacement
	}
	return json.Marshal(toSerialize)
}

type NullableInputReplaceString struct {
	value *InputReplaceString
	isSet bool
}

func (v NullableInputReplaceString) Get() *InputReplaceString {
	return v.value
}

func (v *NullableInputReplaceString) Set(val *InputReplaceString) {
	v.value = val
	v.isSet = true
}

func (v NullableInputReplaceString) IsSet() bool {
	return v.isSet
}

func (v *NullableInputReplaceString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputReplaceString(val *InputReplaceString) *NullableInputReplaceString {
	return &NullableInputReplaceString{value: val, isSet: true}
}

func (v NullableInputReplaceString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputReplaceString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


