/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputDateInfo struct for OutputDateInfo
type OutputDateInfo struct {
	// DayOfYear
	DayOfYear *float32 `json:"DayOfYear,omitempty"`
	// DayOfWeek
	DayOfWeek *float32 `json:"DayOfWeek,omitempty"`
	// WeekOfYear
	WeekOfYear *float32 `json:"WeekOfYear,omitempty"`
	// SecondsInDay
	SecondsInDay *float32 `json:"SecondsInDay,omitempty"`
	// MinutesInDay
	MinutesInDay *float32 `json:"MinutesInDay,omitempty"`
	// Ticks
	Ticks *float32 `json:"Ticks,omitempty"`
}

// NewOutputDateInfo instantiates a new OutputDateInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputDateInfo() *OutputDateInfo {
	this := OutputDateInfo{}
	return &this
}

// NewOutputDateInfoWithDefaults instantiates a new OutputDateInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputDateInfoWithDefaults() *OutputDateInfo {
	this := OutputDateInfo{}
	return &this
}

// GetDayOfYear returns the DayOfYear field value if set, zero value otherwise.
func (o *OutputDateInfo) GetDayOfYear() float32 {
	if o == nil || o.DayOfYear == nil {
		var ret float32
		return ret
	}
	return *o.DayOfYear
}

// GetDayOfYearOk returns a tuple with the DayOfYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputDateInfo) GetDayOfYearOk() (*float32, bool) {
	if o == nil || o.DayOfYear == nil {
		return nil, false
	}
	return o.DayOfYear, true
}

// HasDayOfYear returns a boolean if a field has been set.
func (o *OutputDateInfo) HasDayOfYear() bool {
	if o != nil && o.DayOfYear != nil {
		return true
	}

	return false
}

// SetDayOfYear gets a reference to the given float32 and assigns it to the DayOfYear field.
func (o *OutputDateInfo) SetDayOfYear(v float32) {
	o.DayOfYear = &v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *OutputDateInfo) GetDayOfWeek() float32 {
	if o == nil || o.DayOfWeek == nil {
		var ret float32
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputDateInfo) GetDayOfWeekOk() (*float32, bool) {
	if o == nil || o.DayOfWeek == nil {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *OutputDateInfo) HasDayOfWeek() bool {
	if o != nil && o.DayOfWeek != nil {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given float32 and assigns it to the DayOfWeek field.
func (o *OutputDateInfo) SetDayOfWeek(v float32) {
	o.DayOfWeek = &v
}

// GetWeekOfYear returns the WeekOfYear field value if set, zero value otherwise.
func (o *OutputDateInfo) GetWeekOfYear() float32 {
	if o == nil || o.WeekOfYear == nil {
		var ret float32
		return ret
	}
	return *o.WeekOfYear
}

// GetWeekOfYearOk returns a tuple with the WeekOfYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputDateInfo) GetWeekOfYearOk() (*float32, bool) {
	if o == nil || o.WeekOfYear == nil {
		return nil, false
	}
	return o.WeekOfYear, true
}

// HasWeekOfYear returns a boolean if a field has been set.
func (o *OutputDateInfo) HasWeekOfYear() bool {
	if o != nil && o.WeekOfYear != nil {
		return true
	}

	return false
}

// SetWeekOfYear gets a reference to the given float32 and assigns it to the WeekOfYear field.
func (o *OutputDateInfo) SetWeekOfYear(v float32) {
	o.WeekOfYear = &v
}

// GetSecondsInDay returns the SecondsInDay field value if set, zero value otherwise.
func (o *OutputDateInfo) GetSecondsInDay() float32 {
	if o == nil || o.SecondsInDay == nil {
		var ret float32
		return ret
	}
	return *o.SecondsInDay
}

// GetSecondsInDayOk returns a tuple with the SecondsInDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputDateInfo) GetSecondsInDayOk() (*float32, bool) {
	if o == nil || o.SecondsInDay == nil {
		return nil, false
	}
	return o.SecondsInDay, true
}

// HasSecondsInDay returns a boolean if a field has been set.
func (o *OutputDateInfo) HasSecondsInDay() bool {
	if o != nil && o.SecondsInDay != nil {
		return true
	}

	return false
}

// SetSecondsInDay gets a reference to the given float32 and assigns it to the SecondsInDay field.
func (o *OutputDateInfo) SetSecondsInDay(v float32) {
	o.SecondsInDay = &v
}

// GetMinutesInDay returns the MinutesInDay field value if set, zero value otherwise.
func (o *OutputDateInfo) GetMinutesInDay() float32 {
	if o == nil || o.MinutesInDay == nil {
		var ret float32
		return ret
	}
	return *o.MinutesInDay
}

// GetMinutesInDayOk returns a tuple with the MinutesInDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputDateInfo) GetMinutesInDayOk() (*float32, bool) {
	if o == nil || o.MinutesInDay == nil {
		return nil, false
	}
	return o.MinutesInDay, true
}

// HasMinutesInDay returns a boolean if a field has been set.
func (o *OutputDateInfo) HasMinutesInDay() bool {
	if o != nil && o.MinutesInDay != nil {
		return true
	}

	return false
}

// SetMinutesInDay gets a reference to the given float32 and assigns it to the MinutesInDay field.
func (o *OutputDateInfo) SetMinutesInDay(v float32) {
	o.MinutesInDay = &v
}

// GetTicks returns the Ticks field value if set, zero value otherwise.
func (o *OutputDateInfo) GetTicks() float32 {
	if o == nil || o.Ticks == nil {
		var ret float32
		return ret
	}
	return *o.Ticks
}

// GetTicksOk returns a tuple with the Ticks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputDateInfo) GetTicksOk() (*float32, bool) {
	if o == nil || o.Ticks == nil {
		return nil, false
	}
	return o.Ticks, true
}

// HasTicks returns a boolean if a field has been set.
func (o *OutputDateInfo) HasTicks() bool {
	if o != nil && o.Ticks != nil {
		return true
	}

	return false
}

// SetTicks gets a reference to the given float32 and assigns it to the Ticks field.
func (o *OutputDateInfo) SetTicks(v float32) {
	o.Ticks = &v
}

func (o OutputDateInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfYear != nil {
		toSerialize["DayOfYear"] = o.DayOfYear
	}
	if o.DayOfWeek != nil {
		toSerialize["DayOfWeek"] = o.DayOfWeek
	}
	if o.WeekOfYear != nil {
		toSerialize["WeekOfYear"] = o.WeekOfYear
	}
	if o.SecondsInDay != nil {
		toSerialize["SecondsInDay"] = o.SecondsInDay
	}
	if o.MinutesInDay != nil {
		toSerialize["MinutesInDay"] = o.MinutesInDay
	}
	if o.Ticks != nil {
		toSerialize["Ticks"] = o.Ticks
	}
	return json.Marshal(toSerialize)
}

type NullableOutputDateInfo struct {
	value *OutputDateInfo
	isSet bool
}

func (v NullableOutputDateInfo) Get() *OutputDateInfo {
	return v.value
}

func (v *NullableOutputDateInfo) Set(val *OutputDateInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputDateInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputDateInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputDateInfo(val *OutputDateInfo) *NullableOutputDateInfo {
	return &NullableOutputDateInfo{value: val, isSet: true}
}

func (v NullableOutputDateInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputDateInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


