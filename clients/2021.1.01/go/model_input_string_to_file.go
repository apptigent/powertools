/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputStringToFile struct for InputStringToFile
type InputStringToFile struct {
	// Text string (body of file)
	Input string `json:"input"`
	// File extension
	Extension string `json:"extension"`
	// Name of file (without extension)
	Filename string `json:"filename"`
}

// NewInputStringToFile instantiates a new InputStringToFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputStringToFile(input string, extension string, filename string, ) *InputStringToFile {
	this := InputStringToFile{}
	this.Input = input
	this.Extension = extension
	this.Filename = filename
	return &this
}

// NewInputStringToFileWithDefaults instantiates a new InputStringToFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputStringToFileWithDefaults() *InputStringToFile {
	this := InputStringToFile{}
	var extension string = "TXT"
	this.Extension = extension
	return &this
}

// GetInput returns the Input field value
func (o *InputStringToFile) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputStringToFile) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputStringToFile) SetInput(v string) {
	o.Input = v
}

// GetExtension returns the Extension field value
func (o *InputStringToFile) GetExtension() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value
// and a boolean to check if the value has been set.
func (o *InputStringToFile) GetExtensionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Extension, true
}

// SetExtension sets field value
func (o *InputStringToFile) SetExtension(v string) {
	o.Extension = v
}

// GetFilename returns the Filename field value
func (o *InputStringToFile) GetFilename() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *InputStringToFile) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *InputStringToFile) SetFilename(v string) {
	o.Filename = v
}

func (o InputStringToFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["extension"] = o.Extension
	}
	if true {
		toSerialize["filename"] = o.Filename
	}
	return json.Marshal(toSerialize)
}

type NullableInputStringToFile struct {
	value *InputStringToFile
	isSet bool
}

func (v NullableInputStringToFile) Get() *InputStringToFile {
	return v.value
}

func (v *NullableInputStringToFile) Set(val *InputStringToFile) {
	v.value = val
	v.isSet = true
}

func (v NullableInputStringToFile) IsSet() bool {
	return v.isSet
}

func (v *NullableInputStringToFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputStringToFile(val *InputStringToFile) *NullableInputStringToFile {
	return &NullableInputStringToFile{value: val, isSet: true}
}

func (v NullableInputStringToFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputStringToFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


