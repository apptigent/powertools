/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InputJsonConversionHTML struct for InputJsonConversionHTML
type InputJsonConversionHTML struct {
	// JSON array object
	Input string `json:"input"`
	// Include header row
	Header bool `json:"header"`
	// Alternate header row markup
	Alternate *string `json:"alternate,omitempty"`
	// Optional table attributes (single quoted values)
	Attributes *string `json:"attributes,omitempty"`
	// Columns to omit (comma separated)
	Omit *string `json:"omit,omitempty"`
	// Column order (comma separated)
	Order *string `json:"order,omitempty"`
}

// NewInputJsonConversionHTML instantiates a new InputJsonConversionHTML object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputJsonConversionHTML(input string, header bool, ) *InputJsonConversionHTML {
	this := InputJsonConversionHTML{}
	this.Input = input
	this.Header = header
	return &this
}

// NewInputJsonConversionHTMLWithDefaults instantiates a new InputJsonConversionHTML object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputJsonConversionHTMLWithDefaults() *InputJsonConversionHTML {
	this := InputJsonConversionHTML{}
	var header bool = true
	this.Header = header
	return &this
}

// GetInput returns the Input field value
func (o *InputJsonConversionHTML) GetInput() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *InputJsonConversionHTML) GetInputOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *InputJsonConversionHTML) SetInput(v string) {
	o.Input = v
}

// GetHeader returns the Header field value
func (o *InputJsonConversionHTML) GetHeader() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value
// and a boolean to check if the value has been set.
func (o *InputJsonConversionHTML) GetHeaderOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Header, true
}

// SetHeader sets field value
func (o *InputJsonConversionHTML) SetHeader(v bool) {
	o.Header = v
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *InputJsonConversionHTML) GetAlternate() string {
	if o == nil || o.Alternate == nil {
		var ret string
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputJsonConversionHTML) GetAlternateOk() (*string, bool) {
	if o == nil || o.Alternate == nil {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *InputJsonConversionHTML) HasAlternate() bool {
	if o != nil && o.Alternate != nil {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given string and assigns it to the Alternate field.
func (o *InputJsonConversionHTML) SetAlternate(v string) {
	o.Alternate = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *InputJsonConversionHTML) GetAttributes() string {
	if o == nil || o.Attributes == nil {
		var ret string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputJsonConversionHTML) GetAttributesOk() (*string, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *InputJsonConversionHTML) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given string and assigns it to the Attributes field.
func (o *InputJsonConversionHTML) SetAttributes(v string) {
	o.Attributes = &v
}

// GetOmit returns the Omit field value if set, zero value otherwise.
func (o *InputJsonConversionHTML) GetOmit() string {
	if o == nil || o.Omit == nil {
		var ret string
		return ret
	}
	return *o.Omit
}

// GetOmitOk returns a tuple with the Omit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputJsonConversionHTML) GetOmitOk() (*string, bool) {
	if o == nil || o.Omit == nil {
		return nil, false
	}
	return o.Omit, true
}

// HasOmit returns a boolean if a field has been set.
func (o *InputJsonConversionHTML) HasOmit() bool {
	if o != nil && o.Omit != nil {
		return true
	}

	return false
}

// SetOmit gets a reference to the given string and assigns it to the Omit field.
func (o *InputJsonConversionHTML) SetOmit(v string) {
	o.Omit = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *InputJsonConversionHTML) GetOrder() string {
	if o == nil || o.Order == nil {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputJsonConversionHTML) GetOrderOk() (*string, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *InputJsonConversionHTML) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *InputJsonConversionHTML) SetOrder(v string) {
	o.Order = &v
}

func (o InputJsonConversionHTML) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["input"] = o.Input
	}
	if true {
		toSerialize["header"] = o.Header
	}
	if o.Alternate != nil {
		toSerialize["alternate"] = o.Alternate
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Omit != nil {
		toSerialize["omit"] = o.Omit
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableInputJsonConversionHTML struct {
	value *InputJsonConversionHTML
	isSet bool
}

func (v NullableInputJsonConversionHTML) Get() *InputJsonConversionHTML {
	return v.value
}

func (v *NullableInputJsonConversionHTML) Set(val *InputJsonConversionHTML) {
	v.value = val
	v.isSet = true
}

func (v NullableInputJsonConversionHTML) IsSet() bool {
	return v.isSet
}

func (v *NullableInputJsonConversionHTML) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputJsonConversionHTML(val *InputJsonConversionHTML) *NullableInputJsonConversionHTML {
	return &NullableInputJsonConversionHTML{value: val, isSet: true}
}

func (v NullableInputJsonConversionHTML) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputJsonConversionHTML) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


