/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * API version: 2021.1.01
 * Contact: support@apptigent.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OutputMultiCollection struct for OutputMultiCollection
type OutputMultiCollection struct {
	// First collection result
	Result1 *[]string `json:"result1,omitempty"`
	// Second collection result
	Result2 *[]string `json:"result2,omitempty"`
}

// NewOutputMultiCollection instantiates a new OutputMultiCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputMultiCollection() *OutputMultiCollection {
	this := OutputMultiCollection{}
	return &this
}

// NewOutputMultiCollectionWithDefaults instantiates a new OutputMultiCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputMultiCollectionWithDefaults() *OutputMultiCollection {
	this := OutputMultiCollection{}
	return &this
}

// GetResult1 returns the Result1 field value if set, zero value otherwise.
func (o *OutputMultiCollection) GetResult1() []string {
	if o == nil || o.Result1 == nil {
		var ret []string
		return ret
	}
	return *o.Result1
}

// GetResult1Ok returns a tuple with the Result1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMultiCollection) GetResult1Ok() (*[]string, bool) {
	if o == nil || o.Result1 == nil {
		return nil, false
	}
	return o.Result1, true
}

// HasResult1 returns a boolean if a field has been set.
func (o *OutputMultiCollection) HasResult1() bool {
	if o != nil && o.Result1 != nil {
		return true
	}

	return false
}

// SetResult1 gets a reference to the given []string and assigns it to the Result1 field.
func (o *OutputMultiCollection) SetResult1(v []string) {
	o.Result1 = &v
}

// GetResult2 returns the Result2 field value if set, zero value otherwise.
func (o *OutputMultiCollection) GetResult2() []string {
	if o == nil || o.Result2 == nil {
		var ret []string
		return ret
	}
	return *o.Result2
}

// GetResult2Ok returns a tuple with the Result2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutputMultiCollection) GetResult2Ok() (*[]string, bool) {
	if o == nil || o.Result2 == nil {
		return nil, false
	}
	return o.Result2, true
}

// HasResult2 returns a boolean if a field has been set.
func (o *OutputMultiCollection) HasResult2() bool {
	if o != nil && o.Result2 != nil {
		return true
	}

	return false
}

// SetResult2 gets a reference to the given []string and assigns it to the Result2 field.
func (o *OutputMultiCollection) SetResult2(v []string) {
	o.Result2 = &v
}

func (o OutputMultiCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result1 != nil {
		toSerialize["result1"] = o.Result1
	}
	if o.Result2 != nil {
		toSerialize["result2"] = o.Result2
	}
	return json.Marshal(toSerialize)
}

type NullableOutputMultiCollection struct {
	value *OutputMultiCollection
	isSet bool
}

func (v NullableOutputMultiCollection) Get() *OutputMultiCollection {
	return v.value
}

func (v *NullableOutputMultiCollection) Set(val *OutputMultiCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputMultiCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputMultiCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputMultiCollection(val *OutputMultiCollection) *NullableOutputMultiCollection {
	return &NullableOutputMultiCollection{value: val, isSet: true}
}

func (v NullableOutputMultiCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputMultiCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


