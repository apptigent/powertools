/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputStockPrices model module.
 * @module model/InputStockPrices
 * @version 2021.1.01
 */
class InputStockPrices {
    /**
     * Constructs a new <code>InputStockPrices</code>.
     * @alias module:model/InputStockPrices
     * @param symbols {String} Stock ticker symbols (comma-separated, max 20)
     */
    constructor(symbols) { 
        
        InputStockPrices.initialize(this, symbols);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, symbols) { 
        obj['symbols'] = symbols;
    }

    /**
     * Constructs a <code>InputStockPrices</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputStockPrices} obj Optional instance to populate.
     * @return {module:model/InputStockPrices} The populated <code>InputStockPrices</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputStockPrices();

            if (data.hasOwnProperty('symbols')) {
                obj['symbols'] = ApiClient.convertToType(data['symbols'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('exchange')) {
                obj['exchange'] = ApiClient.convertToType(data['exchange'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Stock ticker symbols (comma-separated, max 20)
 * @member {String} symbols
 */
InputStockPrices.prototype['symbols'] = undefined;

/**
 * Date (yyyy-MM-dd, leave empty for latest)
 * @member {String} date
 */
InputStockPrices.prototype['date'] = undefined;

/**
 * Stock exchange
 * @member {module:model/InputStockPrices.ExchangeEnum} exchange
 */
InputStockPrices.prototype['exchange'] = undefined;





/**
 * Allowed values for the <code>exchange</code> property.
 * @enum {String}
 * @readonly
 */
InputStockPrices['ExchangeEnum'] = {

    /**
     * value: "XNYS (New York Stock Exchange)"
     * @const
     */
    "XNYS (New York Stock Exchange)": "XNYS (New York Stock Exchange)",

    /**
     * value: "XNAS (NASDAQ Stock Exchange)"
     * @const
     */
    "XNAS (NASDAQ Stock Exchange)": "XNAS (NASDAQ Stock Exchange)",

    /**
     * value: "XBRU (Euronext Brussels)"
     * @const
     */
    "XBRU (Euronext Brussels)": "XBRU (Euronext Brussels)",

    /**
     * value: "XTSE (Toronto Stock Exchange)"
     * @const
     */
    "XTSE (Toronto Stock Exchange)": "XTSE (Toronto Stock Exchange)",

    /**
     * value: "XCNQ (Candadian Securities Exchange)"
     * @const
     */
    "XCNQ (Candadian Securities Exchange)": "XCNQ (Candadian Securities Exchange)",

    /**
     * value: "XSHG (Shanghai Stock Exchange)"
     * @const
     */
    "XSHG (Shanghai Stock Exchange)": "XSHG (Shanghai Stock Exchange)",

    /**
     * value: "XCSE (Copenhagen Stock Exchange)"
     * @const
     */
    "XCSE (Copenhagen Stock Exchange)": "XCSE (Copenhagen Stock Exchange)",

    /**
     * value: "XPAR (Euronext Paris)"
     * @const
     */
    "XPAR (Euronext Paris)": "XPAR (Euronext Paris)",

    /**
     * value: "XFRA (Deutsche Borse)"
     * @const
     */
    "XFRA (Deutsche Borse)": "XFRA (Deutsche Borse)",

    /**
     * value: "XHKG (Hong Kong Stock Exchange)"
     * @const
     */
    "XHKG (Hong Kong Stock Exchange)": "XHKG (Hong Kong Stock Exchange)",

    /**
     * value: "XNSE (National Stock Exchange India)"
     * @const
     */
    "XNSE (National Stock Exchange India)": "XNSE (National Stock Exchange India)",

    /**
     * value: "XTAE (Tel Aviv Stock Exchange)"
     * @const
     */
    "XTAE (Tel Aviv Stock Exchange)": "XTAE (Tel Aviv Stock Exchange)",

    /**
     * value: "XNGO (Nagoya Stock Exchange)"
     * @const
     */
    "XNGO (Nagoya Stock Exchange)": "XNGO (Nagoya Stock Exchange)",

    /**
     * value: "XFKA (Fukuoka Stock Exchange)"
     * @const
     */
    "XFKA (Fukuoka Stock Exchange)": "XFKA (Fukuoka Stock Exchange)",

    /**
     * value: "XSAP (Sapporo Stock Exchange)"
     * @const
     */
    "XSAP (Sapporo Stock Exchange)": "XSAP (Sapporo Stock Exchange)",

    /**
     * value: "XMEX (Mexican Stock Exchange)"
     * @const
     */
    "XMEX (Mexican Stock Exchange)": "XMEX (Mexican Stock Exchange)",

    /**
     * value: "XNZE (New Zealand Stock Exchange)"
     * @const
     */
    "XNZE (New Zealand Stock Exchange)": "XNZE (New Zealand Stock Exchange)",

    /**
     * value: "XLIS (Euronext Lisbon)"
     * @const
     */
    "XLIS (Euronext Lisbon)": "XLIS (Euronext Lisbon)",

    /**
     * value: "MISX (Moscow Stock Exchange)"
     * @const
     */
    "MISX (Moscow Stock Exchange)": "MISX (Moscow Stock Exchange)",

    /**
     * value: "XSES (Singapore Stock Exchange)"
     * @const
     */
    "XSES (Singapore Stock Exchange)": "XSES (Singapore Stock Exchange)",

    /**
     * value: "XLON (London Stock Exchange)"
     * @const
     */
    "XLON (London Stock Exchange)": "XLON (London Stock Exchange)",

    /**
     * value: "XASE (American Stock Exchange)"
     * @const
     */
    "XASE (American Stock Exchange)": "XASE (American Stock Exchange)",

    /**
     * value: "XASX (Australia Stock Exchange)"
     * @const
     */
    "XASX (Australia Stock Exchange)": "XASX (Australia Stock Exchange)",

    /**
     * value: "XDFM (Dubai Financial Market)"
     * @const
     */
    "XDFM (Dubai Financial Market)": "XDFM (Dubai Financial Market)",

    /**
     * value: "XBKK (Stock Exchange of Thailand)"
     * @const
     */
    "XBKK (Stock Exchange of Thailand)": "XBKK (Stock Exchange of Thailand)",

    /**
     * value: "XSWX (SIX Swiss Exchange)"
     * @const
     */
    "XSWX (SIX Swiss Exchange)": "XSWX (SIX Swiss Exchange)",

    /**
     * value: "XSTO (Stockholm Stock Exchange)"
     * @const
     */
    "XSTO (Stockholm Stock Exchange)": "XSTO (Stockholm Stock Exchange)",

    /**
     * value: "BMEX (Bolsas y Mercados Españoles)"
     * @const
     */
    "BMEX (Bolsas y Mercados Españoles)": "BMEX (Bolsas y Mercados Españoles)",

    /**
     * value: "XJSE (Johannesburg Stock Exchange)"
     * @const
     */
    "XJSE (Johannesburg Stock Exchange)": "XJSE (Johannesburg Stock Exchange)"
};



export default InputStockPrices;

