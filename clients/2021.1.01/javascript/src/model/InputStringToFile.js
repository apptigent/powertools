/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputStringToFile model module.
 * @module model/InputStringToFile
 * @version 2021.1.01
 */
class InputStringToFile {
    /**
     * Constructs a new <code>InputStringToFile</code>.
     * @alias module:model/InputStringToFile
     * @param input {String} Text string (body of file)
     * @param extension {module:model/InputStringToFile.ExtensionEnum} File extension
     * @param filename {String} Name of file (without extension)
     */
    constructor(input, extension, filename) { 
        
        InputStringToFile.initialize(this, input, extension, filename);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, input, extension, filename) { 
        obj['input'] = input;
        obj['extension'] = extension || 'TXT';
        obj['filename'] = filename;
    }

    /**
     * Constructs a <code>InputStringToFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputStringToFile} obj Optional instance to populate.
     * @return {module:model/InputStringToFile} The populated <code>InputStringToFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputStringToFile();

            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Text string (body of file)
 * @member {String} input
 */
InputStringToFile.prototype['input'] = undefined;

/**
 * File extension
 * @member {module:model/InputStringToFile.ExtensionEnum} extension
 * @default 'TXT'
 */
InputStringToFile.prototype['extension'] = 'TXT';

/**
 * Name of file (without extension)
 * @member {String} filename
 */
InputStringToFile.prototype['filename'] = undefined;





/**
 * Allowed values for the <code>extension</code> property.
 * @enum {String}
 * @readonly
 */
InputStringToFile['ExtensionEnum'] = {

    /**
     * value: "TXT"
     * @const
     */
    "TXT": "TXT",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "XML"
     * @const
     */
    "XML": "XML",

    /**
     * value: "CSS"
     * @const
     */
    "CSS": "CSS",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON",

    /**
     * value: "JS"
     * @const
     */
    "JS": "JS"
};



export default InputStringToFile;

