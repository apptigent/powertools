/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputCalculateMinMax from '../model/InputCalculateMinMax';
import InputCalculateNumber from '../model/InputCalculateNumber';
import InputCalculateNumbers from '../model/InputCalculateNumbers';
import InputCalculatePower from '../model/InputCalculatePower';
import InputCalculateSeries from '../model/InputCalculateSeries';
import InputConvertAngle from '../model/InputConvertAngle';
import InputConvertArea from '../model/InputConvertArea';
import InputConvertDistance from '../model/InputConvertDistance';
import InputConvertDuration from '../model/InputConvertDuration';
import InputConvertEnergy from '../model/InputConvertEnergy';
import InputConvertPower from '../model/InputConvertPower';
import InputConvertSpeed from '../model/InputConvertSpeed';
import InputConvertTemperature from '../model/InputConvertTemperature';
import InputConvertVolume from '../model/InputConvertVolume';
import InputConvertWeight from '../model/InputConvertWeight';
import InputNumberRange from '../model/InputNumberRange';
import OutputNumber from '../model/OutputNumber';
import OutputString from '../model/OutputString';

/**
* Math service.
* @module api/MathApi
* @version 2021.1.01
*/
export default class MathApi {

    /**
    * Constructs a new MathApi. 
    * @alias module:api/MathApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calculateAbsolute operation.
     * @callback module:api/MathApi~calculateAbsoluteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Absolute
     * Calculate the absolute value of a number
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Number calculation parameters
     * @param {module:api/MathApi~calculateAbsoluteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateAbsolute(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateAbsolute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateAddition operation.
     * @callback module:api/MathApi~calculateAdditionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Addition
     * Calculate the sum of two numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumbers} opts.calculateNumbers Number calculation parameters
     * @param {module:api/MathApi~calculateAdditionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateAddition(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumbers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateAddition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateAverage operation.
     * @callback module:api/MathApi~calculateAverageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate average
     * Calculate the average of two or more numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateSeries} opts.calculateSeries Series calculation parameters
     * @param {module:api/MathApi~calculateAverageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateAverage(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateSeries'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateAverage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateCosine operation.
     * @callback module:api/MathApi~calculateCosineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Cosine
     * Calculate the cosine value of an angle
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Number calculation parameters
     * @param {module:api/MathApi~calculateCosineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateCosine(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateCosine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateDivision operation.
     * @callback module:api/MathApi~calculateDivisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Division
     * Calculate the quotient of two numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumbers} opts.calculateNumbers Number calculation parameters
     * @param {module:api/MathApi~calculateDivisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateDivision(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumbers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateDivision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateLogarithm operation.
     * @callback module:api/MathApi~calculateLogarithmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Logarithm
     * Calculate the logarithm of a number
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Number calculation parameters
     * @param {module:api/MathApi~calculateLogarithmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateLogarithm(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateLogarithm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateMedian operation.
     * @callback module:api/MathApi~calculateMedianCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate median
     * Calculate the median of two or more numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateSeries} opts.calculateSeries Series calculation parameters
     * @param {module:api/MathApi~calculateMedianCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateMedian(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateSeries'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateMedian', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateMinMax operation.
     * @callback module:api/MathApi~calculateMinMaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate minimum or maximum
     * Calculate the minimum or maximum value in a sequence of numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateMinMax} opts.calculateSeries Series calculation parameters
     * @param {module:api/MathApi~calculateMinMaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateMinMax(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateSeries'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateMinMax', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateModulo operation.
     * @callback module:api/MathApi~calculateModuloCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Modulo
     * Calculate the remainder of dividing two numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumbers} opts.calculateNumbers Number calculation parameters
     * @param {module:api/MathApi~calculateModuloCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateModulo(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumbers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateModulo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateMultiplication operation.
     * @callback module:api/MathApi~calculateMultiplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Multiplication
     * Calculate the product of two numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumbers} opts.calculateNumbers Number calculation parameters
     * @param {module:api/MathApi~calculateMultiplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateMultiplication(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumbers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateMultiplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateNthRoot operation.
     * @callback module:api/MathApi~calculateNthRootCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Nth Root
     * Calculate the n-th root of a number
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumbers} opts.calculateNumbers Number calculation parameters
     * @param {module:api/MathApi~calculateNthRootCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateNthRoot(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumbers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateNthRoot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculatePower operation.
     * @callback module:api/MathApi~calculatePowerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate power
     * Raise number to a specified power
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculatePower} opts.calculatePower Power calculation parameters
     * @param {module:api/MathApi~calculatePowerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculatePower(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculatePower'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculatePower', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateSine operation.
     * @callback module:api/MathApi~calculateSineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Sine
     * Calculate the sine value of an angle
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Number calculation parameters
     * @param {module:api/MathApi~calculateSineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateSine(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateSine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateSquareRoot operation.
     * @callback module:api/MathApi~calculateSquareRootCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Square Root
     * Calculate the square root of a number
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Number calculation parameters
     * @param {module:api/MathApi~calculateSquareRootCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateSquareRoot(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateSquareRoot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateSubtraction operation.
     * @callback module:api/MathApi~calculateSubtractionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Subtraction
     * Calculate the difference between two numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumbers} opts.calculateNumbers Number calculation parameters
     * @param {module:api/MathApi~calculateSubtractionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateSubtraction(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumbers'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateSubtraction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateSum operation.
     * @callback module:api/MathApi~calculateSumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate sum
     * Calculate the sum of two or more numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateSeries} opts.calculateSeries Series calculation parameters
     * @param {module:api/MathApi~calculateSumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateSum(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateSeries'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateSum', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateTangent operation.
     * @callback module:api/MathApi~calculateTangentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate Tangent
     * Calculate the tangent value of an angle
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Number calculation parameters
     * @param {module:api/MathApi~calculateTangentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateTangent(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateTangent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateVariance operation.
     * @callback module:api/MathApi~calculateVarianceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate variance
     * Calculate the statistical variance of two or more numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateSeries} opts.calculateSeries Series calculation parameters
     * @param {module:api/MathApi~calculateVarianceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    calculateVariance(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateSeries'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CalculateVariance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertAngle operation.
     * @callback module:api/MathApi~convertAngleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert angle
     * Convert value from one angle measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertAngle} opts.convertAngle 
     * @param {module:api/MathApi~convertAngleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertAngle(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertAngle'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertAngle', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertArea operation.
     * @callback module:api/MathApi~convertAreaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert area
     * Convert value from one area measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertArea} opts.convertArea 
     * @param {module:api/MathApi~convertAreaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertArea(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertArea'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertArea', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertDistance operation.
     * @callback module:api/MathApi~convertDistanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert distance
     * Convert value from one distance measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertDistance} opts.convertDistance 
     * @param {module:api/MathApi~convertDistanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertDistance(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertDistance'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertDistance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertDuration operation.
     * @callback module:api/MathApi~convertDurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert duration
     * Convert value from one duration measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertDuration} opts.convertDuration 
     * @param {module:api/MathApi~convertDurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertDuration(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertDuration'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertDuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertEnergy operation.
     * @callback module:api/MathApi~convertEnergyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert energy
     * Convert value from one energy measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertEnergy} opts.convertEnergy 
     * @param {module:api/MathApi~convertEnergyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertEnergy(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertEnergy'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertEnergy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertPower operation.
     * @callback module:api/MathApi~convertPowerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert power
     * Convert value from one power measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertPower} opts.convertPower 
     * @param {module:api/MathApi~convertPowerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertPower(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertPower'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertPower', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertSpeed operation.
     * @callback module:api/MathApi~convertSpeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert speed
     * Convert value from one speed measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertSpeed} opts.convertSpeed 
     * @param {module:api/MathApi~convertSpeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertSpeed(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertSpeed'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertSpeed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertTemperature operation.
     * @callback module:api/MathApi~convertTemperatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert temperature
     * Convert value from one temperature measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertTemperature} opts.convertTemperature 
     * @param {module:api/MathApi~convertTemperatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertTemperature(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertTemperature'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertTemperature', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertVolume operation.
     * @callback module:api/MathApi~convertVolumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert volume
     * Convert value from one volume measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertVolume} opts.convertVolume 
     * @param {module:api/MathApi~convertVolumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertVolume(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertVolume'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertVolume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the convertWeight operation.
     * @callback module:api/MathApi~convertWeightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Convert weight
     * Convert value from one weight measurement to another
     * @param {Object} opts Optional parameters
     * @param {module:model/InputConvertWeight} opts.convertWeight 
     * @param {module:api/MathApi~convertWeightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    convertWeight(opts, callback) {
      opts = opts || {};
      let postBody = opts['convertWeight'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/ConvertWeight', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the randomNumber operation.
     * @callback module:api/MathApi~randomNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Random number
     * Generate a random number within a specified range
     * @param {Object} opts Optional parameters
     * @param {module:model/InputNumberRange} opts.numberRange 
     * @param {module:api/MathApi~randomNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    randomNumber(opts, callback) {
      opts = opts || {};
      let postBody = opts['numberRange'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/RandomNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roundNumber operation.
     * @callback module:api/MathApi~roundNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Round number
     * Round a numeric value up or down
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateNumber} opts.calculateNumber Numeric calculation parameters
     * @param {module:api/MathApi~roundNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    roundNumber(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateNumber'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/RoundNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the standardDeviation operation.
     * @callback module:api/MathApi~standardDeviationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Math - Calculate standard deviation
     * Calculate the standard deviation of two or more numbers
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCalculateSeries} opts.calculateSeries Series calculation parameters
     * @param {module:api/MathApi~standardDeviationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    standardDeviation(opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateSeries'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/StandardDeviation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
