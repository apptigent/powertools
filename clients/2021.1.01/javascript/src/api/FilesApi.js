/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputQRCode from '../model/InputQRCode';
import OutputString from '../model/OutputString';

/**
* Files service.
* @module api/FilesApi
* @version 2021.1.01
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the convertImage operation.
     * @callback module:api/FilesApi~convertImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Convert Image
     * Convert an image from one format to another
     * @param {module:model/String} format Output file format
     * @param {File} file Source image file
     * @param {module:api/FilesApi~convertImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    convertImage(format, file, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling convertImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling convertImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'format': format,
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['image/png', 'image/gif', 'image/jpeg', 'image/bmp'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ConvertImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cropImage operation.
     * @callback module:api/FilesApi~cropImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Crop Image
     * Crop an image
     * @param {module:model/String} position Crop start position (use negative values to reverse crop area)
     * @param {Number} width Width (X-axis right, negative to reverse)
     * @param {Number} height Height (Y-axis down, negative to reverse)
     * @param {File} file Source image file
     * @param {module:api/FilesApi~cropImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    cropImage(position, width, height, file, callback) {
      let postBody = null;
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling cropImage");
      }
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling cropImage");
      }
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling cropImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling cropImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'position': position,
        'Width': width,
        'Height': height,
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['image/png', 'image/gif', 'image/jpeg', 'image/bmp'];
      let returnType = File;
      return this.apiClient.callApi(
        '/CropImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileToString operation.
     * @callback module:api/FilesApi~fileToStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - File to string
     * Convert a file to a Base64 string
     * @param {File} file Source file (10MB limit)
     * @param {module:api/FilesApi~fileToStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    fileToString(file, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling fileToString");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/FileToString', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flipImage operation.
     * @callback module:api/FilesApi~flipImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Flip Image
     * Flip an image (horizontal or vertical)
     * @param {module:model/String} orientation Horizontal or Vertical
     * @param {File} file Source image file
     * @param {module:api/FilesApi~flipImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    flipImage(orientation, file, callback) {
      let postBody = null;
      // verify the required parameter 'orientation' is set
      if (orientation === undefined || orientation === null) {
        throw new Error("Missing the required parameter 'orientation' when calling flipImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling flipImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'orientation': orientation,
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/FlipImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateQRCode operation.
     * @callback module:api/FilesApi~generateQRCodeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Generate QR code
     * Generate a QR code image
     * @param {Object} opts Optional parameters
     * @param {module:model/InputQRCode} opts.inputQRCode 
     * @param {module:api/FilesApi~generateQRCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    generateQRCode(opts, callback) {
      opts = opts || {};
      let postBody = opts['inputQRCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['image/png'];
      let returnType = File;
      return this.apiClient.callApi(
        '/GenerateQRCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resizeImage operation.
     * @callback module:api/FilesApi~resizeImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Resize Image
     * Resize an image
     * @param {module:model/String} algorithm Optimize output quality of the target image
     * @param {module:model/String} units Image adjustment units
     * @param {File} file Source image file
     * @param {Object} opts Optional parameters
     * @param {Number} opts.height Image height (pixels or percent)
     * @param {Number} opts.width Image width (pixels or percent)
     * @param {module:api/FilesApi~resizeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    resizeImage(algorithm, units, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'algorithm' is set
      if (algorithm === undefined || algorithm === null) {
        throw new Error("Missing the required parameter 'algorithm' when calling resizeImage");
      }
      // verify the required parameter 'units' is set
      if (units === undefined || units === null) {
        throw new Error("Missing the required parameter 'units' when calling resizeImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling resizeImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'algorithm': algorithm,
        'units': units,
        'height': opts['height'],
        'width': opts['width'],
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['image/png', 'image/gif', 'image/jpeg', 'image/bmp'];
      let returnType = File;
      return this.apiClient.callApi(
        '/ResizeImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateImage operation.
     * @callback module:api/FilesApi~rotateImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Rotate Image
     * Rotate an image by specified number of degrees
     * @param {String} degrees Number of degrees
     * @param {File} file Source image file
     * @param {module:api/FilesApi~rotateImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    rotateImage(degrees, file, callback) {
      let postBody = null;
      // verify the required parameter 'degrees' is set
      if (degrees === undefined || degrees === null) {
        throw new Error("Missing the required parameter 'degrees' when calling rotateImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling rotateImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'degrees': degrees,
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/RotateImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the watermarkImage operation.
     * @callback module:api/FilesApi~watermarkImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Files - Watermark Image
     * Add watermark text to an image
     * @param {String} text Watermark text
     * @param {module:model/String} font Text font
     * @param {Number} size Font size (points)
     * @param {String} color Text color hex value
     * @param {module:model/String} horizontal Horizontal alignment
     * @param {module:model/String} vertical Vertical alignment
     * @param {File} file Source image file
     * @param {module:api/FilesApi~watermarkImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    watermarkImage(text, font, size, color, horizontal, vertical, file, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling watermarkImage");
      }
      // verify the required parameter 'font' is set
      if (font === undefined || font === null) {
        throw new Error("Missing the required parameter 'font' when calling watermarkImage");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling watermarkImage");
      }
      // verify the required parameter 'color' is set
      if (color === undefined || color === null) {
        throw new Error("Missing the required parameter 'color' when calling watermarkImage");
      }
      // verify the required parameter 'horizontal' is set
      if (horizontal === undefined || horizontal === null) {
        throw new Error("Missing the required parameter 'horizontal' when calling watermarkImage");
      }
      // verify the required parameter 'vertical' is set
      if (vertical === undefined || vertical === null) {
        throw new Error("Missing the required parameter 'vertical' when calling watermarkImage");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling watermarkImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'text': text,
        'font': font,
        'size': size,
        'color': color,
        'horizontal': horizontal,
        'vertical': vertical,
        'file': file
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = File;
      return this.apiClient.callApi(
        '/WatermarkImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
