/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputCollectionConversion from '../model/InputCollectionConversion';
import InputCollectionConversionXML from '../model/InputCollectionConversionXML';
import InputCollectionCount from '../model/InputCollectionCount';
import InputCollectionFilter from '../model/InputCollectionFilter';
import InputCollectionModify from '../model/InputCollectionModify';
import InputCollectionReplace from '../model/InputCollectionReplace';
import InputCollectionSearch from '../model/InputCollectionSearch';
import InputCollectionSearchNumeric from '../model/InputCollectionSearchNumeric';
import InputCollectionSort from '../model/InputCollectionSort';
import InputCollectionSplit from '../model/InputCollectionSplit';
import OutputCollectionNumber from '../model/OutputCollectionNumber';
import OutputCollectionResult from '../model/OutputCollectionResult';
import OutputCollectionString from '../model/OutputCollectionString';
import OutputMultiCollection from '../model/OutputMultiCollection';
import OutputNumber from '../model/OutputNumber';
import OutputString from '../model/OutputString';

/**
* Collections service.
* @module api/CollectionsApi
* @version 2021.1.01
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToCollection operation.
     * @callback module:api/CollectionsApi~addToCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Add to collection
     * Add an item to a collection
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionModify} opts.collectionModify Collection modification parameters
     * @param {module:api/CollectionsApi~addToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionResult}
     */
    addToCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionModify'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionResult;
      return this.apiClient.callApi(
        '/AddToCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionContainsNumber operation.
     * @callback module:api/CollectionsApi~collectionContainsNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Contains number
     * Determine if a collection contains a specific number
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionSearchNumeric} opts.collectionSearch Collection search parameters
     * @param {module:api/CollectionsApi~collectionContainsNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionNumber}
     */
    collectionContainsNumber(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionNumber;
      return this.apiClient.callApi(
        '/CollectionContainsNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionContainsString operation.
     * @callback module:api/CollectionsApi~collectionContainsStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Contains string
     * Determine if any items in a collection contain a specific string
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionSearch} opts.collectionSearch Collection search parameters
     * @param {module:api/CollectionsApi~collectionContainsStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionString}
     */
    collectionContainsString(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionString;
      return this.apiClient.callApi(
        '/CollectionContainsString', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionEndsWithString operation.
     * @callback module:api/CollectionsApi~collectionEndsWithStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Ends with string
     * Determine if any items in a collection end with a specific string
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionSearch} opts.collectionSearch Collection search parameters
     * @param {module:api/CollectionsApi~collectionEndsWithStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionString}
     */
    collectionEndsWithString(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionString;
      return this.apiClient.callApi(
        '/CollectionEndsWithString', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionStartsWithString operation.
     * @callback module:api/CollectionsApi~collectionStartsWithStringCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Starts with string
     * Determine if any items in a collection start with a specific string
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionSearch} opts.collectionSearch Collection search parameters
     * @param {module:api/CollectionsApi~collectionStartsWithStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionString}
     */
    collectionStartsWithString(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSearch'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionString;
      return this.apiClient.callApi(
        '/CollectionStartsWithString', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionToJSON operation.
     * @callback module:api/CollectionsApi~collectionToJSONCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Collection to JSON
     * Convert a collection to a named JSON object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionConversion} opts.collectionConversion 
     * @param {module:api/CollectionsApi~collectionToJSONCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    collectionToJSON(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionConversion'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/CollectionToJSON', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the collectionToXml operation.
     * @callback module:api/CollectionsApi~collectionToXmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Collection to XML
     * Convert a collection to an XML string
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionConversionXML} opts.collectionConversionXML 
     * @param {module:api/CollectionsApi~collectionToXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    collectionToXml(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionConversionXML'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/CollectionToXML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countCollection operation.
     * @callback module:api/CollectionsApi~countCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Count collection
     * Count a collection of items
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionCount} opts.collectionCount Count collection parameters
     * @param {module:api/CollectionsApi~countCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputNumber}
     */
    countCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionCount'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputNumber;
      return this.apiClient.callApi(
        '/CountCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterCollection operation.
     * @callback module:api/CollectionsApi~filterCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Filter collection
     * Filter a collection of strings by keyword
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionFilter} opts.collectionFilter Filter collection parameters
     * @param {module:api/CollectionsApi~filterCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionResult}
     */
    filterCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionFilter'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionResult;
      return this.apiClient.callApi(
        '/FilterCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFromCollection operation.
     * @callback module:api/CollectionsApi~removeFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Remove from collection
     * Remove an item from a collection
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionModify} opts.collectionModify Collection modification parameters
     * @param {module:api/CollectionsApi~removeFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionResult}
     */
    removeFromCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionModify'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionResult;
      return this.apiClient.callApi(
        '/RemoveFromCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceValuesInCollection operation.
     * @callback module:api/CollectionsApi~replaceValuesInCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Replace values in collection
     * Replace whole or partial strings in a collection
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionReplace} opts.collectionReplace Replace values in collection parameters
     * @param {module:api/CollectionsApi~replaceValuesInCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionResult}
     */
    replaceValuesInCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionReplace'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionResult;
      return this.apiClient.callApi(
        '/ReplaceValuesInCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sortCollection operation.
     * @callback module:api/CollectionsApi~sortCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputCollectionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Sort collection
     * Sort a collection of strings
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionSort} opts.collectionSort Sort collection parameters
     * @param {module:api/CollectionsApi~sortCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputCollectionResult}
     */
    sortCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSort'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputCollectionResult;
      return this.apiClient.callApi(
        '/SortCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the splitCollection operation.
     * @callback module:api/CollectionsApi~splitCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputMultiCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collections - Split collection
     * Split a collection of items by matching value or index
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCollectionSplit} opts.collectionSplit Split collection parameters
     * @param {module:api/CollectionsApi~splitCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputMultiCollection}
     */
    splitCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['collectionSplit'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputMultiCollection;
      return this.apiClient.callApi(
        '/SplitCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
