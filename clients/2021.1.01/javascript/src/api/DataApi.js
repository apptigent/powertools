/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InputCsvConversionJSON from '../model/InputCsvConversionJSON';
import InputDataQuery from '../model/InputDataQuery';
import InputJsonConversionCSV from '../model/InputJsonConversionCSV';
import InputJsonConversionHTML from '../model/InputJsonConversionHTML';
import InputJsonConversionXML from '../model/InputJsonConversionXML';
import InputXmlConversionJSON from '../model/InputXmlConversionJSON';
import OutputString from '../model/OutputString';

/**
* Data service.
* @module api/DataApi
* @version 2021.1.01
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the csvToJson operation.
     * @callback module:api/DataApi~csvToJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - CSV to JSON
     * Convert a CSV string to a JSON array
     * @param {Object} opts Optional parameters
     * @param {module:model/InputCsvConversionJSON} opts.csvConversionJSON 
     * @param {module:api/DataApi~csvToJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    csvToJson(opts, callback) {
      opts = opts || {};
      let postBody = opts['csvConversionJSON'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/CSVtoJSON', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonToCsv operation.
     * @callback module:api/DataApi~jsonToCsvCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - JSON to CSV
     * Convert a JSON array to CSV string
     * @param {Object} opts Optional parameters
     * @param {module:model/InputJsonConversionCSV} opts.jsonConversionCSV 
     * @param {module:api/DataApi~jsonToCsvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    jsonToCsv(opts, callback) {
      opts = opts || {};
      let postBody = opts['jsonConversionCSV'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/JSONtoCSV', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonToHtml operation.
     * @callback module:api/DataApi~jsonToHtmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - JSON to HTML Table
     * Convert a JSON array to an HTML table
     * @param {Object} opts Optional parameters
     * @param {module:model/InputJsonConversionHTML} opts.jsonConversionHTML 
     * @param {module:api/DataApi~jsonToHtmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    jsonToHtml(opts, callback) {
      opts = opts || {};
      let postBody = opts['jsonConversionHTML'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/JSONtoHTML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonToXml operation.
     * @callback module:api/DataApi~jsonToXmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - JSON to XML
     * Convert a JSON object to an XML string
     * @param {Object} opts Optional parameters
     * @param {module:model/InputJsonConversionXML} opts.jsonConversionXML 
     * @param {module:api/DataApi~jsonToXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    jsonToXml(opts, callback) {
      opts = opts || {};
      let postBody = opts['jsonConversionXML'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/JSONtoXML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryJson operation.
     * @callback module:api/DataApi~queryJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - Query JSON
     * Query a JSON object using a JSONPath expression
     * @param {Object} opts Optional parameters
     * @param {module:model/InputDataQuery} opts.inputDataQuery 
     * @param {module:api/DataApi~queryJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    queryJson(opts, callback) {
      opts = opts || {};
      let postBody = opts['inputDataQuery'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/QueryJSON', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryXml operation.
     * @callback module:api/DataApi~queryXmlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - Query XML
     * Query an XML string using an XPath expression
     * @param {Object} opts Optional parameters
     * @param {module:model/InputDataQuery} opts.inputDataQuery 
     * @param {module:api/DataApi~queryXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    queryXml(opts, callback) {
      opts = opts || {};
      let postBody = opts['inputDataQuery'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/QueryXML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the xmlToJson operation.
     * @callback module:api/DataApi~xmlToJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OutputString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Data - XML to JSON
     * Convert an XML string to a JSON object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputXmlConversionJSON} opts.xmlConversionJSON 
     * @param {module:api/DataApi~xmlToJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OutputString}
     */
    xmlToJson(opts, callback) {
      opts = opts || {};
      let postBody = opts['xmlConversionJSON'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OutputString;
      return this.apiClient.callApi(
        '/XMLtoJSON', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
