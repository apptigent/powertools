/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerToolsDeveloper);
  }
}(this, function(expect, PowerToolsDeveloper) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowerToolsDeveloper.CollectionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CollectionsApi', function() {
    describe('addToCollection', function() {
      it('should call addToCollection successfully', function(done) {
        //uncomment below and update the code to test addToCollection
        //instance.addToCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionContainsNumber', function() {
      it('should call collectionContainsNumber successfully', function(done) {
        //uncomment below and update the code to test collectionContainsNumber
        //instance.collectionContainsNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionContainsString', function() {
      it('should call collectionContainsString successfully', function(done) {
        //uncomment below and update the code to test collectionContainsString
        //instance.collectionContainsString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionEndsWithString', function() {
      it('should call collectionEndsWithString successfully', function(done) {
        //uncomment below and update the code to test collectionEndsWithString
        //instance.collectionEndsWithString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionStartsWithString', function() {
      it('should call collectionStartsWithString successfully', function(done) {
        //uncomment below and update the code to test collectionStartsWithString
        //instance.collectionStartsWithString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionToJSON', function() {
      it('should call collectionToJSON successfully', function(done) {
        //uncomment below and update the code to test collectionToJSON
        //instance.collectionToJSON(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('collectionToXml', function() {
      it('should call collectionToXml successfully', function(done) {
        //uncomment below and update the code to test collectionToXml
        //instance.collectionToXml(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('countCollection', function() {
      it('should call countCollection successfully', function(done) {
        //uncomment below and update the code to test countCollection
        //instance.countCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterCollection', function() {
      it('should call filterCollection successfully', function(done) {
        //uncomment below and update the code to test filterCollection
        //instance.filterCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFromCollection', function() {
      it('should call removeFromCollection successfully', function(done) {
        //uncomment below and update the code to test removeFromCollection
        //instance.removeFromCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('replaceValuesInCollection', function() {
      it('should call replaceValuesInCollection successfully', function(done) {
        //uncomment below and update the code to test replaceValuesInCollection
        //instance.replaceValuesInCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sortCollection', function() {
      it('should call sortCollection successfully', function(done) {
        //uncomment below and update the code to test sortCollection
        //instance.sortCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('splitCollection', function() {
      it('should call splitCollection successfully', function(done) {
        //uncomment below and update the code to test splitCollection
        //instance.splitCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
