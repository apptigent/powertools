/**
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PowerToolsDeveloper);
  }
}(this, function(expect, PowerToolsDeveloper) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PowerToolsDeveloper.MathApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MathApi', function() {
    describe('calculateAbsolute', function() {
      it('should call calculateAbsolute successfully', function(done) {
        //uncomment below and update the code to test calculateAbsolute
        //instance.calculateAbsolute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateAddition', function() {
      it('should call calculateAddition successfully', function(done) {
        //uncomment below and update the code to test calculateAddition
        //instance.calculateAddition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateAverage', function() {
      it('should call calculateAverage successfully', function(done) {
        //uncomment below and update the code to test calculateAverage
        //instance.calculateAverage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateCosine', function() {
      it('should call calculateCosine successfully', function(done) {
        //uncomment below and update the code to test calculateCosine
        //instance.calculateCosine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateDivision', function() {
      it('should call calculateDivision successfully', function(done) {
        //uncomment below and update the code to test calculateDivision
        //instance.calculateDivision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateLogarithm', function() {
      it('should call calculateLogarithm successfully', function(done) {
        //uncomment below and update the code to test calculateLogarithm
        //instance.calculateLogarithm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateMedian', function() {
      it('should call calculateMedian successfully', function(done) {
        //uncomment below and update the code to test calculateMedian
        //instance.calculateMedian(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateMinMax', function() {
      it('should call calculateMinMax successfully', function(done) {
        //uncomment below and update the code to test calculateMinMax
        //instance.calculateMinMax(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateModulo', function() {
      it('should call calculateModulo successfully', function(done) {
        //uncomment below and update the code to test calculateModulo
        //instance.calculateModulo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateMultiplication', function() {
      it('should call calculateMultiplication successfully', function(done) {
        //uncomment below and update the code to test calculateMultiplication
        //instance.calculateMultiplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateNthRoot', function() {
      it('should call calculateNthRoot successfully', function(done) {
        //uncomment below and update the code to test calculateNthRoot
        //instance.calculateNthRoot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculatePower', function() {
      it('should call calculatePower successfully', function(done) {
        //uncomment below and update the code to test calculatePower
        //instance.calculatePower(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateSine', function() {
      it('should call calculateSine successfully', function(done) {
        //uncomment below and update the code to test calculateSine
        //instance.calculateSine(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateSquareRoot', function() {
      it('should call calculateSquareRoot successfully', function(done) {
        //uncomment below and update the code to test calculateSquareRoot
        //instance.calculateSquareRoot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateSubtraction', function() {
      it('should call calculateSubtraction successfully', function(done) {
        //uncomment below and update the code to test calculateSubtraction
        //instance.calculateSubtraction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateSum', function() {
      it('should call calculateSum successfully', function(done) {
        //uncomment below and update the code to test calculateSum
        //instance.calculateSum(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateTangent', function() {
      it('should call calculateTangent successfully', function(done) {
        //uncomment below and update the code to test calculateTangent
        //instance.calculateTangent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('calculateVariance', function() {
      it('should call calculateVariance successfully', function(done) {
        //uncomment below and update the code to test calculateVariance
        //instance.calculateVariance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertAngle', function() {
      it('should call convertAngle successfully', function(done) {
        //uncomment below and update the code to test convertAngle
        //instance.convertAngle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertArea', function() {
      it('should call convertArea successfully', function(done) {
        //uncomment below and update the code to test convertArea
        //instance.convertArea(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertDistance', function() {
      it('should call convertDistance successfully', function(done) {
        //uncomment below and update the code to test convertDistance
        //instance.convertDistance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertDuration', function() {
      it('should call convertDuration successfully', function(done) {
        //uncomment below and update the code to test convertDuration
        //instance.convertDuration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertEnergy', function() {
      it('should call convertEnergy successfully', function(done) {
        //uncomment below and update the code to test convertEnergy
        //instance.convertEnergy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertPower', function() {
      it('should call convertPower successfully', function(done) {
        //uncomment below and update the code to test convertPower
        //instance.convertPower(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertSpeed', function() {
      it('should call convertSpeed successfully', function(done) {
        //uncomment below and update the code to test convertSpeed
        //instance.convertSpeed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertTemperature', function() {
      it('should call convertTemperature successfully', function(done) {
        //uncomment below and update the code to test convertTemperature
        //instance.convertTemperature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertVolume', function() {
      it('should call convertVolume successfully', function(done) {
        //uncomment below and update the code to test convertVolume
        //instance.convertVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertWeight', function() {
      it('should call convertWeight successfully', function(done) {
        //uncomment below and update the code to test convertWeight
        //instance.convertWeight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('randomNumber', function() {
      it('should call randomNumber successfully', function(done) {
        //uncomment below and update the code to test randomNumber
        //instance.randomNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('roundNumber', function() {
      it('should call roundNumber successfully', function(done) {
        //uncomment below and update the code to test roundNumber
        //instance.roundNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('standardDeviation', function() {
      it('should call standardDeviation successfully', function(done) {
        //uncomment below and update the code to test standardDeviation
        //instance.standardDeviation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
