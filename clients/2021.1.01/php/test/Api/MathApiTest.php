<?php
/**
 * MathApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * MathApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MathApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for calculateAbsolute
     *
     * Math - Calculate Absolute.
     *
     */
    public function testCalculateAbsolute()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateAddition
     *
     * Math - Calculate Addition.
     *
     */
    public function testCalculateAddition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateAverage
     *
     * Math - Calculate average.
     *
     */
    public function testCalculateAverage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateCosine
     *
     * Math - Calculate Cosine.
     *
     */
    public function testCalculateCosine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateDivision
     *
     * Math - Calculate Division.
     *
     */
    public function testCalculateDivision()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateLogarithm
     *
     * Math - Calculate Logarithm.
     *
     */
    public function testCalculateLogarithm()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateMedian
     *
     * Math - Calculate median.
     *
     */
    public function testCalculateMedian()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateMinMax
     *
     * Math - Calculate minimum or maximum.
     *
     */
    public function testCalculateMinMax()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateModulo
     *
     * Math - Calculate Modulo.
     *
     */
    public function testCalculateModulo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateMultiplication
     *
     * Math - Calculate Multiplication.
     *
     */
    public function testCalculateMultiplication()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateNthRoot
     *
     * Math - Calculate Nth Root.
     *
     */
    public function testCalculateNthRoot()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculatePower
     *
     * Math - Calculate power.
     *
     */
    public function testCalculatePower()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateSine
     *
     * Math - Calculate Sine.
     *
     */
    public function testCalculateSine()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateSquareRoot
     *
     * Math - Calculate Square Root.
     *
     */
    public function testCalculateSquareRoot()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateSubtraction
     *
     * Math - Calculate Subtraction.
     *
     */
    public function testCalculateSubtraction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateSum
     *
     * Math - Calculate sum.
     *
     */
    public function testCalculateSum()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateTangent
     *
     * Math - Calculate Tangent.
     *
     */
    public function testCalculateTangent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for calculateVariance
     *
     * Math - Calculate variance.
     *
     */
    public function testCalculateVariance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertAngle
     *
     * Math - Convert angle.
     *
     */
    public function testConvertAngle()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertArea
     *
     * Math - Convert area.
     *
     */
    public function testConvertArea()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertDistance
     *
     * Math - Convert distance.
     *
     */
    public function testConvertDistance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertDuration
     *
     * Math - Convert duration.
     *
     */
    public function testConvertDuration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertEnergy
     *
     * Math - Convert energy.
     *
     */
    public function testConvertEnergy()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertPower
     *
     * Math - Convert power.
     *
     */
    public function testConvertPower()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertSpeed
     *
     * Math - Convert speed.
     *
     */
    public function testConvertSpeed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertTemperature
     *
     * Math - Convert temperature.
     *
     */
    public function testConvertTemperature()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertVolume
     *
     * Math - Convert volume.
     *
     */
    public function testConvertVolume()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for convertWeight
     *
     * Math - Convert weight.
     *
     */
    public function testConvertWeight()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for randomNumber
     *
     * Math - Random number.
     *
     */
    public function testRandomNumber()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for roundNumber
     *
     * Math - Round number.
     *
     */
    public function testRoundNumber()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for standardDeviation
     *
     * Math - Calculate standard deviation.
     *
     */
    public function testStandardDeviation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
