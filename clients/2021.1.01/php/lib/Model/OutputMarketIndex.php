<?php
/**
 * OutputMarketIndex
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OutputMarketIndex Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OutputMarketIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'outputMarketIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date' => 'string',
        'symbol' => 'string',
        'exchange' => 'string',
        'open' => 'float',
        'high' => 'float',
        'low' => 'float',
        'close' => 'float',
        'volume' => 'float',
        'adj_open' => 'float',
        'adj_high' => 'float',
        'adj_low' => 'float',
        'adj_close' => 'float',
        'adj_volume' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date' => null,
        'symbol' => null,
        'exchange' => null,
        'open' => null,
        'high' => null,
        'low' => null,
        'close' => null,
        'volume' => null,
        'adj_open' => null,
        'adj_high' => null,
        'adj_low' => null,
        'adj_close' => null,
        'adj_volume' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'symbol' => 'symbol',
        'exchange' => 'exchange',
        'open' => 'open',
        'high' => 'high',
        'low' => 'low',
        'close' => 'close',
        'volume' => 'volume',
        'adj_open' => 'adj_open',
        'adj_high' => 'adj_high',
        'adj_low' => 'adj_low',
        'adj_close' => 'adj_close',
        'adj_volume' => 'adj_volume'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'symbol' => 'setSymbol',
        'exchange' => 'setExchange',
        'open' => 'setOpen',
        'high' => 'setHigh',
        'low' => 'setLow',
        'close' => 'setClose',
        'volume' => 'setVolume',
        'adj_open' => 'setAdjOpen',
        'adj_high' => 'setAdjHigh',
        'adj_low' => 'setAdjLow',
        'adj_close' => 'setAdjClose',
        'adj_volume' => 'setAdjVolume'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'symbol' => 'getSymbol',
        'exchange' => 'getExchange',
        'open' => 'getOpen',
        'high' => 'getHigh',
        'low' => 'getLow',
        'close' => 'getClose',
        'volume' => 'getVolume',
        'adj_open' => 'getAdjOpen',
        'adj_high' => 'getAdjHigh',
        'adj_low' => 'getAdjLow',
        'adj_close' => 'getAdjClose',
        'adj_volume' => 'getAdjVolume'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = $data['date'] ?? null;
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['exchange'] = $data['exchange'] ?? null;
        $this->container['open'] = $data['open'] ?? null;
        $this->container['high'] = $data['high'] ?? null;
        $this->container['low'] = $data['low'] ?? null;
        $this->container['close'] = $data['close'] ?? null;
        $this->container['volume'] = $data['volume'] ?? null;
        $this->container['adj_open'] = $data['adj_open'] ?? null;
        $this->container['adj_high'] = $data['adj_high'] ?? null;
        $this->container['adj_low'] = $data['adj_low'] ?? null;
        $this->container['adj_close'] = $data['adj_close'] ?? null;
        $this->container['adj_volume'] = $data['adj_volume'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Index symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string|null
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string|null $exchange Market exchange
     *
     * @return self
     */
    public function setExchange($exchange)
    {
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets open
     *
     * @return float|null
     */
    public function getOpen()
    {
        return $this->container['open'];
    }

    /**
     * Sets open
     *
     * @param float|null $open Open value
     *
     * @return self
     */
    public function setOpen($open)
    {
        $this->container['open'] = $open;

        return $this;
    }

    /**
     * Gets high
     *
     * @return float|null
     */
    public function getHigh()
    {
        return $this->container['high'];
    }

    /**
     * Sets high
     *
     * @param float|null $high High value
     *
     * @return self
     */
    public function setHigh($high)
    {
        $this->container['high'] = $high;

        return $this;
    }

    /**
     * Gets low
     *
     * @return float|null
     */
    public function getLow()
    {
        return $this->container['low'];
    }

    /**
     * Sets low
     *
     * @param float|null $low Low value
     *
     * @return self
     */
    public function setLow($low)
    {
        $this->container['low'] = $low;

        return $this;
    }

    /**
     * Gets close
     *
     * @return float|null
     */
    public function getClose()
    {
        return $this->container['close'];
    }

    /**
     * Sets close
     *
     * @param float|null $close Close value
     *
     * @return self
     */
    public function setClose($close)
    {
        $this->container['close'] = $close;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return float|null
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param float|null $volume Trading volume
     *
     * @return self
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets adj_open
     *
     * @return float|null
     */
    public function getAdjOpen()
    {
        return $this->container['adj_open'];
    }

    /**
     * Sets adj_open
     *
     * @param float|null $adj_open Adjusted open value
     *
     * @return self
     */
    public function setAdjOpen($adj_open)
    {
        $this->container['adj_open'] = $adj_open;

        return $this;
    }

    /**
     * Gets adj_high
     *
     * @return float|null
     */
    public function getAdjHigh()
    {
        return $this->container['adj_high'];
    }

    /**
     * Sets adj_high
     *
     * @param float|null $adj_high Adjusted high value
     *
     * @return self
     */
    public function setAdjHigh($adj_high)
    {
        $this->container['adj_high'] = $adj_high;

        return $this;
    }

    /**
     * Gets adj_low
     *
     * @return float|null
     */
    public function getAdjLow()
    {
        return $this->container['adj_low'];
    }

    /**
     * Sets adj_low
     *
     * @param float|null $adj_low Adjusted low value
     *
     * @return self
     */
    public function setAdjLow($adj_low)
    {
        $this->container['adj_low'] = $adj_low;

        return $this;
    }

    /**
     * Gets adj_close
     *
     * @return float|null
     */
    public function getAdjClose()
    {
        return $this->container['adj_close'];
    }

    /**
     * Sets adj_close
     *
     * @param float|null $adj_close Adjusted close value
     *
     * @return self
     */
    public function setAdjClose($adj_close)
    {
        $this->container['adj_close'] = $adj_close;

        return $this;
    }

    /**
     * Gets adj_volume
     *
     * @return float|null
     */
    public function getAdjVolume()
    {
        return $this->container['adj_volume'];
    }

    /**
     * Sets adj_volume
     *
     * @param float|null $adj_volume Adjusted trading volume
     *
     * @return self
     */
    public function setAdjVolume($adj_volume)
    {
        $this->container['adj_volume'] = $adj_volume;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


