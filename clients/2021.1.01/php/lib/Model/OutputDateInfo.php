<?php
/**
 * OutputDateInfo
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OutputDateInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class OutputDateInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'outputDateInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'day_of_year' => 'float',
        'day_of_week' => 'float',
        'week_of_year' => 'float',
        'seconds_in_day' => 'float',
        'minutes_in_day' => 'float',
        'ticks' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'day_of_year' => null,
        'day_of_week' => null,
        'week_of_year' => null,
        'seconds_in_day' => null,
        'minutes_in_day' => null,
        'ticks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day_of_year' => 'DayOfYear',
        'day_of_week' => 'DayOfWeek',
        'week_of_year' => 'WeekOfYear',
        'seconds_in_day' => 'SecondsInDay',
        'minutes_in_day' => 'MinutesInDay',
        'ticks' => 'Ticks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day_of_year' => 'setDayOfYear',
        'day_of_week' => 'setDayOfWeek',
        'week_of_year' => 'setWeekOfYear',
        'seconds_in_day' => 'setSecondsInDay',
        'minutes_in_day' => 'setMinutesInDay',
        'ticks' => 'setTicks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day_of_year' => 'getDayOfYear',
        'day_of_week' => 'getDayOfWeek',
        'week_of_year' => 'getWeekOfYear',
        'seconds_in_day' => 'getSecondsInDay',
        'minutes_in_day' => 'getMinutesInDay',
        'ticks' => 'getTicks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['day_of_year'] = $data['day_of_year'] ?? null;
        $this->container['day_of_week'] = $data['day_of_week'] ?? null;
        $this->container['week_of_year'] = $data['week_of_year'] ?? null;
        $this->container['seconds_in_day'] = $data['seconds_in_day'] ?? null;
        $this->container['minutes_in_day'] = $data['minutes_in_day'] ?? null;
        $this->container['ticks'] = $data['ticks'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day_of_year
     *
     * @return float|null
     */
    public function getDayOfYear()
    {
        return $this->container['day_of_year'];
    }

    /**
     * Sets day_of_year
     *
     * @param float|null $day_of_year DayOfYear
     *
     * @return self
     */
    public function setDayOfYear($day_of_year)
    {
        $this->container['day_of_year'] = $day_of_year;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return float|null
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param float|null $day_of_week DayOfWeek
     *
     * @return self
     */
    public function setDayOfWeek($day_of_week)
    {
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets week_of_year
     *
     * @return float|null
     */
    public function getWeekOfYear()
    {
        return $this->container['week_of_year'];
    }

    /**
     * Sets week_of_year
     *
     * @param float|null $week_of_year WeekOfYear
     *
     * @return self
     */
    public function setWeekOfYear($week_of_year)
    {
        $this->container['week_of_year'] = $week_of_year;

        return $this;
    }

    /**
     * Gets seconds_in_day
     *
     * @return float|null
     */
    public function getSecondsInDay()
    {
        return $this->container['seconds_in_day'];
    }

    /**
     * Sets seconds_in_day
     *
     * @param float|null $seconds_in_day SecondsInDay
     *
     * @return self
     */
    public function setSecondsInDay($seconds_in_day)
    {
        $this->container['seconds_in_day'] = $seconds_in_day;

        return $this;
    }

    /**
     * Gets minutes_in_day
     *
     * @return float|null
     */
    public function getMinutesInDay()
    {
        return $this->container['minutes_in_day'];
    }

    /**
     * Sets minutes_in_day
     *
     * @param float|null $minutes_in_day MinutesInDay
     *
     * @return self
     */
    public function setMinutesInDay($minutes_in_day)
    {
        $this->container['minutes_in_day'] = $minutes_in_day;

        return $this;
    }

    /**
     * Gets ticks
     *
     * @return float|null
     */
    public function getTicks()
    {
        return $this->container['ticks'];
    }

    /**
     * Sets ticks
     *
     * @param float|null $ticks Ticks
     *
     * @return self
     */
    public function setTicks($ticks)
    {
        $this->container['ticks'] = $ticks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


