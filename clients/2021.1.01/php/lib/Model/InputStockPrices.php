<?php
/**
 * InputStockPrices
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InputStockPrices Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InputStockPrices implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inputStockPrices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbols' => 'string',
        'date' => 'string',
        'exchange' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbols' => null,
        'date' => null,
        'exchange' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbols' => 'symbols',
        'date' => 'date',
        'exchange' => 'exchange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbols' => 'setSymbols',
        'date' => 'setDate',
        'exchange' => 'setExchange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbols' => 'getSymbols',
        'date' => 'getDate',
        'exchange' => 'getExchange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const EXCHANGE_XNYS__NEW_YORK_STOCK_EXCHANGE = 'XNYS (New York Stock Exchange)';
    const EXCHANGE_XNAS__NASDAQ_STOCK_EXCHANGE = 'XNAS (NASDAQ Stock Exchange)';
    const EXCHANGE_XBRU__EURONEXT_BRUSSELS = 'XBRU (Euronext Brussels)';
    const EXCHANGE_XTSE__TORONTO_STOCK_EXCHANGE = 'XTSE (Toronto Stock Exchange)';
    const EXCHANGE_XCNQ__CANDADIAN_SECURITIES_EXCHANGE = 'XCNQ (Candadian Securities Exchange)';
    const EXCHANGE_XSHG__SHANGHAI_STOCK_EXCHANGE = 'XSHG (Shanghai Stock Exchange)';
    const EXCHANGE_XCSE__COPENHAGEN_STOCK_EXCHANGE = 'XCSE (Copenhagen Stock Exchange)';
    const EXCHANGE_XPAR__EURONEXT_PARIS = 'XPAR (Euronext Paris)';
    const EXCHANGE_XFRA__DEUTSCHE_BORSE = 'XFRA (Deutsche Borse)';
    const EXCHANGE_XHKG__HONG_KONG_STOCK_EXCHANGE = 'XHKG (Hong Kong Stock Exchange)';
    const EXCHANGE_XNSE__NATIONAL_STOCK_EXCHANGE_INDIA = 'XNSE (National Stock Exchange India)';
    const EXCHANGE_XTAE__TEL_AVIV_STOCK_EXCHANGE = 'XTAE (Tel Aviv Stock Exchange)';
    const EXCHANGE_XNGO__NAGOYA_STOCK_EXCHANGE = 'XNGO (Nagoya Stock Exchange)';
    const EXCHANGE_XFKA__FUKUOKA_STOCK_EXCHANGE = 'XFKA (Fukuoka Stock Exchange)';
    const EXCHANGE_XSAP__SAPPORO_STOCK_EXCHANGE = 'XSAP (Sapporo Stock Exchange)';
    const EXCHANGE_XMEX__MEXICAN_STOCK_EXCHANGE = 'XMEX (Mexican Stock Exchange)';
    const EXCHANGE_XNZE__NEW_ZEALAND_STOCK_EXCHANGE = 'XNZE (New Zealand Stock Exchange)';
    const EXCHANGE_XLIS__EURONEXT_LISBON = 'XLIS (Euronext Lisbon)';
    const EXCHANGE_MISX__MOSCOW_STOCK_EXCHANGE = 'MISX (Moscow Stock Exchange)';
    const EXCHANGE_XSES__SINGAPORE_STOCK_EXCHANGE = 'XSES (Singapore Stock Exchange)';
    const EXCHANGE_XLON__LONDON_STOCK_EXCHANGE = 'XLON (London Stock Exchange)';
    const EXCHANGE_XASE__AMERICAN_STOCK_EXCHANGE = 'XASE (American Stock Exchange)';
    const EXCHANGE_XASX__AUSTRALIA_STOCK_EXCHANGE = 'XASX (Australia Stock Exchange)';
    const EXCHANGE_XDFM__DUBAI_FINANCIAL_MARKET = 'XDFM (Dubai Financial Market)';
    const EXCHANGE_XBKK__STOCK_EXCHANGE_OF_THAILAND = 'XBKK (Stock Exchange of Thailand)';
    const EXCHANGE_XSWX__SIX_SWISS_EXCHANGE = 'XSWX (SIX Swiss Exchange)';
    const EXCHANGE_XSTO__STOCKHOLM_STOCK_EXCHANGE = 'XSTO (Stockholm Stock Exchange)';
    const EXCHANGE_BMEX__BOLSAS_Y_MERCADOS_ESPAOLES = 'BMEX (Bolsas y Mercados EspaÃ±oles)';
    const EXCHANGE_XJSE__JOHANNESBURG_STOCK_EXCHANGE = 'XJSE (Johannesburg Stock Exchange)';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExchangeAllowableValues()
    {
        return [
            self::EXCHANGE_XNYS__NEW_YORK_STOCK_EXCHANGE,
            self::EXCHANGE_XNAS__NASDAQ_STOCK_EXCHANGE,
            self::EXCHANGE_XBRU__EURONEXT_BRUSSELS,
            self::EXCHANGE_XTSE__TORONTO_STOCK_EXCHANGE,
            self::EXCHANGE_XCNQ__CANDADIAN_SECURITIES_EXCHANGE,
            self::EXCHANGE_XSHG__SHANGHAI_STOCK_EXCHANGE,
            self::EXCHANGE_XCSE__COPENHAGEN_STOCK_EXCHANGE,
            self::EXCHANGE_XPAR__EURONEXT_PARIS,
            self::EXCHANGE_XFRA__DEUTSCHE_BORSE,
            self::EXCHANGE_XHKG__HONG_KONG_STOCK_EXCHANGE,
            self::EXCHANGE_XNSE__NATIONAL_STOCK_EXCHANGE_INDIA,
            self::EXCHANGE_XTAE__TEL_AVIV_STOCK_EXCHANGE,
            self::EXCHANGE_XNGO__NAGOYA_STOCK_EXCHANGE,
            self::EXCHANGE_XFKA__FUKUOKA_STOCK_EXCHANGE,
            self::EXCHANGE_XSAP__SAPPORO_STOCK_EXCHANGE,
            self::EXCHANGE_XMEX__MEXICAN_STOCK_EXCHANGE,
            self::EXCHANGE_XNZE__NEW_ZEALAND_STOCK_EXCHANGE,
            self::EXCHANGE_XLIS__EURONEXT_LISBON,
            self::EXCHANGE_MISX__MOSCOW_STOCK_EXCHANGE,
            self::EXCHANGE_XSES__SINGAPORE_STOCK_EXCHANGE,
            self::EXCHANGE_XLON__LONDON_STOCK_EXCHANGE,
            self::EXCHANGE_XASE__AMERICAN_STOCK_EXCHANGE,
            self::EXCHANGE_XASX__AUSTRALIA_STOCK_EXCHANGE,
            self::EXCHANGE_XDFM__DUBAI_FINANCIAL_MARKET,
            self::EXCHANGE_XBKK__STOCK_EXCHANGE_OF_THAILAND,
            self::EXCHANGE_XSWX__SIX_SWISS_EXCHANGE,
            self::EXCHANGE_XSTO__STOCKHOLM_STOCK_EXCHANGE,
            self::EXCHANGE_BMEX__BOLSAS_Y_MERCADOS_ESPAOLES,
            self::EXCHANGE_XJSE__JOHANNESBURG_STOCK_EXCHANGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbols'] = $data['symbols'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['exchange'] = $data['exchange'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['symbols'] === null) {
            $invalidProperties[] = "'symbols' can't be null";
        }
        $allowedValues = $this->getExchangeAllowableValues();
        if (!is_null($this->container['exchange']) && !in_array($this->container['exchange'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exchange', must be one of '%s'",
                $this->container['exchange'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbols
     *
     * @return string
     */
    public function getSymbols()
    {
        return $this->container['symbols'];
    }

    /**
     * Sets symbols
     *
     * @param string $symbols Stock ticker symbols (comma-separated, max 20)
     *
     * @return self
     */
    public function setSymbols($symbols)
    {
        $this->container['symbols'] = $symbols;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date (yyyy-MM-dd, leave empty for latest)
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string|null
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string|null $exchange Stock exchange
     *
     * @return self
     */
    public function setExchange($exchange)
    {
        $allowedValues = $this->getExchangeAllowableValues();
        if (!is_null($exchange) && !in_array($exchange, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exchange', must be one of '%s'",
                    $exchange,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exchange'] = $exchange;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


