<?php
/**
 * InputDateTimeConversion
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InputDateTimeConversion Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InputDateTimeConversion implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inputDateTimeConversion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input' => 'string',
        'source' => 'string',
        'target' => 'string',
        'format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input' => null,
        'source' => null,
        'target' => null,
        'format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
        'source' => 'source',
        'target' => 'target',
        'format' => 'format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'source' => 'setSource',
        'target' => 'setTarget',
        'format' => 'setFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'source' => 'getSource',
        'target' => 'getTarget',
        'format' => 'getFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SOURCE_GMT_STANDARD_TIME____GMT_GREENWICH_MEAN_TIME__DUBLIN_EDINBURGH_LISBON_LONDON = 'GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London';
    const SOURCE_GREENWICH_STANDARD_TIME____GMT_MONROVIA_REYKJAVIK = 'Greenwich Standard Time - (GMT) Monrovia, Reykjavik';
    const SOURCE_W__EUROPE_STANDARD_TIME____GMT0100_AMSTERDAM_BERLIN_BERN_ROME_STOCKHOLM_VIENNA = 'W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna';
    const SOURCE_CENTRAL_EUROPE_STANDARD_TIME____GMT0100_BELGRADE_BRATISLAVA_BUDAPEST_LJUBLJANA_PRAGUE = 'Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague';
    const SOURCE_CENTRAL_EUROPEAN_STANDARD_TIME____GMT0100_SARAJEVO_SKOPJE_WARSAW_ZAGREB = 'Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb';
    const SOURCE_W__CENTRAL_AFRICA_STANDARD_TIME____GMT0100_WEST_CENTRAL_AFRICA = 'W. Central Africa Standard Time - (GMT+01:00) West Central Africa';
    const SOURCE_GTB_STANDARD_TIME____GMT0200_ATHENS_BUCHAREST_ISTANBUL = 'GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul';
    const SOURCE_MIDDLE_EAST_STANDARD_TIME____GMT0200_BEIRUT = 'Middle East Standard Time - (GMT+02:00) Beirut';
    const SOURCE_EGYPT_STANDARD_TIME____GMT0200_CAIRO = 'Egypt Standard Time - (GMT+02:00) Cairo';
    const SOURCE_SOUTH_AFRICA_STANDARD_TIME____GMT0200_HARARE_PRETORIA = 'South Africa Standard Time - (GMT+02:00) Harare, Pretoria';
    const SOURCE_FLE_STANDARD_TIME____GMT0200_HELSINKI_KYIV_RIGA_SOFIA_TALLINN_VILNIUS = 'FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius';
    const SOURCE_ISRAEL_STANDARD_TIME____GMT0200_JERUSALEM = 'Israel Standard Time - (GMT+02:00) Jerusalem';
    const SOURCE_E__EUROPE_STANDARD_TIME____GMT0200_MINSK = 'E. Europe Standard Time - (GMT+02:00) Minsk';
    const SOURCE_NAMIBIA_STANDARD_TIME____GMT0200_WINDHOEK = 'Namibia Standard Time - (GMT+02:00) Windhoek';
    const SOURCE_ARABIC_STANDARD_TIME____GMT0300_BAGHDAD = 'Arabic Standard Time - (GMT+03:00) Baghdad';
    const SOURCE_ARAB_STANDARD_TIME____GMT0300_KUWAIT_RIYADH = 'Arab Standard Time - (GMT+03:00) Kuwait, Riyadh';
    const SOURCE_RUSSIAN_STANDARD_TIME____GMT0300_MOSCOW_ST__PETERSBURG_VOLGOGRAD = 'Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd';
    const SOURCE_E__AFRICA_STANDARD_TIME____GMT0300_NAIROBI = 'E. Africa Standard Time - (GMT+03:00) Nairobi';
    const SOURCE_GEORGIAN_STANDARD_TIME____GMT0300_TBILISI = 'Georgian Standard Time - (GMT+03:00) Tbilisi';
    const SOURCE_IRAN_STANDARD_TIME____GMT0330_TEHRAN = 'Iran Standard Time - (GMT+03:30) Tehran';
    const SOURCE_ARABIAN_STANDARD_TIME____GMT0400_ABU_DHABI_MUSCAT = 'Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat';
    const SOURCE_AZERBAIJAN_STANDARD_TIME____GMT0400_BAKU = 'Azerbaijan Standard Time - (GMT+04:00) Baku';
    const SOURCE_MAURITIUS_STANDARD_TIME____GMT0400_PORT_LOUIS = 'Mauritius Standard Time - (GMT+04:00) Port Louis';
    const SOURCE_CAUCASUS_STANDARD_TIME____GMT0400_YEREVAN = 'Caucasus Standard Time - (GMT+04:00) Yerevan';
    const SOURCE_AFGHANISTAN_STANDARD_TIME____GMT0430_KABUL = 'Afghanistan Standard Time - (GMT+04:30) Kabul';
    const SOURCE_EKATERINBURG_STANDARD_TIME____GMT0500_EKATERINBURG = 'Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg';
    const SOURCE_PAKISTAN_STANDARD_TIME____GMT0500_ISLAMABAD_KARACHI = 'Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi';
    const SOURCE_WEST_ASIA_STANDARD_TIME____GMT0500_TASHKENT = 'West Asia Standard Time - (GMT+05:00) Tashkent';
    const SOURCE_INDIA_STANDARD_TIME____GMT0530_CHENNAI_KOLKATA_MUMBAI_NEW_DELHI = 'India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi';
    const SOURCE_SRI_LANKA_STANDARD_TIME____GMT0530_SRI_JAYAWARDENEPURA = 'Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura';
    const SOURCE_NEPAL_STANDARD_TIME____GMT0545_KATHMANDU = 'Nepal Standard Time - (GMT+05:45) Kathmandu';
    const SOURCE_N__CENTRAL_ASIA_STANDARD_TIME____GMT0600_ALMATY_NOVOSIBIRSK = 'N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk';
    const SOURCE_CENTRAL_ASIA_STANDARD_TIME____GMT0600_ASTANA_DHAKA = 'Central Asia Standard Time - (GMT+06:00) Astana, Dhaka';
    const SOURCE_MYANMAR_STANDARD_TIME____GMT0630_YANGON__RANGOON = 'Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)';
    const SOURCE_SE_ASIA_STANDARD_TIME____GMT0700_BANGKOK_HANOI_JAKARTA = 'SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta';
    const SOURCE_NORTH_ASIA_STANDARD_TIME____GMT0700_KRASNOYARSK = 'North Asia Standard Time - (GMT+07:00) Krasnoyarsk';
    const SOURCE_CHINA_STANDARD_TIME____GMT0800_BEIJING_CHONGQING_HONG_KONG_URUMQI = 'China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi';
    const SOURCE_NORTH_ASIA_EAST_STANDARD_TIME____GMT0800_IRKUTSK_ULAAN_BATAAR = 'North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar';
    const SOURCE_SINGAPORE_STANDARD_TIME____GMT0800_KUALA_LUMPUR_SINGAPORE = 'Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore';
    const SOURCE_W__AUSTRALIA_STANDARD_TIME____GMT0800_PERTH = 'W. Australia Standard Time - (GMT+08:00) Perth';
    const SOURCE_TAIPEI_STANDARD_TIME____GMT0800_TAIPEI = 'Taipei Standard Time - (GMT+08:00) Taipei';
    const SOURCE_TOKYO_STANDARD_TIME____GMT0900_OSAKA_SAPPORO_TOKYO = 'Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo';
    const SOURCE_KOREA_STANDARD_TIME____GMT0900_SEOUL = 'Korea Standard Time - (GMT+09:00) Seoul';
    const SOURCE_YAKUTSK_STANDARD_TIME____GMT0900_YAKUTSK = 'Yakutsk Standard Time - (GMT+09:00) Yakutsk';
    const SOURCE_CEN__AUSTRALIA_STANDARD_TIME____GMT0930_ADELAIDE = 'Cen. Australia Standard Time - (GMT+09:30) Adelaide';
    const SOURCE_AUS_CENTRAL_STANDARD_TIME____GMT0930_DARWIN = 'AUS Central Standard Time - (GMT+09:30) Darwin';
    const SOURCE_E__AUSTRALIA_STANDARD_TIME____GMT1000_BRISBANE = 'E. Australia Standard Time - (GMT+10:00) Brisbane';
    const SOURCE_AUS_EASTERN_STANDARD_TIME____GMT1000_CANBERRA_MELBOURNE_SYDNEY = 'AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney';
    const SOURCE_WEST_PACIFIC_STANDARD_TIME____GMT1000_GUAM_PORT_MORESBY = 'West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby';
    const SOURCE_TASMANIA_STANDARD_TIME____GMT1000_HOBART = 'Tasmania Standard Time - (GMT+10:00) Hobart';
    const SOURCE_VLADIVOSTOK_STANDARD_TIME____GMT1000_VLADIVOSTOK = 'Vladivostok Standard Time - (GMT+10:00) Vladivostok';
    const SOURCE_CENTRAL_PACIFIC_STANDARD_TIME____GMT1100_MAGADAN_SOLOMON_IS__NEW_CALEDONIA = 'Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia';
    const SOURCE_NEW_ZEALAND_STANDARD_TIME____GMT1200_AUCKLAND_WELLINGTON = 'New Zealand Standard Time - (GMT+12:00) Auckland, Wellington';
    const SOURCE_FIJI_STANDARD_TIME____GMT1200_FIJI_KAMCHATKA_MARSHALL_IS = 'Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.';
    const SOURCE_TONGA_STANDARD_TIME____GMT1300_NUKUALOFA = 'Tonga Standard Time - (GMT+13:00) Nuku'alofa';
    const SOURCE_AZORES_STANDARD_TIME____GMT_0100_AZORES = 'Azores Standard Time - (GMT-01:00) Azores';
    const SOURCE_CAPE_VERDE_STANDARD_TIME____GMT_0100_CAPE_VERDE_IS = 'Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.';
    const SOURCE_MID_ATLANTIC_STANDARD_TIME____GMT_0200_MID_ATLANTIC = 'Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic';
    const SOURCE_E__SOUTH_AMERICA_STANDARD_TIME____GMT_0300_BRASILIA = 'E. South America Standard Time - (GMT-03:00) Brasilia';
    const SOURCE_ARGENTINA_STANDARD_TIME____GMT_0300_BUENOS_AIRES = 'Argentina Standard Time - (GMT-03:00) Buenos Aires';
    const SOURCE_SA_EASTERN_STANDARD_TIME____GMT_0300_GEORGETOWN = 'SA Eastern Standard Time - (GMT-03:00) Georgetown';
    const SOURCE_GREENLAND_STANDARD_TIME____GMT_0300_GREENLAND = 'Greenland Standard Time - (GMT-03:00) Greenland';
    const SOURCE_MONTEVIDEO_STANDARD_TIME____GMT_0300_MONTEVIDEO = 'Montevideo Standard Time - (GMT-03:00) Montevideo';
    const SOURCE_NEWFOUNDLAND_STANDARD_TIME____GMT_0330_NEWFOUNDLAND = 'Newfoundland Standard Time - (GMT-03:30) Newfoundland';
    const SOURCE_ATLANTIC_STANDARD_TIME____GMT_0400_ATLANTIC_TIME__CANADA = 'Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)';
    const SOURCE_SA_WESTERN_STANDARD_TIME____GMT_0400_LA_PAZ = 'SA Western Standard Time - (GMT-04:00) La Paz';
    const SOURCE_CENTRAL_BRAZILIAN_STANDARD_TIME____GMT_0400_MANAUS = 'Central Brazilian Standard Time - (GMT-04:00) Manaus';
    const SOURCE_PACIFIC_SA_STANDARD_TIME____GMT_0400_SANTIAGO = 'Pacific SA Standard Time - (GMT-04:00) Santiago';
    const SOURCE_VENEZUELA_STANDARD_TIME____GMT_0430_CARACAS = 'Venezuela Standard Time - (GMT-04:30) Caracas';
    const SOURCE_SA_PACIFIC_STANDARD_TIME____GMT_0500_BOGOTA_LIMA_QUITO_RIO_BRANCO = 'SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco';
    const SOURCE_EASTERN_STANDARD_TIME____GMT_0500_EASTERN_TIME__US__CANADA = 'Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)';
    const SOURCE_US_EASTERN_STANDARD_TIME____GMT_0500_INDIANA__EAST = 'US Eastern Standard Time - (GMT-05:00) Indiana (East)';
    const SOURCE_CENTRAL_AMERICA_STANDARD_TIME____GMT_0600_CENTRAL_AMERICA = 'Central America Standard Time - (GMT-06:00) Central America';
    const SOURCE_CENTRAL_STANDARD_TIME____GMT_0600_CENTRAL_TIME__US__CANADA = 'Central Standard Time - (GMT-06:00) Central Time (US & Canada)';
    const SOURCE_CENTRAL_STANDARD_TIME__MEXICO____GMT_0600_GUADALAJARA_MEXICO_CITY_MONTERREY = 'Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey';
    const SOURCE_CANADA_CENTRAL_STANDARD_TIME____GMT_0600_SASKATCHEWAN = 'Canada Central Standard Time - (GMT-06:00) Saskatchewan';
    const SOURCE_US_MOUNTAIN_STANDARD_TIME____GMT_0700_ARIZONA = 'US Mountain Standard Time - (GMT-07:00) Arizona';
    const SOURCE_MOUNTAIN_STANDARD_TIME__MEXICO____GMT_0700_CHIHUAHUA_LA_PAZ_MAZATLAN = 'Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan';
    const SOURCE_MOUNTAIN_STANDARD_TIME____GMT_0700_MOUNTAIN_TIME__US__CANADA = 'Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)';
    const SOURCE_PACIFIC_STANDARD_TIME____GMT_0800_PACIFIC_TIME__US__CANADA = 'Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)';
    const SOURCE_PACIFIC_STANDARD_TIME__MEXICO____GMT_0800_TIJUANA_BAJA_CALIFORNIA = 'Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California';
    const SOURCE_ALASKAN_STANDARD_TIME____GMT_0900_ALASKA = 'Alaskan Standard Time - (GMT-09:00) Alaska';
    const SOURCE_HAWAIIAN_STANDARD_TIME____GMT_1000_HAWAII = 'Hawaiian Standard Time - (GMT-10:00) Hawaii';
    const SOURCE_SAMOA_STANDARD_TIME____GMT_1100_MIDWAY_ISLAND_SAMOA = 'Samoa Standard Time - (GMT-11:00) Midway Island, Samoa';
    const SOURCE_DATELINE_STANDARD_TIME____GMT_1200_INTERNATIONAL_DATE_LINE_WEST = 'Dateline Standard Time - (GMT-12:00) International Date Line West';
    const TARGET_GMT_STANDARD_TIME____GMT_GREENWICH_MEAN_TIME__DUBLIN_EDINBURGH_LISBON_LONDON = 'GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London';
    const TARGET_GREENWICH_STANDARD_TIME____GMT_MONROVIA_REYKJAVIK = 'Greenwich Standard Time - (GMT) Monrovia, Reykjavik';
    const TARGET_W__EUROPE_STANDARD_TIME____GMT0100_AMSTERDAM_BERLIN_BERN_ROME_STOCKHOLM_VIENNA = 'W. Europe Standard Time - (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna';
    const TARGET_CENTRAL_EUROPE_STANDARD_TIME____GMT0100_BELGRADE_BRATISLAVA_BUDAPEST_LJUBLJANA_PRAGUE = 'Central Europe Standard Time - (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague';
    const TARGET_CENTRAL_EUROPEAN_STANDARD_TIME____GMT0100_SARAJEVO_SKOPJE_WARSAW_ZAGREB = 'Central European Standard Time - (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb';
    const TARGET_W__CENTRAL_AFRICA_STANDARD_TIME____GMT0100_WEST_CENTRAL_AFRICA = 'W. Central Africa Standard Time - (GMT+01:00) West Central Africa';
    const TARGET_GTB_STANDARD_TIME____GMT0200_ATHENS_BUCHAREST_ISTANBUL = 'GTB Standard Time - (GMT+02:00) Athens, Bucharest, Istanbul';
    const TARGET_MIDDLE_EAST_STANDARD_TIME____GMT0200_BEIRUT = 'Middle East Standard Time - (GMT+02:00) Beirut';
    const TARGET_EGYPT_STANDARD_TIME____GMT0200_CAIRO = 'Egypt Standard Time - (GMT+02:00) Cairo';
    const TARGET_SOUTH_AFRICA_STANDARD_TIME____GMT0200_HARARE_PRETORIA = 'South Africa Standard Time - (GMT+02:00) Harare, Pretoria';
    const TARGET_FLE_STANDARD_TIME____GMT0200_HELSINKI_KYIV_RIGA_SOFIA_TALLINN_VILNIUS = 'FLE Standard Time - (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius';
    const TARGET_ISRAEL_STANDARD_TIME____GMT0200_JERUSALEM = 'Israel Standard Time - (GMT+02:00) Jerusalem';
    const TARGET_E__EUROPE_STANDARD_TIME____GMT0200_MINSK = 'E. Europe Standard Time - (GMT+02:00) Minsk';
    const TARGET_NAMIBIA_STANDARD_TIME____GMT0200_WINDHOEK = 'Namibia Standard Time - (GMT+02:00) Windhoek';
    const TARGET_ARABIC_STANDARD_TIME____GMT0300_BAGHDAD = 'Arabic Standard Time - (GMT+03:00) Baghdad';
    const TARGET_ARAB_STANDARD_TIME____GMT0300_KUWAIT_RIYADH = 'Arab Standard Time - (GMT+03:00) Kuwait, Riyadh';
    const TARGET_RUSSIAN_STANDARD_TIME____GMT0300_MOSCOW_ST__PETERSBURG_VOLGOGRAD = 'Russian Standard Time - (GMT+03:00) Moscow, St. Petersburg, Volgograd';
    const TARGET_E__AFRICA_STANDARD_TIME____GMT0300_NAIROBI = 'E. Africa Standard Time - (GMT+03:00) Nairobi';
    const TARGET_GEORGIAN_STANDARD_TIME____GMT0300_TBILISI = 'Georgian Standard Time - (GMT+03:00) Tbilisi';
    const TARGET_IRAN_STANDARD_TIME____GMT0330_TEHRAN = 'Iran Standard Time - (GMT+03:30) Tehran';
    const TARGET_ARABIAN_STANDARD_TIME____GMT0400_ABU_DHABI_MUSCAT = 'Arabian Standard Time - (GMT+04:00) Abu Dhabi, Muscat';
    const TARGET_AZERBAIJAN_STANDARD_TIME____GMT0400_BAKU = 'Azerbaijan Standard Time - (GMT+04:00) Baku';
    const TARGET_MAURITIUS_STANDARD_TIME____GMT0400_PORT_LOUIS = 'Mauritius Standard Time - (GMT+04:00) Port Louis';
    const TARGET_CAUCASUS_STANDARD_TIME____GMT0400_YEREVAN = 'Caucasus Standard Time - (GMT+04:00) Yerevan';
    const TARGET_AFGHANISTAN_STANDARD_TIME____GMT0430_KABUL = 'Afghanistan Standard Time - (GMT+04:30) Kabul';
    const TARGET_EKATERINBURG_STANDARD_TIME____GMT0500_EKATERINBURG = 'Ekaterinburg Standard Time - (GMT+05:00) Ekaterinburg';
    const TARGET_PAKISTAN_STANDARD_TIME____GMT0500_ISLAMABAD_KARACHI = 'Pakistan Standard Time - (GMT+05:00) Islamabad, Karachi';
    const TARGET_WEST_ASIA_STANDARD_TIME____GMT0500_TASHKENT = 'West Asia Standard Time - (GMT+05:00) Tashkent';
    const TARGET_INDIA_STANDARD_TIME____GMT0530_CHENNAI_KOLKATA_MUMBAI_NEW_DELHI = 'India Standard Time - (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi';
    const TARGET_SRI_LANKA_STANDARD_TIME____GMT0530_SRI_JAYAWARDENEPURA = 'Sri Lanka Standard Time - (GMT+05:30) Sri Jayawardenepura';
    const TARGET_NEPAL_STANDARD_TIME____GMT0545_KATHMANDU = 'Nepal Standard Time - (GMT+05:45) Kathmandu';
    const TARGET_N__CENTRAL_ASIA_STANDARD_TIME____GMT0600_ALMATY_NOVOSIBIRSK = 'N. Central Asia Standard Time - (GMT+06:00) Almaty, Novosibirsk';
    const TARGET_CENTRAL_ASIA_STANDARD_TIME____GMT0600_ASTANA_DHAKA = 'Central Asia Standard Time - (GMT+06:00) Astana, Dhaka';
    const TARGET_MYANMAR_STANDARD_TIME____GMT0630_YANGON__RANGOON = 'Myanmar Standard Time - (GMT+06:30) Yangon (Rangoon)';
    const TARGET_SE_ASIA_STANDARD_TIME____GMT0700_BANGKOK_HANOI_JAKARTA = 'SE Asia Standard Time - (GMT+07:00) Bangkok, Hanoi, Jakarta';
    const TARGET_NORTH_ASIA_STANDARD_TIME____GMT0700_KRASNOYARSK = 'North Asia Standard Time - (GMT+07:00) Krasnoyarsk';
    const TARGET_CHINA_STANDARD_TIME____GMT0800_BEIJING_CHONGQING_HONG_KONG_URUMQI = 'China Standard Time - (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi';
    const TARGET_NORTH_ASIA_EAST_STANDARD_TIME____GMT0800_IRKUTSK_ULAAN_BATAAR = 'North Asia East Standard Time - (GMT+08:00) Irkutsk, Ulaan Bataar';
    const TARGET_SINGAPORE_STANDARD_TIME____GMT0800_KUALA_LUMPUR_SINGAPORE = 'Singapore Standard Time - (GMT+08:00) Kuala Lumpur, Singapore';
    const TARGET_W__AUSTRALIA_STANDARD_TIME____GMT0800_PERTH = 'W. Australia Standard Time - (GMT+08:00) Perth';
    const TARGET_TAIPEI_STANDARD_TIME____GMT0800_TAIPEI = 'Taipei Standard Time - (GMT+08:00) Taipei';
    const TARGET_TOKYO_STANDARD_TIME____GMT0900_OSAKA_SAPPORO_TOKYO = 'Tokyo Standard Time - (GMT+09:00) Osaka, Sapporo, Tokyo';
    const TARGET_KOREA_STANDARD_TIME____GMT0900_SEOUL = 'Korea Standard Time - (GMT+09:00) Seoul';
    const TARGET_YAKUTSK_STANDARD_TIME____GMT0900_YAKUTSK = 'Yakutsk Standard Time - (GMT+09:00) Yakutsk';
    const TARGET_CEN__AUSTRALIA_STANDARD_TIME____GMT0930_ADELAIDE = 'Cen. Australia Standard Time - (GMT+09:30) Adelaide';
    const TARGET_AUS_CENTRAL_STANDARD_TIME____GMT0930_DARWIN = 'AUS Central Standard Time - (GMT+09:30) Darwin';
    const TARGET_E__AUSTRALIA_STANDARD_TIME____GMT1000_BRISBANE = 'E. Australia Standard Time - (GMT+10:00) Brisbane';
    const TARGET_AUS_EASTERN_STANDARD_TIME____GMT1000_CANBERRA_MELBOURNE_SYDNEY = 'AUS Eastern Standard Time - (GMT+10:00) Canberra, Melbourne, Sydney';
    const TARGET_WEST_PACIFIC_STANDARD_TIME____GMT1000_GUAM_PORT_MORESBY = 'West Pacific Standard Time - (GMT+10:00) Guam, Port Moresby';
    const TARGET_TASMANIA_STANDARD_TIME____GMT1000_HOBART = 'Tasmania Standard Time - (GMT+10:00) Hobart';
    const TARGET_VLADIVOSTOK_STANDARD_TIME____GMT1000_VLADIVOSTOK = 'Vladivostok Standard Time - (GMT+10:00) Vladivostok';
    const TARGET_CENTRAL_PACIFIC_STANDARD_TIME____GMT1100_MAGADAN_SOLOMON_IS__NEW_CALEDONIA = 'Central Pacific Standard Time - (GMT+11:00) Magadan, Solomon Is., New Caledonia';
    const TARGET_NEW_ZEALAND_STANDARD_TIME____GMT1200_AUCKLAND_WELLINGTON = 'New Zealand Standard Time - (GMT+12:00) Auckland, Wellington';
    const TARGET_FIJI_STANDARD_TIME____GMT1200_FIJI_KAMCHATKA_MARSHALL_IS = 'Fiji Standard Time - (GMT+12:00) Fiji, Kamchatka, Marshall Is.';
    const TARGET_TONGA_STANDARD_TIME____GMT1300_NUKUALOFA = 'Tonga Standard Time - (GMT+13:00) Nuku'alofa';
    const TARGET_AZORES_STANDARD_TIME____GMT_0100_AZORES = 'Azores Standard Time - (GMT-01:00) Azores';
    const TARGET_CAPE_VERDE_STANDARD_TIME____GMT_0100_CAPE_VERDE_IS = 'Cape Verde Standard Time - (GMT-01:00) Cape Verde Is.';
    const TARGET_MID_ATLANTIC_STANDARD_TIME____GMT_0200_MID_ATLANTIC = 'Mid-Atlantic Standard Time - (GMT-02:00) Mid-Atlantic';
    const TARGET_E__SOUTH_AMERICA_STANDARD_TIME____GMT_0300_BRASILIA = 'E. South America Standard Time - (GMT-03:00) Brasilia';
    const TARGET_ARGENTINA_STANDARD_TIME____GMT_0300_BUENOS_AIRES = 'Argentina Standard Time - (GMT-03:00) Buenos Aires';
    const TARGET_SA_EASTERN_STANDARD_TIME____GMT_0300_GEORGETOWN = 'SA Eastern Standard Time - (GMT-03:00) Georgetown';
    const TARGET_GREENLAND_STANDARD_TIME____GMT_0300_GREENLAND = 'Greenland Standard Time - (GMT-03:00) Greenland';
    const TARGET_MONTEVIDEO_STANDARD_TIME____GMT_0300_MONTEVIDEO = 'Montevideo Standard Time - (GMT-03:00) Montevideo';
    const TARGET_NEWFOUNDLAND_STANDARD_TIME____GMT_0330_NEWFOUNDLAND = 'Newfoundland Standard Time - (GMT-03:30) Newfoundland';
    const TARGET_ATLANTIC_STANDARD_TIME____GMT_0400_ATLANTIC_TIME__CANADA = 'Atlantic Standard Time - (GMT-04:00) Atlantic Time (Canada)';
    const TARGET_SA_WESTERN_STANDARD_TIME____GMT_0400_LA_PAZ = 'SA Western Standard Time - (GMT-04:00) La Paz';
    const TARGET_CENTRAL_BRAZILIAN_STANDARD_TIME____GMT_0400_MANAUS = 'Central Brazilian Standard Time - (GMT-04:00) Manaus';
    const TARGET_PACIFIC_SA_STANDARD_TIME____GMT_0400_SANTIAGO = 'Pacific SA Standard Time - (GMT-04:00) Santiago';
    const TARGET_VENEZUELA_STANDARD_TIME____GMT_0430_CARACAS = 'Venezuela Standard Time - (GMT-04:30) Caracas';
    const TARGET_SA_PACIFIC_STANDARD_TIME____GMT_0500_BOGOTA_LIMA_QUITO_RIO_BRANCO = 'SA Pacific Standard Time - (GMT-05:00) Bogota, Lima, Quito, Rio Branco';
    const TARGET_EASTERN_STANDARD_TIME____GMT_0500_EASTERN_TIME__US__CANADA = 'Eastern Standard Time - (GMT-05:00) Eastern Time (US & Canada)';
    const TARGET_US_EASTERN_STANDARD_TIME____GMT_0500_INDIANA__EAST = 'US Eastern Standard Time - (GMT-05:00) Indiana (East)';
    const TARGET_CENTRAL_AMERICA_STANDARD_TIME____GMT_0600_CENTRAL_AMERICA = 'Central America Standard Time - (GMT-06:00) Central America';
    const TARGET_CENTRAL_STANDARD_TIME____GMT_0600_CENTRAL_TIME__US__CANADA = 'Central Standard Time - (GMT-06:00) Central Time (US & Canada)';
    const TARGET_CENTRAL_STANDARD_TIME__MEXICO____GMT_0600_GUADALAJARA_MEXICO_CITY_MONTERREY = 'Central Standard Time (Mexico) - (GMT-06:00) Guadalajara, Mexico City, Monterrey';
    const TARGET_CANADA_CENTRAL_STANDARD_TIME____GMT_0600_SASKATCHEWAN = 'Canada Central Standard Time - (GMT-06:00) Saskatchewan';
    const TARGET_US_MOUNTAIN_STANDARD_TIME____GMT_0700_ARIZONA = 'US Mountain Standard Time - (GMT-07:00) Arizona';
    const TARGET_MOUNTAIN_STANDARD_TIME__MEXICO____GMT_0700_CHIHUAHUA_LA_PAZ_MAZATLAN = 'Mountain Standard Time (Mexico) - (GMT-07:00) Chihuahua, La Paz, Mazatlan';
    const TARGET_MOUNTAIN_STANDARD_TIME____GMT_0700_MOUNTAIN_TIME__US__CANADA = 'Mountain Standard Time - (GMT-07:00) Mountain Time (US & Canada)';
    const TARGET_PACIFIC_STANDARD_TIME____GMT_0800_PACIFIC_TIME__US__CANADA = 'Pacific Standard Time - (GMT-08:00) Pacific Time (US & Canada)';
    const TARGET_PACIFIC_STANDARD_TIME__MEXICO____GMT_0800_TIJUANA_BAJA_CALIFORNIA = 'Pacific Standard Time (Mexico) - (GMT-08:00) Tijuana, Baja California';
    const TARGET_ALASKAN_STANDARD_TIME____GMT_0900_ALASKA = 'Alaskan Standard Time - (GMT-09:00) Alaska';
    const TARGET_HAWAIIAN_STANDARD_TIME____GMT_1000_HAWAII = 'Hawaiian Standard Time - (GMT-10:00) Hawaii';
    const TARGET_SAMOA_STANDARD_TIME____GMT_1100_MIDWAY_ISLAND_SAMOA = 'Samoa Standard Time - (GMT-11:00) Midway Island, Samoa';
    const TARGET_DATELINE_STANDARD_TIME____GMT_1200_INTERNATIONAL_DATE_LINE_WEST = 'Dateline Standard Time - (GMT-12:00) International Date Line West';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_GMT_STANDARD_TIME____GMT_GREENWICH_MEAN_TIME__DUBLIN_EDINBURGH_LISBON_LONDON,
            self::SOURCE_GREENWICH_STANDARD_TIME____GMT_MONROVIA_REYKJAVIK,
            self::SOURCE_W__EUROPE_STANDARD_TIME____GMT0100_AMSTERDAM_BERLIN_BERN_ROME_STOCKHOLM_VIENNA,
            self::SOURCE_CENTRAL_EUROPE_STANDARD_TIME____GMT0100_BELGRADE_BRATISLAVA_BUDAPEST_LJUBLJANA_PRAGUE,
            self::SOURCE_CENTRAL_EUROPEAN_STANDARD_TIME____GMT0100_SARAJEVO_SKOPJE_WARSAW_ZAGREB,
            self::SOURCE_W__CENTRAL_AFRICA_STANDARD_TIME____GMT0100_WEST_CENTRAL_AFRICA,
            self::SOURCE_GTB_STANDARD_TIME____GMT0200_ATHENS_BUCHAREST_ISTANBUL,
            self::SOURCE_MIDDLE_EAST_STANDARD_TIME____GMT0200_BEIRUT,
            self::SOURCE_EGYPT_STANDARD_TIME____GMT0200_CAIRO,
            self::SOURCE_SOUTH_AFRICA_STANDARD_TIME____GMT0200_HARARE_PRETORIA,
            self::SOURCE_FLE_STANDARD_TIME____GMT0200_HELSINKI_KYIV_RIGA_SOFIA_TALLINN_VILNIUS,
            self::SOURCE_ISRAEL_STANDARD_TIME____GMT0200_JERUSALEM,
            self::SOURCE_E__EUROPE_STANDARD_TIME____GMT0200_MINSK,
            self::SOURCE_NAMIBIA_STANDARD_TIME____GMT0200_WINDHOEK,
            self::SOURCE_ARABIC_STANDARD_TIME____GMT0300_BAGHDAD,
            self::SOURCE_ARAB_STANDARD_TIME____GMT0300_KUWAIT_RIYADH,
            self::SOURCE_RUSSIAN_STANDARD_TIME____GMT0300_MOSCOW_ST__PETERSBURG_VOLGOGRAD,
            self::SOURCE_E__AFRICA_STANDARD_TIME____GMT0300_NAIROBI,
            self::SOURCE_GEORGIAN_STANDARD_TIME____GMT0300_TBILISI,
            self::SOURCE_IRAN_STANDARD_TIME____GMT0330_TEHRAN,
            self::SOURCE_ARABIAN_STANDARD_TIME____GMT0400_ABU_DHABI_MUSCAT,
            self::SOURCE_AZERBAIJAN_STANDARD_TIME____GMT0400_BAKU,
            self::SOURCE_MAURITIUS_STANDARD_TIME____GMT0400_PORT_LOUIS,
            self::SOURCE_CAUCASUS_STANDARD_TIME____GMT0400_YEREVAN,
            self::SOURCE_AFGHANISTAN_STANDARD_TIME____GMT0430_KABUL,
            self::SOURCE_EKATERINBURG_STANDARD_TIME____GMT0500_EKATERINBURG,
            self::SOURCE_PAKISTAN_STANDARD_TIME____GMT0500_ISLAMABAD_KARACHI,
            self::SOURCE_WEST_ASIA_STANDARD_TIME____GMT0500_TASHKENT,
            self::SOURCE_INDIA_STANDARD_TIME____GMT0530_CHENNAI_KOLKATA_MUMBAI_NEW_DELHI,
            self::SOURCE_SRI_LANKA_STANDARD_TIME____GMT0530_SRI_JAYAWARDENEPURA,
            self::SOURCE_NEPAL_STANDARD_TIME____GMT0545_KATHMANDU,
            self::SOURCE_N__CENTRAL_ASIA_STANDARD_TIME____GMT0600_ALMATY_NOVOSIBIRSK,
            self::SOURCE_CENTRAL_ASIA_STANDARD_TIME____GMT0600_ASTANA_DHAKA,
            self::SOURCE_MYANMAR_STANDARD_TIME____GMT0630_YANGON__RANGOON,
            self::SOURCE_SE_ASIA_STANDARD_TIME____GMT0700_BANGKOK_HANOI_JAKARTA,
            self::SOURCE_NORTH_ASIA_STANDARD_TIME____GMT0700_KRASNOYARSK,
            self::SOURCE_CHINA_STANDARD_TIME____GMT0800_BEIJING_CHONGQING_HONG_KONG_URUMQI,
            self::SOURCE_NORTH_ASIA_EAST_STANDARD_TIME____GMT0800_IRKUTSK_ULAAN_BATAAR,
            self::SOURCE_SINGAPORE_STANDARD_TIME____GMT0800_KUALA_LUMPUR_SINGAPORE,
            self::SOURCE_W__AUSTRALIA_STANDARD_TIME____GMT0800_PERTH,
            self::SOURCE_TAIPEI_STANDARD_TIME____GMT0800_TAIPEI,
            self::SOURCE_TOKYO_STANDARD_TIME____GMT0900_OSAKA_SAPPORO_TOKYO,
            self::SOURCE_KOREA_STANDARD_TIME____GMT0900_SEOUL,
            self::SOURCE_YAKUTSK_STANDARD_TIME____GMT0900_YAKUTSK,
            self::SOURCE_CEN__AUSTRALIA_STANDARD_TIME____GMT0930_ADELAIDE,
            self::SOURCE_AUS_CENTRAL_STANDARD_TIME____GMT0930_DARWIN,
            self::SOURCE_E__AUSTRALIA_STANDARD_TIME____GMT1000_BRISBANE,
            self::SOURCE_AUS_EASTERN_STANDARD_TIME____GMT1000_CANBERRA_MELBOURNE_SYDNEY,
            self::SOURCE_WEST_PACIFIC_STANDARD_TIME____GMT1000_GUAM_PORT_MORESBY,
            self::SOURCE_TASMANIA_STANDARD_TIME____GMT1000_HOBART,
            self::SOURCE_VLADIVOSTOK_STANDARD_TIME____GMT1000_VLADIVOSTOK,
            self::SOURCE_CENTRAL_PACIFIC_STANDARD_TIME____GMT1100_MAGADAN_SOLOMON_IS__NEW_CALEDONIA,
            self::SOURCE_NEW_ZEALAND_STANDARD_TIME____GMT1200_AUCKLAND_WELLINGTON,
            self::SOURCE_FIJI_STANDARD_TIME____GMT1200_FIJI_KAMCHATKA_MARSHALL_IS,
            self::SOURCE_TONGA_STANDARD_TIME____GMT1300_NUKUALOFA,
            self::SOURCE_AZORES_STANDARD_TIME____GMT_0100_AZORES,
            self::SOURCE_CAPE_VERDE_STANDARD_TIME____GMT_0100_CAPE_VERDE_IS,
            self::SOURCE_MID_ATLANTIC_STANDARD_TIME____GMT_0200_MID_ATLANTIC,
            self::SOURCE_E__SOUTH_AMERICA_STANDARD_TIME____GMT_0300_BRASILIA,
            self::SOURCE_ARGENTINA_STANDARD_TIME____GMT_0300_BUENOS_AIRES,
            self::SOURCE_SA_EASTERN_STANDARD_TIME____GMT_0300_GEORGETOWN,
            self::SOURCE_GREENLAND_STANDARD_TIME____GMT_0300_GREENLAND,
            self::SOURCE_MONTEVIDEO_STANDARD_TIME____GMT_0300_MONTEVIDEO,
            self::SOURCE_NEWFOUNDLAND_STANDARD_TIME____GMT_0330_NEWFOUNDLAND,
            self::SOURCE_ATLANTIC_STANDARD_TIME____GMT_0400_ATLANTIC_TIME__CANADA,
            self::SOURCE_SA_WESTERN_STANDARD_TIME____GMT_0400_LA_PAZ,
            self::SOURCE_CENTRAL_BRAZILIAN_STANDARD_TIME____GMT_0400_MANAUS,
            self::SOURCE_PACIFIC_SA_STANDARD_TIME____GMT_0400_SANTIAGO,
            self::SOURCE_VENEZUELA_STANDARD_TIME____GMT_0430_CARACAS,
            self::SOURCE_SA_PACIFIC_STANDARD_TIME____GMT_0500_BOGOTA_LIMA_QUITO_RIO_BRANCO,
            self::SOURCE_EASTERN_STANDARD_TIME____GMT_0500_EASTERN_TIME__US__CANADA,
            self::SOURCE_US_EASTERN_STANDARD_TIME____GMT_0500_INDIANA__EAST,
            self::SOURCE_CENTRAL_AMERICA_STANDARD_TIME____GMT_0600_CENTRAL_AMERICA,
            self::SOURCE_CENTRAL_STANDARD_TIME____GMT_0600_CENTRAL_TIME__US__CANADA,
            self::SOURCE_CENTRAL_STANDARD_TIME__MEXICO____GMT_0600_GUADALAJARA_MEXICO_CITY_MONTERREY,
            self::SOURCE_CANADA_CENTRAL_STANDARD_TIME____GMT_0600_SASKATCHEWAN,
            self::SOURCE_US_MOUNTAIN_STANDARD_TIME____GMT_0700_ARIZONA,
            self::SOURCE_MOUNTAIN_STANDARD_TIME__MEXICO____GMT_0700_CHIHUAHUA_LA_PAZ_MAZATLAN,
            self::SOURCE_MOUNTAIN_STANDARD_TIME____GMT_0700_MOUNTAIN_TIME__US__CANADA,
            self::SOURCE_PACIFIC_STANDARD_TIME____GMT_0800_PACIFIC_TIME__US__CANADA,
            self::SOURCE_PACIFIC_STANDARD_TIME__MEXICO____GMT_0800_TIJUANA_BAJA_CALIFORNIA,
            self::SOURCE_ALASKAN_STANDARD_TIME____GMT_0900_ALASKA,
            self::SOURCE_HAWAIIAN_STANDARD_TIME____GMT_1000_HAWAII,
            self::SOURCE_SAMOA_STANDARD_TIME____GMT_1100_MIDWAY_ISLAND_SAMOA,
            self::SOURCE_DATELINE_STANDARD_TIME____GMT_1200_INTERNATIONAL_DATE_LINE_WEST,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetAllowableValues()
    {
        return [
            self::TARGET_GMT_STANDARD_TIME____GMT_GREENWICH_MEAN_TIME__DUBLIN_EDINBURGH_LISBON_LONDON,
            self::TARGET_GREENWICH_STANDARD_TIME____GMT_MONROVIA_REYKJAVIK,
            self::TARGET_W__EUROPE_STANDARD_TIME____GMT0100_AMSTERDAM_BERLIN_BERN_ROME_STOCKHOLM_VIENNA,
            self::TARGET_CENTRAL_EUROPE_STANDARD_TIME____GMT0100_BELGRADE_BRATISLAVA_BUDAPEST_LJUBLJANA_PRAGUE,
            self::TARGET_CENTRAL_EUROPEAN_STANDARD_TIME____GMT0100_SARAJEVO_SKOPJE_WARSAW_ZAGREB,
            self::TARGET_W__CENTRAL_AFRICA_STANDARD_TIME____GMT0100_WEST_CENTRAL_AFRICA,
            self::TARGET_GTB_STANDARD_TIME____GMT0200_ATHENS_BUCHAREST_ISTANBUL,
            self::TARGET_MIDDLE_EAST_STANDARD_TIME____GMT0200_BEIRUT,
            self::TARGET_EGYPT_STANDARD_TIME____GMT0200_CAIRO,
            self::TARGET_SOUTH_AFRICA_STANDARD_TIME____GMT0200_HARARE_PRETORIA,
            self::TARGET_FLE_STANDARD_TIME____GMT0200_HELSINKI_KYIV_RIGA_SOFIA_TALLINN_VILNIUS,
            self::TARGET_ISRAEL_STANDARD_TIME____GMT0200_JERUSALEM,
            self::TARGET_E__EUROPE_STANDARD_TIME____GMT0200_MINSK,
            self::TARGET_NAMIBIA_STANDARD_TIME____GMT0200_WINDHOEK,
            self::TARGET_ARABIC_STANDARD_TIME____GMT0300_BAGHDAD,
            self::TARGET_ARAB_STANDARD_TIME____GMT0300_KUWAIT_RIYADH,
            self::TARGET_RUSSIAN_STANDARD_TIME____GMT0300_MOSCOW_ST__PETERSBURG_VOLGOGRAD,
            self::TARGET_E__AFRICA_STANDARD_TIME____GMT0300_NAIROBI,
            self::TARGET_GEORGIAN_STANDARD_TIME____GMT0300_TBILISI,
            self::TARGET_IRAN_STANDARD_TIME____GMT0330_TEHRAN,
            self::TARGET_ARABIAN_STANDARD_TIME____GMT0400_ABU_DHABI_MUSCAT,
            self::TARGET_AZERBAIJAN_STANDARD_TIME____GMT0400_BAKU,
            self::TARGET_MAURITIUS_STANDARD_TIME____GMT0400_PORT_LOUIS,
            self::TARGET_CAUCASUS_STANDARD_TIME____GMT0400_YEREVAN,
            self::TARGET_AFGHANISTAN_STANDARD_TIME____GMT0430_KABUL,
            self::TARGET_EKATERINBURG_STANDARD_TIME____GMT0500_EKATERINBURG,
            self::TARGET_PAKISTAN_STANDARD_TIME____GMT0500_ISLAMABAD_KARACHI,
            self::TARGET_WEST_ASIA_STANDARD_TIME____GMT0500_TASHKENT,
            self::TARGET_INDIA_STANDARD_TIME____GMT0530_CHENNAI_KOLKATA_MUMBAI_NEW_DELHI,
            self::TARGET_SRI_LANKA_STANDARD_TIME____GMT0530_SRI_JAYAWARDENEPURA,
            self::TARGET_NEPAL_STANDARD_TIME____GMT0545_KATHMANDU,
            self::TARGET_N__CENTRAL_ASIA_STANDARD_TIME____GMT0600_ALMATY_NOVOSIBIRSK,
            self::TARGET_CENTRAL_ASIA_STANDARD_TIME____GMT0600_ASTANA_DHAKA,
            self::TARGET_MYANMAR_STANDARD_TIME____GMT0630_YANGON__RANGOON,
            self::TARGET_SE_ASIA_STANDARD_TIME____GMT0700_BANGKOK_HANOI_JAKARTA,
            self::TARGET_NORTH_ASIA_STANDARD_TIME____GMT0700_KRASNOYARSK,
            self::TARGET_CHINA_STANDARD_TIME____GMT0800_BEIJING_CHONGQING_HONG_KONG_URUMQI,
            self::TARGET_NORTH_ASIA_EAST_STANDARD_TIME____GMT0800_IRKUTSK_ULAAN_BATAAR,
            self::TARGET_SINGAPORE_STANDARD_TIME____GMT0800_KUALA_LUMPUR_SINGAPORE,
            self::TARGET_W__AUSTRALIA_STANDARD_TIME____GMT0800_PERTH,
            self::TARGET_TAIPEI_STANDARD_TIME____GMT0800_TAIPEI,
            self::TARGET_TOKYO_STANDARD_TIME____GMT0900_OSAKA_SAPPORO_TOKYO,
            self::TARGET_KOREA_STANDARD_TIME____GMT0900_SEOUL,
            self::TARGET_YAKUTSK_STANDARD_TIME____GMT0900_YAKUTSK,
            self::TARGET_CEN__AUSTRALIA_STANDARD_TIME____GMT0930_ADELAIDE,
            self::TARGET_AUS_CENTRAL_STANDARD_TIME____GMT0930_DARWIN,
            self::TARGET_E__AUSTRALIA_STANDARD_TIME____GMT1000_BRISBANE,
            self::TARGET_AUS_EASTERN_STANDARD_TIME____GMT1000_CANBERRA_MELBOURNE_SYDNEY,
            self::TARGET_WEST_PACIFIC_STANDARD_TIME____GMT1000_GUAM_PORT_MORESBY,
            self::TARGET_TASMANIA_STANDARD_TIME____GMT1000_HOBART,
            self::TARGET_VLADIVOSTOK_STANDARD_TIME____GMT1000_VLADIVOSTOK,
            self::TARGET_CENTRAL_PACIFIC_STANDARD_TIME____GMT1100_MAGADAN_SOLOMON_IS__NEW_CALEDONIA,
            self::TARGET_NEW_ZEALAND_STANDARD_TIME____GMT1200_AUCKLAND_WELLINGTON,
            self::TARGET_FIJI_STANDARD_TIME____GMT1200_FIJI_KAMCHATKA_MARSHALL_IS,
            self::TARGET_TONGA_STANDARD_TIME____GMT1300_NUKUALOFA,
            self::TARGET_AZORES_STANDARD_TIME____GMT_0100_AZORES,
            self::TARGET_CAPE_VERDE_STANDARD_TIME____GMT_0100_CAPE_VERDE_IS,
            self::TARGET_MID_ATLANTIC_STANDARD_TIME____GMT_0200_MID_ATLANTIC,
            self::TARGET_E__SOUTH_AMERICA_STANDARD_TIME____GMT_0300_BRASILIA,
            self::TARGET_ARGENTINA_STANDARD_TIME____GMT_0300_BUENOS_AIRES,
            self::TARGET_SA_EASTERN_STANDARD_TIME____GMT_0300_GEORGETOWN,
            self::TARGET_GREENLAND_STANDARD_TIME____GMT_0300_GREENLAND,
            self::TARGET_MONTEVIDEO_STANDARD_TIME____GMT_0300_MONTEVIDEO,
            self::TARGET_NEWFOUNDLAND_STANDARD_TIME____GMT_0330_NEWFOUNDLAND,
            self::TARGET_ATLANTIC_STANDARD_TIME____GMT_0400_ATLANTIC_TIME__CANADA,
            self::TARGET_SA_WESTERN_STANDARD_TIME____GMT_0400_LA_PAZ,
            self::TARGET_CENTRAL_BRAZILIAN_STANDARD_TIME____GMT_0400_MANAUS,
            self::TARGET_PACIFIC_SA_STANDARD_TIME____GMT_0400_SANTIAGO,
            self::TARGET_VENEZUELA_STANDARD_TIME____GMT_0430_CARACAS,
            self::TARGET_SA_PACIFIC_STANDARD_TIME____GMT_0500_BOGOTA_LIMA_QUITO_RIO_BRANCO,
            self::TARGET_EASTERN_STANDARD_TIME____GMT_0500_EASTERN_TIME__US__CANADA,
            self::TARGET_US_EASTERN_STANDARD_TIME____GMT_0500_INDIANA__EAST,
            self::TARGET_CENTRAL_AMERICA_STANDARD_TIME____GMT_0600_CENTRAL_AMERICA,
            self::TARGET_CENTRAL_STANDARD_TIME____GMT_0600_CENTRAL_TIME__US__CANADA,
            self::TARGET_CENTRAL_STANDARD_TIME__MEXICO____GMT_0600_GUADALAJARA_MEXICO_CITY_MONTERREY,
            self::TARGET_CANADA_CENTRAL_STANDARD_TIME____GMT_0600_SASKATCHEWAN,
            self::TARGET_US_MOUNTAIN_STANDARD_TIME____GMT_0700_ARIZONA,
            self::TARGET_MOUNTAIN_STANDARD_TIME__MEXICO____GMT_0700_CHIHUAHUA_LA_PAZ_MAZATLAN,
            self::TARGET_MOUNTAIN_STANDARD_TIME____GMT_0700_MOUNTAIN_TIME__US__CANADA,
            self::TARGET_PACIFIC_STANDARD_TIME____GMT_0800_PACIFIC_TIME__US__CANADA,
            self::TARGET_PACIFIC_STANDARD_TIME__MEXICO____GMT_0800_TIJUANA_BAJA_CALIFORNIA,
            self::TARGET_ALASKAN_STANDARD_TIME____GMT_0900_ALASKA,
            self::TARGET_HAWAIIAN_STANDARD_TIME____GMT_1000_HAWAII,
            self::TARGET_SAMOA_STANDARD_TIME____GMT_1100_MIDWAY_ISLAND_SAMOA,
            self::TARGET_DATELINE_STANDARD_TIME____GMT_1200_INTERNATIONAL_DATE_LINE_WEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = $data['input'] ?? null;
        $this->container['source'] = $data['source'] ?? 'GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London';
        $this->container['target'] = $data['target'] ?? 'GMT Standard Time - (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London';
        $this->container['format'] = $data['format'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input'] === null) {
            $invalidProperties[] = "'input' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['target'] === null) {
            $invalidProperties[] = "'target' can't be null";
        }
        $allowedValues = $this->getTargetAllowableValues();
        if (!is_null($this->container['target']) && !in_array($this->container['target'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target', must be one of '%s'",
                $this->container['target'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return string
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string $input Source date and time
     *
     * @return self
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string $target target
     *
     * @return self
     */
    public function setTarget($target)
    {
        $allowedValues = $this->getTargetAllowableValues();
        if (!in_array($target, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target', must be one of '%s'",
                    $target,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target'] = $target;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string|null $format Display format (defaults to 'yyyy-MM-dd HH:mm:ss')
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


