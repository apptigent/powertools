<?php
/**
 * InputMarketIndex
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InputMarketIndex Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InputMarketIndex implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inputMarketIndex';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol' => 'string',
        'date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'symbol' => null,
        'date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol' => 'symbol',
        'date' => 'date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol' => 'setSymbol',
        'date' => 'setDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol' => 'getSymbol',
        'date' => 'getDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SYMBOL_DJA_INDX__DOW_JONES_COMPOSITE_AVERAGE = 'DJA.INDX (Dow Jones Composite Average)';
    const SYMBOL_DJI_INDX__DOW_JONES_INDUSTRIAL_AVERAGE = 'DJI.INDX (Dow Jones Industrial Average)';
    const SYMBOL_DJT_INDX__DOW_JONES_TRANSPORTATION = 'DJT.INDX (Dow Jones Transportation)';
    const SYMBOL_DJUS_INDX__DOW_JONES_US = 'DJUS.INDX (Dow Jones US)';
    const SYMBOL_DXY_INDX__US_DOLLAR_INDEX = 'DXY.INDX (US Dollar Index)';
    const SYMBOL_GDOW_INDX__GLOBAL_DOW_USD = 'GDOW.INDX (Global Dow USD)';
    const SYMBOL_NY_INDX__NYSE_US_100_INDEX = 'NY.INDX (NYSE US 100 Index)';
    const SYMBOL_NYA_INDX__NYSE_COMPOSITE = 'NYA.INDX (NYSE Composite)';
    const SYMBOL_IXIC_INDX__NASDAQ_COMPOSITE = 'IXIC.INDX (NASDAQ Composite)';
    const SYMBOL_NDX_INDX__NASDAQ_100 = 'NDX.INDX (NASDAQ 100)';
    const SYMBOL_GSPC_INDX__SP_500 = 'GSPC.INDX (S&P 500)';
    const SYMBOL_ES_INDX__SP_500_FUTURES = 'ES.INDX (S&P 500 Futures)';
    const SYMBOL_MID_INDX__SP_MIDCAP_400 = 'MID.INDX (S&P Midcap 400)';
    const SYMBOL_GPTSE_INDX__SP_TSX_COMPOSITE_INDEX__CANADA = 'GPTSE.INDX (S&P TSX Composite Index [Canada])';
    const SYMBOL_FTSE_INDX__FTSE_100_INDEX__UK = 'FTSE.INDX (FTSE 100 Index [UK])';
    const SYMBOL_CDAXX_INDX__DAX_COMPOSITE_INDEX__GERMANY = 'CDAXX.INDX (DAX Composite Index [Germany])';
    const SYMBOL_GDAXI_INDX__DAX_INDEX__GERMANY = 'GDAXI.INDX (DAX Index [Germany])';
    const SYMBOL_HSCE_INDX__HANG_SENG_CHINA_ENTERPRISE__CEI = 'HSCE.INDX (Hang Seng China Enterprise (CEI))';
    const SYMBOL_HSI_INDX__HANG_SENG_INDEX__HONG_KONG = 'HSI.INDX (Hang Seng Index [Hong Kong])';
    const SYMBOL_N100_INDX__EURO_NEXT_100 = 'N100.INDX (EuroNext 100)';
    const SYMBOL_N225_INDX__NIKKEI_225_INDEX = 'N225.INDX (Nikkei 225 Index)';
    const SYMBOL_RTSI_INDX__RTSI_INDEX__RUSSIA = 'RTSI.INDX (RTSI Index [Russia])';
    const SYMBOL_SSEC_INDX__SHANGHAI_COMPOSITE = 'SSEC.INDX (Shanghai Composite)';
    const SYMBOL_SSMI_INDX__SWISS_MARKET_INDEX = 'SSMI.INDX (Swiss Market Index)';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSymbolAllowableValues()
    {
        return [
            self::SYMBOL_DJA_INDX__DOW_JONES_COMPOSITE_AVERAGE,
            self::SYMBOL_DJI_INDX__DOW_JONES_INDUSTRIAL_AVERAGE,
            self::SYMBOL_DJT_INDX__DOW_JONES_TRANSPORTATION,
            self::SYMBOL_DJUS_INDX__DOW_JONES_US,
            self::SYMBOL_DXY_INDX__US_DOLLAR_INDEX,
            self::SYMBOL_GDOW_INDX__GLOBAL_DOW_USD,
            self::SYMBOL_NY_INDX__NYSE_US_100_INDEX,
            self::SYMBOL_NYA_INDX__NYSE_COMPOSITE,
            self::SYMBOL_IXIC_INDX__NASDAQ_COMPOSITE,
            self::SYMBOL_NDX_INDX__NASDAQ_100,
            self::SYMBOL_GSPC_INDX__SP_500,
            self::SYMBOL_ES_INDX__SP_500_FUTURES,
            self::SYMBOL_MID_INDX__SP_MIDCAP_400,
            self::SYMBOL_GPTSE_INDX__SP_TSX_COMPOSITE_INDEX__CANADA,
            self::SYMBOL_FTSE_INDX__FTSE_100_INDEX__UK,
            self::SYMBOL_CDAXX_INDX__DAX_COMPOSITE_INDEX__GERMANY,
            self::SYMBOL_GDAXI_INDX__DAX_INDEX__GERMANY,
            self::SYMBOL_HSCE_INDX__HANG_SENG_CHINA_ENTERPRISE__CEI,
            self::SYMBOL_HSI_INDX__HANG_SENG_INDEX__HONG_KONG,
            self::SYMBOL_N100_INDX__EURO_NEXT_100,
            self::SYMBOL_N225_INDX__NIKKEI_225_INDEX,
            self::SYMBOL_RTSI_INDX__RTSI_INDEX__RUSSIA,
            self::SYMBOL_SSEC_INDX__SHANGHAI_COMPOSITE,
            self::SYMBOL_SSMI_INDX__SWISS_MARKET_INDEX,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol'] = $data['symbol'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['symbol'] === null) {
            $invalidProperties[] = "'symbol' can't be null";
        }
        $allowedValues = $this->getSymbolAllowableValues();
        if (!is_null($this->container['symbol']) && !in_array($this->container['symbol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'symbol', must be one of '%s'",
                $this->container['symbol'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol Market index
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        $allowedValues = $this->getSymbolAllowableValues();
        if (!in_array($symbol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'symbol', must be one of '%s'",
                    $symbol,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date Date (yyyy-MM-dd, leave empty for last trading day)
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


