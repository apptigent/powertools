<?php
/**
 * InputConvertSpeed
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InputConvertSpeed Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InputConvertSpeed implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inputConvertSpeed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input' => 'float',
        'source' => 'string',
        'target' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input' => null,
        'source' => null,
        'target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
        'source' => 'source',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'source' => 'setSource',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'source' => 'getSource',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SOURCE_CENTIMETER_PER_HOUR = 'CentimeterPerHour';
    const SOURCE_CENTIMETER_PER_MINUTE = 'CentimeterPerMinute';
    const SOURCE_CENTIMETER_PER_SECOND = 'CentimeterPerSecond';
    const SOURCE_DECIMETER_PER_MINUTE = 'DecimeterPerMinute';
    const SOURCE_DECIMETER_PER_SECOND = 'DecimeterPerSecond';
    const SOURCE_FOOT_PER_HOUR = 'FootPerHour';
    const SOURCE_FOOT_PER_MINUTE = 'FootPerMinute';
    const SOURCE_FOOT_PER_SECOND = 'FootPerSecond';
    const SOURCE_INCH_PER_HOUR = 'InchPerHour';
    const SOURCE_INCH_PER_MINUTE = 'InchPerMinute';
    const SOURCE_INCH_PER_SECOND = 'InchPerSecond';
    const SOURCE_KILOMETER_PER_HOUR = 'KilometerPerHour';
    const SOURCE_KILOMETER_PER_MINUTE = 'KilometerPerMinute';
    const SOURCE_KILOMETER_PER_SECOND = 'KilometerPerSecond';
    const SOURCE_KNOT = 'Knot';
    const SOURCE_METER_PER_HOUR = 'MeterPerHour';
    const SOURCE_METER_PER_MINUTE = 'MeterPerMinute';
    const SOURCE_METER_PER_SECOND = 'MeterPerSecond';
    const SOURCE_MICROMETER_PER_MINUTE = 'MicrometerPerMinute';
    const SOURCE_MICROMETER_PER_SECOND = 'MicrometerPerSecond';
    const SOURCE_MILE_PER_HOUR = 'MilePerHour';
    const SOURCE_MILLIMETER_PER_HOUR = 'MillimeterPerHour';
    const SOURCE_MILLIMETER_PER_MINUTE = 'MillimeterPerMinute';
    const SOURCE_MILLIMETER_PER_SECOND = 'MillimeterPerSecond';
    const SOURCE_NANOMETER_PER_MINUTE = 'NanometerPerMinute';
    const SOURCE_NANOMETER_PER_SECOND = 'NanometerPerSecond';
    const SOURCE_YARD_PER_HOUR = 'YardPerHour';
    const SOURCE_YARD_PER_MINUTE = 'YardPerMinute';
    const SOURCE_YARD_PER_SECOND = 'YardPerSecond';
    const TARGET_CENTIMETER_PER_HOUR = 'CentimeterPerHour';
    const TARGET_CENTIMETER_PER_MINUTE = 'CentimeterPerMinute';
    const TARGET_CENTIMETER_PER_SECOND = 'CentimeterPerSecond';
    const TARGET_DECIMETER_PER_MINUTE = 'DecimeterPerMinute';
    const TARGET_DECIMETER_PER_SECOND = 'DecimeterPerSecond';
    const TARGET_FOOT_PER_HOUR = 'FootPerHour';
    const TARGET_FOOT_PER_MINUTE = 'FootPerMinute';
    const TARGET_FOOT_PER_SECOND = 'FootPerSecond';
    const TARGET_INCH_PER_HOUR = 'InchPerHour';
    const TARGET_INCH_PER_MINUTE = 'InchPerMinute';
    const TARGET_INCH_PER_SECOND = 'InchPerSecond';
    const TARGET_KILOMETER_PER_HOUR = 'KilometerPerHour';
    const TARGET_KILOMETER_PER_MINUTE = 'KilometerPerMinute';
    const TARGET_KILOMETER_PER_SECOND = 'KilometerPerSecond';
    const TARGET_KNOT = 'Knot';
    const TARGET_METER_PER_HOUR = 'MeterPerHour';
    const TARGET_METER_PER_MINUTE = 'MeterPerMinute';
    const TARGET_METER_PER_SECOND = 'MeterPerSecond';
    const TARGET_MICROMETER_PER_MINUTE = 'MicrometerPerMinute';
    const TARGET_MICROMETER_PER_SECOND = 'MicrometerPerSecond';
    const TARGET_MILE_PER_HOUR = 'MilePerHour';
    const TARGET_MILLIMETER_PER_HOUR = 'MillimeterPerHour';
    const TARGET_MILLIMETER_PER_MINUTE = 'MillimeterPerMinute';
    const TARGET_MILLIMETER_PER_SECOND = 'MillimeterPerSecond';
    const TARGET_NANOMETER_PER_MINUTE = 'NanometerPerMinute';
    const TARGET_NANOMETER_PER_SECOND = 'NanometerPerSecond';
    const TARGET_YARD_PER_HOUR = 'YardPerHour';
    const TARGET_YARD_PER_MINUTE = 'YardPerMinute';
    const TARGET_YARD_PER_SECOND = 'YardPerSecond';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_CENTIMETER_PER_HOUR,
            self::SOURCE_CENTIMETER_PER_MINUTE,
            self::SOURCE_CENTIMETER_PER_SECOND,
            self::SOURCE_DECIMETER_PER_MINUTE,
            self::SOURCE_DECIMETER_PER_SECOND,
            self::SOURCE_FOOT_PER_HOUR,
            self::SOURCE_FOOT_PER_MINUTE,
            self::SOURCE_FOOT_PER_SECOND,
            self::SOURCE_INCH_PER_HOUR,
            self::SOURCE_INCH_PER_MINUTE,
            self::SOURCE_INCH_PER_SECOND,
            self::SOURCE_KILOMETER_PER_HOUR,
            self::SOURCE_KILOMETER_PER_MINUTE,
            self::SOURCE_KILOMETER_PER_SECOND,
            self::SOURCE_KNOT,
            self::SOURCE_METER_PER_HOUR,
            self::SOURCE_METER_PER_MINUTE,
            self::SOURCE_METER_PER_SECOND,
            self::SOURCE_MICROMETER_PER_MINUTE,
            self::SOURCE_MICROMETER_PER_SECOND,
            self::SOURCE_MILE_PER_HOUR,
            self::SOURCE_MILLIMETER_PER_HOUR,
            self::SOURCE_MILLIMETER_PER_MINUTE,
            self::SOURCE_MILLIMETER_PER_SECOND,
            self::SOURCE_NANOMETER_PER_MINUTE,
            self::SOURCE_NANOMETER_PER_SECOND,
            self::SOURCE_YARD_PER_HOUR,
            self::SOURCE_YARD_PER_MINUTE,
            self::SOURCE_YARD_PER_SECOND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetAllowableValues()
    {
        return [
            self::TARGET_CENTIMETER_PER_HOUR,
            self::TARGET_CENTIMETER_PER_MINUTE,
            self::TARGET_CENTIMETER_PER_SECOND,
            self::TARGET_DECIMETER_PER_MINUTE,
            self::TARGET_DECIMETER_PER_SECOND,
            self::TARGET_FOOT_PER_HOUR,
            self::TARGET_FOOT_PER_MINUTE,
            self::TARGET_FOOT_PER_SECOND,
            self::TARGET_INCH_PER_HOUR,
            self::TARGET_INCH_PER_MINUTE,
            self::TARGET_INCH_PER_SECOND,
            self::TARGET_KILOMETER_PER_HOUR,
            self::TARGET_KILOMETER_PER_MINUTE,
            self::TARGET_KILOMETER_PER_SECOND,
            self::TARGET_KNOT,
            self::TARGET_METER_PER_HOUR,
            self::TARGET_METER_PER_MINUTE,
            self::TARGET_METER_PER_SECOND,
            self::TARGET_MICROMETER_PER_MINUTE,
            self::TARGET_MICROMETER_PER_SECOND,
            self::TARGET_MILE_PER_HOUR,
            self::TARGET_MILLIMETER_PER_HOUR,
            self::TARGET_MILLIMETER_PER_MINUTE,
            self::TARGET_MILLIMETER_PER_SECOND,
            self::TARGET_NANOMETER_PER_MINUTE,
            self::TARGET_NANOMETER_PER_SECOND,
            self::TARGET_YARD_PER_HOUR,
            self::TARGET_YARD_PER_MINUTE,
            self::TARGET_YARD_PER_SECOND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = $data['input'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['target'] = $data['target'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input'] === null) {
            $invalidProperties[] = "'input' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['target'] === null) {
            $invalidProperties[] = "'target' can't be null";
        }
        $allowedValues = $this->getTargetAllowableValues();
        if (!is_null($this->container['target']) && !in_array($this->container['target'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target', must be one of '%s'",
                $this->container['target'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return float
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param float $input input
     *
     * @return self
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string $target target
     *
     * @return self
     */
    public function setTarget($target)
    {
        $allowedValues = $this->getTargetAllowableValues();
        if (!in_array($target, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target', must be one of '%s'",
                    $target,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


