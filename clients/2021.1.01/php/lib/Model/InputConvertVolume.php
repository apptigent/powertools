<?php
/**
 * InputConvertVolume
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InputConvertVolume Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InputConvertVolume implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inputConvertVolume';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input' => 'float',
        'source' => 'string',
        'target' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input' => null,
        'source' => null,
        'target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
        'source' => 'source',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'source' => 'setSource',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'source' => 'getSource',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SOURCE_CENTILITER = 'Centiliter';
    const SOURCE_CUBIC_CENTIMETER = 'CubicCentimeter';
    const SOURCE_CUBIC_DECIMETER = 'CubicDecimeter';
    const SOURCE_CUBIC_FOOT = 'CubicFoot';
    const SOURCE_CUBIC_HECTOMETER = 'CubicHectometer';
    const SOURCE_CUBIC_INCH = 'CubicInch';
    const SOURCE_CUBIC_KILOMETER = 'CubicKilometer';
    const SOURCE_CUBIC_METER = 'CubicMeter';
    const SOURCE_CUBIC_MILLIMETER = 'CubicMillimeter';
    const SOURCE_CUBIC_YARD = 'CubicYard';
    const SOURCE_DECILITER = 'Deciliter';
    const SOURCE_IMPERIAL_BEER_BARREL = 'ImperialBeerBarrel';
    const SOURCE_IMPERIAL_GALLON = 'ImperialGallon';
    const SOURCE_IMPERIAL_OUNCE = 'ImperialOunce';
    const SOURCE_IMPERIAL_PINT = 'ImperialPint';
    const SOURCE_KILOLITER = 'Kiloliter';
    const SOURCE_LITER = 'Liter';
    const SOURCE_MICROLITER = 'Microliter';
    const SOURCE_MILLILITER = 'Milliliter';
    const SOURCE_GALLON = 'Gallon';
    const SOURCE_CUP = 'Cup';
    const SOURCE_OUNCE = 'Ounce';
    const SOURCE_PINT = 'Pint';
    const SOURCE_QUART = 'Quart';
    const SOURCE_TABLESPOON = 'Tablespoon';
    const SOURCE_TEASPOON = 'Teaspoon';
    const TARGET_CENTILITER = 'Centiliter';
    const TARGET_CUBIC_CENTIMETER = 'CubicCentimeter';
    const TARGET_CUBIC_DECIMETER = 'CubicDecimeter';
    const TARGET_CUBIC_FOOT = 'CubicFoot';
    const TARGET_CUBIC_HECTOMETER = 'CubicHectometer';
    const TARGET_CUBIC_INCH = 'CubicInch';
    const TARGET_CUBIC_KILOMETER = 'CubicKilometer';
    const TARGET_CUBIC_METER = 'CubicMeter';
    const TARGET_CUBIC_MILLIMETER = 'CubicMillimeter';
    const TARGET_CUBIC_YARD = 'CubicYard';
    const TARGET_DECILITER = 'Deciliter';
    const TARGET_IMPERIAL_BEER_BARREL = 'ImperialBeerBarrel';
    const TARGET_IMPERIAL_GALLON = 'ImperialGallon';
    const TARGET_IMPERIAL_OUNCE = 'ImperialOunce';
    const TARGET_IMPERIAL_PINT = 'ImperialPint';
    const TARGET_KILOLITER = 'Kiloliter';
    const TARGET_LITER = 'Liter';
    const TARGET_MICROLITER = 'Microliter';
    const TARGET_MILLILITER = 'Milliliter';
    const TARGET_GALLON = 'Gallon';
    const TARGET_CUP = 'Cup';
    const TARGET_OUNCE = 'Ounce';
    const TARGET_PINT = 'Pint';
    const TARGET_QUART = 'Quart';
    const TARGET_TABLESPOON = 'Tablespoon';
    const TARGET_TEASPOON = 'Teaspoon';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_CENTILITER,
            self::SOURCE_CUBIC_CENTIMETER,
            self::SOURCE_CUBIC_DECIMETER,
            self::SOURCE_CUBIC_FOOT,
            self::SOURCE_CUBIC_HECTOMETER,
            self::SOURCE_CUBIC_INCH,
            self::SOURCE_CUBIC_KILOMETER,
            self::SOURCE_CUBIC_METER,
            self::SOURCE_CUBIC_MILLIMETER,
            self::SOURCE_CUBIC_YARD,
            self::SOURCE_DECILITER,
            self::SOURCE_IMPERIAL_BEER_BARREL,
            self::SOURCE_IMPERIAL_GALLON,
            self::SOURCE_IMPERIAL_OUNCE,
            self::SOURCE_IMPERIAL_PINT,
            self::SOURCE_KILOLITER,
            self::SOURCE_LITER,
            self::SOURCE_MICROLITER,
            self::SOURCE_MILLILITER,
            self::SOURCE_GALLON,
            self::SOURCE_CUP,
            self::SOURCE_OUNCE,
            self::SOURCE_PINT,
            self::SOURCE_QUART,
            self::SOURCE_TABLESPOON,
            self::SOURCE_TEASPOON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTargetAllowableValues()
    {
        return [
            self::TARGET_CENTILITER,
            self::TARGET_CUBIC_CENTIMETER,
            self::TARGET_CUBIC_DECIMETER,
            self::TARGET_CUBIC_FOOT,
            self::TARGET_CUBIC_HECTOMETER,
            self::TARGET_CUBIC_INCH,
            self::TARGET_CUBIC_KILOMETER,
            self::TARGET_CUBIC_METER,
            self::TARGET_CUBIC_MILLIMETER,
            self::TARGET_CUBIC_YARD,
            self::TARGET_DECILITER,
            self::TARGET_IMPERIAL_BEER_BARREL,
            self::TARGET_IMPERIAL_GALLON,
            self::TARGET_IMPERIAL_OUNCE,
            self::TARGET_IMPERIAL_PINT,
            self::TARGET_KILOLITER,
            self::TARGET_LITER,
            self::TARGET_MICROLITER,
            self::TARGET_MILLILITER,
            self::TARGET_GALLON,
            self::TARGET_CUP,
            self::TARGET_OUNCE,
            self::TARGET_PINT,
            self::TARGET_QUART,
            self::TARGET_TABLESPOON,
            self::TARGET_TEASPOON,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = $data['input'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['target'] = $data['target'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input'] === null) {
            $invalidProperties[] = "'input' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['target'] === null) {
            $invalidProperties[] = "'target' can't be null";
        }
        $allowedValues = $this->getTargetAllowableValues();
        if (!is_null($this->container['target']) && !in_array($this->container['target'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'target', must be one of '%s'",
                $this->container['target'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return float
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param float $input input
     *
     * @return self
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets target
     *
     * @return string
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param string $target target
     *
     * @return self
     */
    public function setTarget($target)
    {
        $allowedValues = $this->getTargetAllowableValues();
        if (!in_array($target, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'target', must be one of '%s'",
                    $target,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


