<?php
/**
 * InputDateTimeFormat
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InputDateTimeFormat Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class InputDateTimeFormat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inputDateTimeFormat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'input' => 'string',
        'culture' => 'string',
        'format' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'input' => null,
        'culture' => null,
        'format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input' => 'input',
        'culture' => 'culture',
        'format' => 'format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input' => 'setInput',
        'culture' => 'setCulture',
        'format' => 'setFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input' => 'getInput',
        'culture' => 'getCulture',
        'format' => 'getFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CULTURE_EN_US = 'en-US';
    const CULTURE_AF_ZA = 'af-ZA';
    const CULTURE_AR_AE = 'ar-AE';
    const CULTURE_AR_BH = 'ar-BH';
    const CULTURE_AR_DZ = 'ar-DZ';
    const CULTURE_AR_EG = 'ar-EG';
    const CULTURE_AR_IQ = 'ar-IQ';
    const CULTURE_AR_JO = 'ar-JO';
    const CULTURE_AR_KW = 'ar-KW';
    const CULTURE_AR_LB = 'ar-LB';
    const CULTURE_AR_LY = 'ar-LY';
    const CULTURE_AR_MA = 'ar-MA';
    const CULTURE_AR_OM = 'ar-OM';
    const CULTURE_AR_QA = 'ar-QA';
    const CULTURE_AR_SA = 'ar-SA';
    const CULTURE_AR_SY = 'ar-SY';
    const CULTURE_AR_TN = 'ar-TN';
    const CULTURE_AR_YE = 'ar-YE';
    const CULTURE_AZ_AZ = 'az-AZ';
    const CULTURE_BE_BY = 'be-BY';
    const CULTURE_BG_BG = 'bg-BG';
    const CULTURE_BS_BA = 'bs-BA';
    const CULTURE_CA_ES = 'ca-ES';
    const CULTURE_CS_CZ = 'cs-CZ';
    const CULTURE_CY_GB = 'cy-GB';
    const CULTURE_DA_DK = 'da-DK';
    const CULTURE_DE_AT = 'de-AT';
    const CULTURE_DE_CH = 'de-CH';
    const CULTURE_DE_DE = 'de-DE';
    const CULTURE_DE_LI = 'de-LI';
    const CULTURE_DE_LU = 'de-LU';
    const CULTURE_EL_GR = 'el-GR';
    const CULTURE_EN_AU = 'en-AU';
    const CULTURE_EN_BZ = 'en-BZ';
    const CULTURE_EN_CA = 'en-CA';
    const CULTURE_EN_CB = 'en-CB';
    const CULTURE_EN_GB = 'en-GB';
    const CULTURE_EN_IE = 'en-IE';
    const CULTURE_EN_JM = 'en-JM';
    const CULTURE_EN_NZ = 'en-NZ';
    const CULTURE_EN_PH = 'en-PH';
    const CULTURE_EN_TT = 'en-TT';
    const CULTURE_EN_ZA = 'en-ZA';
    const CULTURE_EN_ZW = 'en-ZW';
    const CULTURE_ES_AR = 'es-AR';
    const CULTURE_ES_BO = 'es-BO';
    const CULTURE_ES_CL = 'es-CL';
    const CULTURE_ES_CO = 'es-CO';
    const CULTURE_ES_CR = 'es-CR';
    const CULTURE_ES_DO = 'es-DO';
    const CULTURE_ES_EC = 'es-EC';
    const CULTURE_ES_ES = 'es-ES';
    const CULTURE_ES_GT = 'es-GT';
    const CULTURE_ES_HN = 'es-HN';
    const CULTURE_ES_MX = 'es-MX';
    const CULTURE_ES_NI = 'es-NI';
    const CULTURE_ES_PA = 'es-PA';
    const CULTURE_ES_PE = 'es-PE';
    const CULTURE_ES_PR = 'es-PR';
    const CULTURE_ES_PY = 'es-PY';
    const CULTURE_ES_SV = 'es-SV';
    const CULTURE_ES_UY = 'es-UY';
    const CULTURE_ES_VE = 'es-VE';
    const CULTURE_ET_EE = 'et-EE';
    const CULTURE_EU_ES = 'eu-ES';
    const CULTURE_FA_IR = 'fa-IR';
    const CULTURE_FI_FI = 'fi-FI';
    const CULTURE_FO_FO = 'fo-FO';
    const CULTURE_FR_BE = 'fr-BE';
    const CULTURE_FR_CA = 'fr-CA';
    const CULTURE_FR_CH = 'fr-CH';
    const CULTURE_FR_FR = 'fr-FR';
    const CULTURE_FR_LU = 'fr-LU';
    const CULTURE_FR_MC = 'fr-MC';
    const CULTURE_GL_ES = 'gl-ES';
    const CULTURE_GU_IN = 'gu-IN';
    const CULTURE_HE_IL = 'he-IL';
    const CULTURE_HI_IN = 'hi-IN';
    const CULTURE_HR_BA = 'hr-BA';
    const CULTURE_HR_HR = 'hr-HR';
    const CULTURE_HU_HU = 'hu-HU';
    const CULTURE_HY_AM = 'hy-AM';
    const CULTURE_ID_ID = 'id-ID';
    const CULTURE_IS_IS = 'is-IS';
    const CULTURE_IT_CH = 'it-CH';
    const CULTURE_IT_IT = 'it-IT';
    const CULTURE_JA_JP = 'ja-JP';
    const CULTURE_KA_GE = 'ka-GE';
    const CULTURE_KK_KZ = 'kk-KZ';
    const CULTURE_KN_IN = 'kn-IN';
    const CULTURE_KO_KR = 'ko-KR';
    const CULTURE_KY_KG = 'ky-KG';
    const CULTURE_LT_LT = 'lt-LT';
    const CULTURE_LV_LV = 'lv-LV';
    const CULTURE_MI_NZ = 'mi-NZ';
    const CULTURE_MN_MN = 'mn-MN';
    const CULTURE_MR_IN = 'mr-IN';
    const CULTURE_MS_BN = 'ms-BN';
    const CULTURE_MS_MY = 'ms-MY';
    const CULTURE_MT_MT = 'mt-MT';
    const CULTURE_NL_BE = 'nl-BE';
    const CULTURE_NL_NL = 'nl-NL';
    const CULTURE_NN_NO = 'nn-NO';
    const CULTURE_NS_ZA = 'ns-ZA';
    const CULTURE_PA_IN = 'pa-IN';
    const CULTURE_PL_PL = 'pl-PL';
    const CULTURE_PS_AR = 'ps-AR';
    const CULTURE_PT_BR = 'pt-BR';
    const CULTURE_PT_PT = 'pt-PT';
    const CULTURE_RO_RO = 'ro-RO';
    const CULTURE_RU_RU = 'ru-RU';
    const CULTURE_SA_IN = 'sa-IN';
    const CULTURE_SK_SK = 'sk-SK';
    const CULTURE_SL_SI = 'sl-SI';
    const CULTURE_SQ_AL = 'sq-AL';
    const CULTURE_SR_BA = 'sr-BA';
    const CULTURE_SR_SP = 'sr-SP';
    const CULTURE_SV_FI = 'sv-FI';
    const CULTURE_SV_SE = 'sv-SE';
    const CULTURE_SW_KE = 'sw-KE';
    const CULTURE_TA_IN = 'ta-IN';
    const CULTURE_TE_IN = 'te-IN';
    const CULTURE_TH_TH = 'th-TH';
    const CULTURE_TL_PH = 'tl-PH';
    const CULTURE_TN_ZA = 'tn-ZA';
    const CULTURE_TR_TR = 'tr-TR';
    const CULTURE_UK_UA = 'uk-UA';
    const CULTURE_UR_PK = 'ur-PK';
    const CULTURE_UZ_UZ = 'uz-UZ';
    const CULTURE_VI_VN = 'vi-VN';
    const CULTURE_ZH_CN = 'zh-CN';
    const CULTURE_ZH_HK = 'zh-HK';
    const CULTURE_ZH_MO = 'zh-MO';
    const CULTURE_ZH_SG = 'zh-SG';
    const CULTURE_ZH_TW = 'zh-TW';
    const CULTURE_ZU_ZA = 'zu-ZA';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCultureAllowableValues()
    {
        return [
            self::CULTURE_EN_US,
            self::CULTURE_AF_ZA,
            self::CULTURE_AR_AE,
            self::CULTURE_AR_BH,
            self::CULTURE_AR_DZ,
            self::CULTURE_AR_EG,
            self::CULTURE_AR_IQ,
            self::CULTURE_AR_JO,
            self::CULTURE_AR_KW,
            self::CULTURE_AR_LB,
            self::CULTURE_AR_LY,
            self::CULTURE_AR_MA,
            self::CULTURE_AR_OM,
            self::CULTURE_AR_QA,
            self::CULTURE_AR_SA,
            self::CULTURE_AR_SY,
            self::CULTURE_AR_TN,
            self::CULTURE_AR_YE,
            self::CULTURE_AZ_AZ,
            self::CULTURE_BE_BY,
            self::CULTURE_BG_BG,
            self::CULTURE_BS_BA,
            self::CULTURE_CA_ES,
            self::CULTURE_CS_CZ,
            self::CULTURE_CY_GB,
            self::CULTURE_DA_DK,
            self::CULTURE_DE_AT,
            self::CULTURE_DE_CH,
            self::CULTURE_DE_DE,
            self::CULTURE_DE_LI,
            self::CULTURE_DE_LU,
            self::CULTURE_EL_GR,
            self::CULTURE_EN_AU,
            self::CULTURE_EN_BZ,
            self::CULTURE_EN_CA,
            self::CULTURE_EN_CB,
            self::CULTURE_EN_GB,
            self::CULTURE_EN_IE,
            self::CULTURE_EN_JM,
            self::CULTURE_EN_NZ,
            self::CULTURE_EN_PH,
            self::CULTURE_EN_TT,
            self::CULTURE_EN_ZA,
            self::CULTURE_EN_ZW,
            self::CULTURE_ES_AR,
            self::CULTURE_ES_BO,
            self::CULTURE_ES_CL,
            self::CULTURE_ES_CO,
            self::CULTURE_ES_CR,
            self::CULTURE_ES_DO,
            self::CULTURE_ES_EC,
            self::CULTURE_ES_ES,
            self::CULTURE_ES_GT,
            self::CULTURE_ES_HN,
            self::CULTURE_ES_MX,
            self::CULTURE_ES_NI,
            self::CULTURE_ES_PA,
            self::CULTURE_ES_PE,
            self::CULTURE_ES_PR,
            self::CULTURE_ES_PY,
            self::CULTURE_ES_SV,
            self::CULTURE_ES_UY,
            self::CULTURE_ES_VE,
            self::CULTURE_ET_EE,
            self::CULTURE_EU_ES,
            self::CULTURE_FA_IR,
            self::CULTURE_FI_FI,
            self::CULTURE_FO_FO,
            self::CULTURE_FR_BE,
            self::CULTURE_FR_CA,
            self::CULTURE_FR_CH,
            self::CULTURE_FR_FR,
            self::CULTURE_FR_LU,
            self::CULTURE_FR_MC,
            self::CULTURE_GL_ES,
            self::CULTURE_GU_IN,
            self::CULTURE_HE_IL,
            self::CULTURE_HI_IN,
            self::CULTURE_HR_BA,
            self::CULTURE_HR_HR,
            self::CULTURE_HU_HU,
            self::CULTURE_HY_AM,
            self::CULTURE_ID_ID,
            self::CULTURE_IS_IS,
            self::CULTURE_IT_CH,
            self::CULTURE_IT_IT,
            self::CULTURE_JA_JP,
            self::CULTURE_KA_GE,
            self::CULTURE_KK_KZ,
            self::CULTURE_KN_IN,
            self::CULTURE_KO_KR,
            self::CULTURE_KY_KG,
            self::CULTURE_LT_LT,
            self::CULTURE_LV_LV,
            self::CULTURE_MI_NZ,
            self::CULTURE_MN_MN,
            self::CULTURE_MR_IN,
            self::CULTURE_MS_BN,
            self::CULTURE_MS_MY,
            self::CULTURE_MT_MT,
            self::CULTURE_NL_BE,
            self::CULTURE_NL_NL,
            self::CULTURE_NN_NO,
            self::CULTURE_NS_ZA,
            self::CULTURE_PA_IN,
            self::CULTURE_PL_PL,
            self::CULTURE_PS_AR,
            self::CULTURE_PT_BR,
            self::CULTURE_PT_PT,
            self::CULTURE_RO_RO,
            self::CULTURE_RU_RU,
            self::CULTURE_SA_IN,
            self::CULTURE_SK_SK,
            self::CULTURE_SL_SI,
            self::CULTURE_SQ_AL,
            self::CULTURE_SR_BA,
            self::CULTURE_SR_SP,
            self::CULTURE_SV_FI,
            self::CULTURE_SV_SE,
            self::CULTURE_SW_KE,
            self::CULTURE_TA_IN,
            self::CULTURE_TE_IN,
            self::CULTURE_TH_TH,
            self::CULTURE_TL_PH,
            self::CULTURE_TN_ZA,
            self::CULTURE_TR_TR,
            self::CULTURE_UK_UA,
            self::CULTURE_UR_PK,
            self::CULTURE_UZ_UZ,
            self::CULTURE_VI_VN,
            self::CULTURE_ZH_CN,
            self::CULTURE_ZH_HK,
            self::CULTURE_ZH_MO,
            self::CULTURE_ZH_SG,
            self::CULTURE_ZH_TW,
            self::CULTURE_ZU_ZA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input'] = $data['input'] ?? null;
        $this->container['culture'] = $data['culture'] ?? 'en-US';
        $this->container['format'] = $data['format'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['input'] === null) {
            $invalidProperties[] = "'input' can't be null";
        }
        if ($this->container['culture'] === null) {
            $invalidProperties[] = "'culture' can't be null";
        }
        $allowedValues = $this->getCultureAllowableValues();
        if (!is_null($this->container['culture']) && !in_array($this->container['culture'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'culture', must be one of '%s'",
                $this->container['culture'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['format'] === null) {
            $invalidProperties[] = "'format' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets input
     *
     * @return string
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param string $input Source date and time
     *
     * @return self
     */
    public function setInput($input)
    {
        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture Language culture
     *
     * @return self
     */
    public function setCulture($culture)
    {
        $allowedValues = $this->getCultureAllowableValues();
        if (!in_array($culture, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'culture', must be one of '%s'",
                    $culture,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Output format
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


