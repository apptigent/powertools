"""
    PowerTools Developer

    Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.  # noqa: E501

    The version of the OpenAPI document: 2021.1.01
    Contact: support@apptigent.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_object import InlineObject
from openapi_client.model.inline_object1 import InlineObject1
from openapi_client.model.inline_object2 import InlineObject2
from openapi_client.model.inline_object3 import InlineObject3
from openapi_client.model.input_case_conversion import InputCaseConversion
from openapi_client.model.input_generate_hash import InputGenerateHash
from openapi_client.model.input_generate_unique_id import InputGenerateUniqueID
from openapi_client.model.input_join_strings import InputJoinStrings
from openapi_client.model.input_redact_string import InputRedactString
from openapi_client.model.input_replace_string import InputReplaceString
from openapi_client.model.input_split_string import InputSplitString
from openapi_client.model.input_string import InputString
from openapi_client.model.input_string_comparison import InputStringComparison
from openapi_client.model.input_string_contains import InputStringContains
from openapi_client.model.input_string_to_file import InputStringToFile
from openapi_client.model.input_text_to_speech import InputTextToSpeech
from openapi_client.model.input_translate_string import InputTranslateString
from openapi_client.model.input_trim_string import InputTrimString
from openapi_client.model.input_verify_hash import InputVerifyHash
from openapi_client.model.output_boolean import OutputBoolean
from openapi_client.model.output_string import OutputString
from openapi_client.model.output_string_array import OutputStringArray


class TextApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __compare_strings(
            self,
            **kwargs
        ):
            """Text - Compare strings  # noqa: E501

            Perform a comparison of two strings  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.compare_strings(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_comparison (InputStringComparison): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.compare_strings = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/CompareStrings',
                'operation_id': 'compare_strings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_comparison',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_comparison':
                        (InputStringComparison,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_comparison': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__compare_strings
        )

        def __contains_string(
            self,
            **kwargs
        ):
            """Text - Contains string  # noqa: E501

            Determine if a string contains another string  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.contains_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_contains (InputStringContains): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.contains_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ContainsString',
                'operation_id': 'contains_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_contains',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_contains':
                        (InputStringContains,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_contains': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__contains_string
        )

        def __convert_case(
            self,
            **kwargs
        ):
            """Text - Convert case  # noqa: E501

            Convert string to upper, lower or title case  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.convert_case(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                case_conversion (InputCaseConversion): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.convert_case = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ConvertCase',
                'operation_id': 'convert_case',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'case_conversion',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'case_conversion':
                        (InputCaseConversion,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'case_conversion': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__convert_case
        )

        def __decode_string(
            self,
            **kwargs
        ):
            """Text - Decode string  # noqa: E501

            Decode a string encoded with Base64 encoding  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.decode_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_input (InlineObject): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.decode_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/DecodeString',
                'operation_id': 'decode_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_input':
                        (InlineObject,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__decode_string
        )

        def __encode_string(
            self,
            **kwargs
        ):
            """Text - Encode string  # noqa: E501

            Encode a string using Base64 encoding  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.encode_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_input (InputString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.encode_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/EncodeString',
                'operation_id': 'encode_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_input':
                        (InputString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__encode_string
        )

        def __generate_guid(
            self,
            **kwargs
        ):
            """Text - Generate GUID  # noqa: E501

            Generate a globally unique identifier  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.generate_guid(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                generate_unique_id (InputGenerateUniqueID): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.generate_guid = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/GenerateGuid',
                'operation_id': 'generate_guid',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generate_unique_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generate_unique_id':
                        (InputGenerateUniqueID,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'generate_unique_id': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__generate_guid
        )

        def __generate_hash(
            self,
            **kwargs
        ):
            """Text - Generate hash  # noqa: E501

            Generate a hash value from a string  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.generate_hash(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                generate_hash (InputGenerateHash): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.generate_hash = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/GenerateHash',
                'operation_id': 'generate_hash',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'generate_hash',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'generate_hash':
                        (InputGenerateHash,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'generate_hash': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__generate_hash
        )

        def __join_strings(
            self,
            **kwargs
        ):
            """Text - Join strings  # noqa: E501

            Join a collection of strings  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.join_strings(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                join_strings (InputJoinStrings): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.join_strings = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/JoinStrings',
                'operation_id': 'join_strings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'join_strings',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'join_strings':
                        (InputJoinStrings,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'join_strings': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__join_strings
        )

        def __redact_string(
            self,
            **kwargs
        ):
            """Text - Redact string  # noqa: E501

            Redact a strng containing sensitive content  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.redact_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                redact_string (InputRedactString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.redact_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/RedactString',
                'operation_id': 'redact_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'redact_string',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'redact_string':
                        (InputRedactString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'redact_string': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__redact_string
        )

        def __replace_string(
            self,
            **kwargs
        ):
            """Text - Replace string  # noqa: E501

            Replace one value with another in a string  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                replace_string (InputReplaceString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.replace_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ReplaceString',
                'operation_id': 'replace_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'replace_string',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'replace_string':
                        (InputReplaceString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'replace_string': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__replace_string
        )

        def __shorten_link(
            self,
            **kwargs
        ):
            """Text - Shorten hyperlink  # noqa: E501

            Generate a simple, short URL from a complex URL  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.shorten_link(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_input (InlineObject1): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.shorten_link = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ShortenLink',
                'operation_id': 'shorten_link',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_input':
                        (InlineObject1,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__shorten_link
        )

        def __speech_to_text(
            self,
            file,
            language="English (United States)",
            **kwargs
        ):
            """Text - Speech to Text  # noqa: E501

            Convert audio file to text (10MB limit)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.speech_to_text(file, language="English (United States)", async_req=True)
            >>> result = thread.get()

            Args:
                file (file_type): Source audio file (WAV, MP3, AAC, M4A)
                language (str): Language of audio input. defaults to "English (United States)", must be one of ["English (United States)"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['language'] = \
                language
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.speech_to_text = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/SpeechToText',
                'operation_id': 'speech_to_text',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'language',
                    'file',
                ],
                'required': [
                    'language',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('language',): {

                        "ARABIC_(BAHRAIN)": "Arabic (Bahrain)",
                        "ARABIC_(EGYPT)": "Arabic (Egypt)",
                        "ARABIC_(IRAQ)": "Arabic (Iraq)",
                        "ARABIC_(JORDAN)": "Arabic (Jordan)",
                        "ARABIC_(KUWAIT)": "Arabic (Kuwait)",
                        "ARABIC_(LEBANON)": "Arabic (Lebanon)",
                        "ARABIC_(OMAN)": "Arabic (Oman)",
                        "ARABIC_(QATAR)": "Arabic (Qatar)",
                        "ARABIC_(SAUDI_ARABIA)": "Arabic (Saudi Arabia)",
                        "ARABIC_(SYRIA)": "Arabic (Syria)",
                        "ARABIC_(UNITED_ARAB_EMIRATES)": "Arabic (United Arab Emirates)",
                        "BULGARIAN_(BULGARIA)": "Bulgarian (Bulgaria)",
                        "CATALAN_(SPAIN)": "Catalan (Spain)",
                        "CHINESE_(CANTONESE,_TRADITIONAL)": "Chinese (Cantonese, Traditional)",
                        "CHINESE_(MANDARIN,_SIMPLIFIED)": "Chinese (Mandarin, Simplified)",
                        "CHINESE_(TAIWANESE_MANDARIN)": "Chinese (Taiwanese Mandarin)",
                        "CROATIAN_(CROATIA)": "Croatian (Croatia)",
                        "CZECH_(CZECH_REPUBLIC)": "Czech (Czech Republic)",
                        "DANISH_(DENMARK)": "Danish (Denmark)",
                        "DUTCH_(NETHERLANDS)": "Dutch (Netherlands)",
                        "ENGLISH_(AUSTRALIA)": "English (Australia)",
                        "ENGLISH_(CANADA)": "English (Canada)",
                        "ENGLISH_(HONG_KONG)": "English (Hong Kong)",
                        "ENGLISH_(INDIA)": "English (India)",
                        "ENGLISH_(IRELAND)": "English (Ireland)",
                        "ENGLISH_(NEW_ZEALAND)": "English (New Zealand)",
                        "ENGLISH_(PHILIPPINES)": "English (Philippines)",
                        "ENGLISH_(SINGAPORE)": "English (Singapore)",
                        "ENGLISH_(SOUTH_AFRICA)": "English (South Africa)",
                        "ENGLISH_(UNITED_KINGDOM)": "English (United Kingdom)",
                        "ENGLISH_(UNITED_STATES)": "English (United States)",
                        "ESTONIAN(ESTONIA)": "Estonian(Estonia)",
                        "FINNISH_(FINLAND)": "Finnish (Finland)",
                        "FRENCH_(CANADA)": "French (Canada)",
                        "FRENCH_(FRANCE)": "French (France)",
                        "GERMAN_(GERMANY)": "German (Germany)",
                        "GREEK_(GREECE)": "Greek (Greece)",
                        "GUJARATI_(INDIAN)": "Gujarati (Indian)",
                        "HINDI_(INDIA)": "Hindi (India)",
                        "HUNGARIAN_(HUNGARY)": "Hungarian (Hungary)",
                        "IRISH(IRELAND)": "Irish(Ireland)",
                        "ITALIAN_(ITALY)": "Italian (Italy)",
                        "JAPANESE_(JAPAN)": "Japanese (Japan)",
                        "KOREAN_(KOREA)": "Korean (Korea)",
                        "LATVIAN_(LATVIA)": "Latvian (Latvia)",
                        "LITHUANIAN_(LITHUANIA)": "Lithuanian (Lithuania)",
                        "MALTESE(MALTA)": "Maltese(Malta)",
                        "MARATHI_(INDIA)": "Marathi (India)",
                        "NORWEGIAN_(NORWAY)": "Norwegian (Norway)",
                        "POLISH_(POLAND)": "Polish (Poland)",
                        "PORTUGUESE_(BRAZIL)": "Portuguese (Brazil)",
                        "PORTUGUESE_(PORTUGAL)": "Portuguese (Portugal)",
                        "ROMANIAN_(ROMANIA)": "Romanian (Romania)",
                        "RUSSIAN_(RUSSIA)": "Russian (Russia)",
                        "SLOVAK_(SLOVAKIA)": "Slovak (Slovakia)",
                        "SLOVENIAN_(SLOVENIA)": "Slovenian (Slovenia)",
                        "SPANISH_(ARGENTINA)": "Spanish (Argentina)",
                        "SPANISH_(BOLIVIA)": "Spanish (Bolivia)",
                        "SPANISH_(CHILE)": "Spanish (Chile)",
                        "SPANISH_(COLOMBIA)": "Spanish (Colombia)",
                        "SPANISH_(COSTA_RICA)": "Spanish (Costa Rica)",
                        "SPANISH_(CUBA)": "Spanish (Cuba)",
                        "SPANISH_(DOMINICAN_REPUBLIC)": "Spanish (Dominican Republic)",
                        "SPANISH_(ECUADOR)": "Spanish (Ecuador)",
                        "SPANISH_(EL_SALVADOR)": "Spanish (El Salvador)",
                        "SPANISH_(GUATEMALA)": "Spanish (Guatemala)",
                        "SPANISH_(HONDURAS)": "Spanish (Honduras)",
                        "SPANISH_(MEXICO)": "Spanish (Mexico)",
                        "SPANISH_(NICARAGUA)": "Spanish (Nicaragua)",
                        "SPANISH_(PANAMA)": "Spanish (Panama)",
                        "SPANISH_(PARAGUAY)": "Spanish (Paraguay)",
                        "SPANISH_(PERU)": "Spanish (Peru)",
                        "SPANISH_(PUERTO_RICO)": "Spanish (Puerto Rico)",
                        "SPANISH_(SPAIN)": "Spanish (Spain)",
                        "SPANISH_(URUGUAY)": "Spanish (Uruguay)",
                        "SPANISH_(USA)": "Spanish (USA)",
                        "SPANISH_(VENEZUELA)": "Spanish (Venezuela)",
                        "SWEDISH_(SWEDEN)": "Swedish (Sweden)",
                        "TAMIL_(INDIA)": "Tamil (India)",
                        "TELUGU_(INDIA)": "Telugu (India)",
                        "THAI_(THAILAND)": "Thai (Thailand)",
                        "TURKISH_(TURKEY)": "Turkish (Turkey)"
                    },
                },
                'openapi_types': {
                    'language':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'language': 'language',
                    'file': 'file',
                },
                'location_map': {
                    'language': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__speech_to_text
        )

        def __split_string(
            self,
            **kwargs
        ):
            """Text - Split string  # noqa: E501

            Split a string based upon one or more characters  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.split_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                split_string (InputSplitString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputStringArray
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.split_string = Endpoint(
            settings={
                'response_type': (OutputStringArray,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/SplitString',
                'operation_id': 'split_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'split_string',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'split_string':
                        (InputSplitString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'split_string': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__split_string
        )

        def __string_to_file(
            self,
            **kwargs
        ):
            """Text - String to File  # noqa: E501

            Convert text string to file  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.string_to_file(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                input_string_to_file (InputStringToFile): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.string_to_file = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/StringToFile',
                'operation_id': 'string_to_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'input_string_to_file',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'input_string_to_file':
                        (InputStringToFile,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'input_string_to_file': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'text/html',
                    'text/csv',
                    'text/javascript',
                    'text/css',
                    'application/xml',
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__string_to_file
        )

        def __text_to_speech(
            self,
            **kwargs
        ):
            """Text - Text to Speech  # noqa: E501

            Convert text to an audio file using AI-driven speech synthesis.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.text_to_speech(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                text_to_speech (InputTextToSpeech): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.text_to_speech = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/TextToSpeech',
                'operation_id': 'text_to_speech',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'text_to_speech',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'text_to_speech':
                        (InputTextToSpeech,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'text_to_speech': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'audio/mp3'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__text_to_speech
        )

        def __translate_string(
            self,
            **kwargs
        ):
            """Text - Translate string  # noqa: E501

            Translate a string into a different language  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.translate_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                translate_string (InputTranslateString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.translate_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/TranslateString',
                'operation_id': 'translate_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'translate_string',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'translate_string':
                        (InputTranslateString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'translate_string': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__translate_string
        )

        def __trim_string(
            self,
            **kwargs
        ):
            """Text - Trim string  # noqa: E501

            Trim leading or trailing whitespace from a string  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.trim_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                trim_string (InputTrimString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.trim_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/TrimString',
                'operation_id': 'trim_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'trim_string',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'trim_string':
                        (InputTrimString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'trim_string': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__trim_string
        )

        def __url_decode(
            self,
            **kwargs
        ):
            """Text - Decode URL  # noqa: E501

            Decode an encoded URL  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.url_decode(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_input (InlineObject2): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.url_decode = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/URLDecode',
                'operation_id': 'url_decode',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_input':
                        (InlineObject2,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__url_decode
        )

        def __url_encode(
            self,
            **kwargs
        ):
            """Text - Encode URL  # noqa: E501

            Generate an encoded string from a complex hyperlink  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.url_encode(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_input (InputString): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.url_encode = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/URLEncode',
                'operation_id': 'url_encode',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_input':
                        (InputString,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__url_encode
        )

        def __validate_email(
            self,
            **kwargs
        ):
            """Text - Validate email  # noqa: E501

            Determine if an email address is valid  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.validate_email(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                string_input (InlineObject3): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.validate_email = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ValidateEmail',
                'operation_id': 'validate_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'string_input',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'string_input':
                        (InlineObject3,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'string_input': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__validate_email
        )

        def __verify_hash(
            self,
            **kwargs
        ):
            """Text - Verify hash  # noqa: E501

            Verify a hashed value against the original source string  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.verify_hash(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                verify_hash (InputVerifyHash): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputBoolean
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.verify_hash = Endpoint(
            settings={
                'response_type': (OutputBoolean,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/VerifyHash',
                'operation_id': 'verify_hash',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'verify_hash',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'verify_hash':
                        (InputVerifyHash,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'verify_hash': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__verify_hash
        )
