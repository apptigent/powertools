"""
    PowerTools Developer

    Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.  # noqa: E501

    The version of the OpenAPI document: 2021.1.01
    Contact: support@apptigent.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.input_qr_code import InputQRCode
from openapi_client.model.output_string import OutputString


class FilesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __convert_image(
            self,
            file,
            format="PNG",
            **kwargs
        ):
            """Files - Convert Image  # noqa: E501

            Convert an image from one format to another  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.convert_image(file, format="PNG", async_req=True)
            >>> result = thread.get()

            Args:
                file (file_type): Source image file
                format (str): Output file format. defaults to "PNG", must be one of ["PNG"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['format'] = \
                format
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.convert_image = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ConvertImage',
                'operation_id': 'convert_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'format',
                    'file',
                ],
                'required': [
                    'format',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "PNG": "PNG",
                        "JPG": "JPG",
                        "GIF": "GIF",
                        "BMP": "BMP",
                        "TIF": "TIF"
                    },
                },
                'openapi_types': {
                    'format':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'format': 'format',
                    'file': 'file',
                },
                'location_map': {
                    'format': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png',
                    'image/gif',
                    'image/jpeg',
                    'image/bmp'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__convert_image
        )

        def __crop_image(
            self,
            width,
            height,
            file,
            position="TopLeft",
            **kwargs
        ):
            """Files - Crop Image  # noqa: E501

            Crop an image  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.crop_image(width, height, file, position="TopLeft", async_req=True)
            >>> result = thread.get()

            Args:
                width (float): Width (X-axis right, negative to reverse)
                height (float): Height (Y-axis down, negative to reverse)
                file (file_type): Source image file
                position (str): Crop start position (use negative values to reverse crop area). defaults to "TopLeft", must be one of ["TopLeft"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['position'] = \
                position
            kwargs['width'] = \
                width
            kwargs['height'] = \
                height
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.crop_image = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/CropImage',
                'operation_id': 'crop_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'position',
                    'width',
                    'height',
                    'file',
                ],
                'required': [
                    'position',
                    'width',
                    'height',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'position',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('position',): {

                        "TOPLEFT": "TopLeft",
                        "TOPCENTER": "TopCenter",
                        "TOPRIGHT": "TopRight",
                        "MIDDLELEFT": "MiddleLeft",
                        "MIDDLECENTER": "MiddleCenter",
                        "MIDDLERIGHT": "MiddleRight",
                        "BOTTOMLEFT": "BottomLeft",
                        "BOTTOMCENTER": "BottomCenter",
                        "BOTTOMRIGHT": "BottomRight"
                    },
                },
                'openapi_types': {
                    'position':
                        (str,),
                    'width':
                        (float,),
                    'height':
                        (float,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'position': 'position',
                    'width': 'Width',
                    'height': 'Height',
                    'file': 'file',
                },
                'location_map': {
                    'position': 'form',
                    'width': 'form',
                    'height': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png',
                    'image/gif',
                    'image/jpeg',
                    'image/bmp'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__crop_image
        )

        def __file_to_string(
            self,
            file,
            **kwargs
        ):
            """Files - File to string  # noqa: E501

            Convert a file to a Base64 string  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.file_to_string(file, async_req=True)
            >>> result = thread.get()

            Args:
                file (file_type): Source file (10MB limit)

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OutputString
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.file_to_string = Endpoint(
            settings={
                'response_type': (OutputString,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/FileToString',
                'operation_id': 'file_to_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'file',
                ],
                'required': [
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'file': 'file',
                },
                'location_map': {
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__file_to_string
        )

        def __flip_image(
            self,
            file,
            orientation="Horizontal",
            **kwargs
        ):
            """Files - Flip Image  # noqa: E501

            Flip an image (horizontal or vertical)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.flip_image(file, orientation="Horizontal", async_req=True)
            >>> result = thread.get()

            Args:
                file (file_type): Source image file
                orientation (str): Horizontal or Vertical. defaults to "Horizontal", must be one of ["Horizontal"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['orientation'] = \
                orientation
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.flip_image = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/FlipImage',
                'operation_id': 'flip_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'orientation',
                    'file',
                ],
                'required': [
                    'orientation',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'orientation',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('orientation',): {

                        "HORIZONTAL": "Horizontal",
                        "VERTICAL": "Vertical"
                    },
                },
                'openapi_types': {
                    'orientation':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'orientation': 'orientation',
                    'file': 'file',
                },
                'location_map': {
                    'orientation': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__flip_image
        )

        def __generate_qr_code(
            self,
            **kwargs
        ):
            """Files - Generate QR code  # noqa: E501

            Generate a QR code image  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.generate_qr_code(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                input_qr_code (InputQRCode): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.generate_qr_code = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/GenerateQRCode',
                'operation_id': 'generate_qr_code',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'input_qr_code',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'input_qr_code':
                        (InputQRCode,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'input_qr_code': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__generate_qr_code
        )

        def __resize_image(
            self,
            file,
            algorithm="Bicubic (default)",
            units="Pixels",
            **kwargs
        ):
            """Files - Resize Image  # noqa: E501

            Resize an image  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.resize_image(file, algorithm="Bicubic (default)", units="Pixels", async_req=True)
            >>> result = thread.get()

            Args:
                file (file_type): Source image file
                algorithm (str): Optimize output quality of the target image. defaults to "Bicubic (default)", must be one of ["Bicubic (default)"]
                units (str): Image adjustment units. defaults to "Pixels", must be one of ["Pixels"]

            Keyword Args:
                height (float): Image height (pixels or percent). [optional]
                width (float): Image width (pixels or percent). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['algorithm'] = \
                algorithm
            kwargs['units'] = \
                units
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.resize_image = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/ResizeImage',
                'operation_id': 'resize_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'algorithm',
                    'units',
                    'file',
                    'height',
                    'width',
                ],
                'required': [
                    'algorithm',
                    'units',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'algorithm',
                    'units',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('algorithm',): {

                        "BICUBIC_(DEFAULT)": "Bicubic (default)",
                        "BILINEAR": "Bilinear",
                        "CUBIC_(BOX)": "Cubic (Box)",
                        "CUBIC_(CATMULL-ROM)": "Cubic (Catmull-Rom)",
                        "CUBIC_(HERMITE)": "Cubic (Hermite)",
                        "CUBIC_(SPLINE)": "Cubic (Spline)",
                        "NEAREST_NEIGHBOR": "Nearest Neighbor",
                        "SINC_(LANCZOS2)": "Sinc (Lanczos2)",
                        "SINC_(LANCZOS3)": "Sinc (Lanczos3)",
                        "SINC_(LANCZOS5)": "Sinc (Lanczos5)",
                        "SINC_(LANCZOS8)": "Sinc (Lanczos8)",
                        "ROBIDOUX": "Robidoux",
                        "ROBIDOUX_SHARP": "Robidoux Sharp"
                    },
                    ('units',): {

                        "PIXELS": "Pixels",
                        "PERCENT": "Percent"
                    },
                },
                'openapi_types': {
                    'algorithm':
                        (str,),
                    'units':
                        (str,),
                    'file':
                        (file_type,),
                    'height':
                        (float,),
                    'width':
                        (float,),
                },
                'attribute_map': {
                    'algorithm': 'algorithm',
                    'units': 'units',
                    'file': 'file',
                    'height': 'height',
                    'width': 'width',
                },
                'location_map': {
                    'algorithm': 'form',
                    'units': 'form',
                    'file': 'form',
                    'height': 'form',
                    'width': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/png',
                    'image/gif',
                    'image/jpeg',
                    'image/bmp'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__resize_image
        )

        def __rotate_image(
            self,
            degrees,
            file,
            **kwargs
        ):
            """Files - Rotate Image  # noqa: E501

            Rotate an image by specified number of degrees  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.rotate_image(degrees, file, async_req=True)
            >>> result = thread.get()

            Args:
                degrees (str): Number of degrees
                file (file_type): Source image file

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['degrees'] = \
                degrees
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.rotate_image = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/RotateImage',
                'operation_id': 'rotate_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'degrees',
                    'file',
                ],
                'required': [
                    'degrees',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'degrees':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'degrees': 'degrees',
                    'file': 'file',
                },
                'location_map': {
                    'degrees': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__rotate_image
        )

        def __watermark_image(
            self,
            text,
            size,
            file,
            font="Arial",
            color="000000",
            horizontal="Center",
            vertical="Center",
            **kwargs
        ):
            """Files - Watermark Image  # noqa: E501

            Add watermark text to an image  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.watermark_image(text, size, file, font="Arial", color="000000", horizontal="Center", vertical="Center", async_req=True)
            >>> result = thread.get()

            Args:
                text (str): Watermark text
                size (float): Font size (points)
                file (file_type): Source image file
                font (str): Text font. defaults to "Arial", must be one of ["Arial"]
                color (str): Text color hex value. defaults to "000000", must be one of ["000000"]
                horizontal (str): Horizontal alignment. defaults to "Center", must be one of ["Center"]
                vertical (str): Vertical alignment. defaults to "Center", must be one of ["Center"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['text'] = \
                text
            kwargs['font'] = \
                font
            kwargs['size'] = \
                size
            kwargs['color'] = \
                color
            kwargs['horizontal'] = \
                horizontal
            kwargs['vertical'] = \
                vertical
            kwargs['file'] = \
                file
            return self.call_with_http_info(**kwargs)

        self.watermark_image = Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'apiKeyHeader'
                ],
                'endpoint_path': '/WatermarkImage',
                'operation_id': 'watermark_image',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'text',
                    'font',
                    'size',
                    'color',
                    'horizontal',
                    'vertical',
                    'file',
                ],
                'required': [
                    'text',
                    'font',
                    'size',
                    'color',
                    'horizontal',
                    'vertical',
                    'file',
                ],
                'nullable': [
                ],
                'enum': [
                    'font',
                    'horizontal',
                    'vertical',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('font',): {

                        "ARIAL": "Arial",
                        "ARIAL_BLACK": "Arial Black",
                        "ARIAL_NARROW": "Arial Narrow",
                        "BOOK_ANTIQUA": "Book Antiqua",
                        "BRITANNIC_BOLD": "Britannic Bold",
                        "BRUSH_SCRIPT_MT": "Brush Script MT",
                        "CALISTO_MT": "Calisto MT",
                        "CENTURY_GOTHIC": "Century Gothic",
                        "CENTURY_SCHOOLBOOK": "Century Schoolbook",
                        "COLONNA_MT": "Colonna MT",
                        "COMIC_SANS_MS": "Comic Sans MS",
                        "COOPER_BLACK": "Cooper Black",
                        "COPPERPLATE_GOTHIC_BOLD": "Copperplate Gothic Bold",
                        "COPPERPLATE_GOTHIC_LIGHT": "Copperplate Gothic Light",
                        "COURIER_NEW": "Courier New",
                        "EDWARDIAN_SCRIPT_ITC": "Edwardian Script ITC",
                        "ENGRAVERS_MT": "Engravers MT",
                        "FRANKLIN_GOTHIC_DEMI": "Franklin Gothic Demi",
                        "FRANKLIN_GOTHIC_HEAVY": "Franklin Gothic Heavy",
                        "FRANKLIN_GOTHIC_MEDIUM": "Franklin Gothic Medium",
                        "GARAMOND": "Garamond",
                        "GEORGIA": "Georgia",
                        "GILL_SANS_MT": "Gill Sans MT",
                        "GILL_SANS_MT_CONDENSED": "Gill Sans MT Condensed",
                        "GILL_SANS_ULTRA_BOLD": "Gill Sans Ultra Bold",
                        "GILL_SANS_ULTRA_BOLD_CONDENSED": "Gill Sans Ultra Bold Condensed",
                        "GOUDY_OLD_STYLE": "Goudy Old Style",
                        "HAETTENSCHWEILER": "Haettenschweiler",
                        "HOLIDAYS_MT": "Holidays MT",
                        "IMPACT": "Impact",
                        "LUCIDA_CALLIGRAPHY": "Lucida Calligraphy",
                        "LUCIDA_CONSOLE": "Lucida Console",
                        "LUCIDA_HANDWRITING": "Lucida Handwriting",
                        "LUCIDA_SANS_TYPEWRITER": "Lucida Sans Typewriter",
                        "LUCIDA_SANS_UNICODE": "Lucida Sans Unicode",
                        "MARLETT": "Marlett",
                        "MICROSOFT_SANS_SERIF": "Microsoft Sans Serif",
                        "MS_OUTLOOK": "MS Outlook",
                        "PALACE_SCRIPT_MT": "Palace Script MT",
                        "PALATINO_LINOTYPE": "Palatino Linotype",
                        "PAPYRUS": "Papyrus",
                        "PLAYBILL": "Playbill",
                        "ROCKWELL": "Rockwell",
                        "ROCKWELL_CONDENSED": "Rockwell Condensed",
                        "ROCKWELL_EXTRA_BOLD": "Rockwell Extra Bold",
                        "SCRIPT_MT_BOLD": "Script MT Bold",
                        "STENCIL": "Stencil",
                        "SYMBOL": "Symbol",
                        "TAHOMA": "Tahoma",
                        "TIMES_NEW_ROMAN": "Times New Roman",
                        "TREBUCHET_MS": "Trebuchet MS",
                        "VERDANA": "Verdana",
                        "VIVALDI": "Vivaldi",
                        "WEBDINGS": "Webdings",
                        "WINGDINGS_1": "Wingdings 1",
                        "WINGDINGS_2": "Wingdings 2",
                        "WINGDINGS_3": "Wingdings 3"
                    },
                    ('horizontal',): {

                        "LEFT": "Left",
                        "CENTER": "Center",
                        "RIGHT": "Right"
                    },
                    ('vertical',): {

                        "TOP": "Top",
                        "CENTER": "Center",
                        "BOTTOM": "Bottom"
                    },
                },
                'openapi_types': {
                    'text':
                        (str,),
                    'font':
                        (str,),
                    'size':
                        (float,),
                    'color':
                        (str,),
                    'horizontal':
                        (str,),
                    'vertical':
                        (str,),
                    'file':
                        (file_type,),
                },
                'attribute_map': {
                    'text': 'text',
                    'font': 'font',
                    'size': 'size',
                    'color': 'color',
                    'horizontal': 'horizontal',
                    'vertical': 'vertical',
                    'file': 'file',
                },
                'location_map': {
                    'text': 'form',
                    'font': 'form',
                    'size': 'form',
                    'color': 'form',
                    'horizontal': 'form',
                    'vertical': 'form',
                    'file': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__watermark_image
        )
