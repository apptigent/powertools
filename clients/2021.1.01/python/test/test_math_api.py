"""
    PowerTools Developer

    Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.  # noqa: E501

    The version of the OpenAPI document: 2021.1.01
    Contact: support@apptigent.com
    Generated by: https://openapi-generator.tech
"""


import unittest

import openapi_client
from openapi_client.api.math_api import MathApi  # noqa: E501


class TestMathApi(unittest.TestCase):
    """MathApi unit test stubs"""

    def setUp(self):
        self.api = MathApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_calculate_absolute(self):
        """Test case for calculate_absolute

        Math - Calculate Absolute  # noqa: E501
        """
        pass

    def test_calculate_addition(self):
        """Test case for calculate_addition

        Math - Calculate Addition  # noqa: E501
        """
        pass

    def test_calculate_average(self):
        """Test case for calculate_average

        Math - Calculate average  # noqa: E501
        """
        pass

    def test_calculate_cosine(self):
        """Test case for calculate_cosine

        Math - Calculate Cosine  # noqa: E501
        """
        pass

    def test_calculate_division(self):
        """Test case for calculate_division

        Math - Calculate Division  # noqa: E501
        """
        pass

    def test_calculate_logarithm(self):
        """Test case for calculate_logarithm

        Math - Calculate Logarithm  # noqa: E501
        """
        pass

    def test_calculate_median(self):
        """Test case for calculate_median

        Math - Calculate median  # noqa: E501
        """
        pass

    def test_calculate_min_max(self):
        """Test case for calculate_min_max

        Math - Calculate minimum or maximum  # noqa: E501
        """
        pass

    def test_calculate_modulo(self):
        """Test case for calculate_modulo

        Math - Calculate Modulo  # noqa: E501
        """
        pass

    def test_calculate_multiplication(self):
        """Test case for calculate_multiplication

        Math - Calculate Multiplication  # noqa: E501
        """
        pass

    def test_calculate_nth_root(self):
        """Test case for calculate_nth_root

        Math - Calculate Nth Root  # noqa: E501
        """
        pass

    def test_calculate_power(self):
        """Test case for calculate_power

        Math - Calculate power  # noqa: E501
        """
        pass

    def test_calculate_sine(self):
        """Test case for calculate_sine

        Math - Calculate Sine  # noqa: E501
        """
        pass

    def test_calculate_square_root(self):
        """Test case for calculate_square_root

        Math - Calculate Square Root  # noqa: E501
        """
        pass

    def test_calculate_subtraction(self):
        """Test case for calculate_subtraction

        Math - Calculate Subtraction  # noqa: E501
        """
        pass

    def test_calculate_sum(self):
        """Test case for calculate_sum

        Math - Calculate sum  # noqa: E501
        """
        pass

    def test_calculate_tangent(self):
        """Test case for calculate_tangent

        Math - Calculate Tangent  # noqa: E501
        """
        pass

    def test_calculate_variance(self):
        """Test case for calculate_variance

        Math - Calculate variance  # noqa: E501
        """
        pass

    def test_convert_angle(self):
        """Test case for convert_angle

        Math - Convert angle  # noqa: E501
        """
        pass

    def test_convert_area(self):
        """Test case for convert_area

        Math - Convert area  # noqa: E501
        """
        pass

    def test_convert_distance(self):
        """Test case for convert_distance

        Math - Convert distance  # noqa: E501
        """
        pass

    def test_convert_duration(self):
        """Test case for convert_duration

        Math - Convert duration  # noqa: E501
        """
        pass

    def test_convert_energy(self):
        """Test case for convert_energy

        Math - Convert energy  # noqa: E501
        """
        pass

    def test_convert_power(self):
        """Test case for convert_power

        Math - Convert power  # noqa: E501
        """
        pass

    def test_convert_speed(self):
        """Test case for convert_speed

        Math - Convert speed  # noqa: E501
        """
        pass

    def test_convert_temperature(self):
        """Test case for convert_temperature

        Math - Convert temperature  # noqa: E501
        """
        pass

    def test_convert_volume(self):
        """Test case for convert_volume

        Math - Convert volume  # noqa: E501
        """
        pass

    def test_convert_weight(self):
        """Test case for convert_weight

        Math - Convert weight  # noqa: E501
        """
        pass

    def test_random_number(self):
        """Test case for random_number

        Math - Random number  # noqa: E501
        """
        pass

    def test_round_number(self):
        """Test case for round_number

        Math - Round number  # noqa: E501
        """
        pass

    def test_standard_deviation(self):
        """Test case for standard_deviation

        Math - Calculate standard deviation  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
