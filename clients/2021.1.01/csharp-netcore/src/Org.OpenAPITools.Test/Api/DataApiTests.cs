/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataApiTests : IDisposable
    {
        private DataApi instance;

        public DataApiTests()
        {
            instance = new DataApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DataApi
            //Assert.IsType<DataApi>(instance);
        }

        /// <summary>
        /// Test CsvToJson
        /// </summary>
        [Fact]
        public void CsvToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCsvConversionJSON csvConversionJSON = null;
            //var response = instance.CsvToJson(csvConversionJSON);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test JsonToCsv
        /// </summary>
        [Fact]
        public void JsonToCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJsonConversionCSV jsonConversionCSV = null;
            //var response = instance.JsonToCsv(jsonConversionCSV);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test JsonToHtml
        /// </summary>
        [Fact]
        public void JsonToHtmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJsonConversionHTML jsonConversionHTML = null;
            //var response = instance.JsonToHtml(jsonConversionHTML);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test JsonToXml
        /// </summary>
        [Fact]
        public void JsonToXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJsonConversionXML jsonConversionXML = null;
            //var response = instance.JsonToXml(jsonConversionXML);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test QueryJson
        /// </summary>
        [Fact]
        public void QueryJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDataQuery inputDataQuery = null;
            //var response = instance.QueryJson(inputDataQuery);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test QueryXml
        /// </summary>
        [Fact]
        public void QueryXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDataQuery inputDataQuery = null;
            //var response = instance.QueryXml(inputDataQuery);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test XmlToJson
        /// </summary>
        [Fact]
        public void XmlToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputXmlConversionJSON xmlConversionJSON = null;
            //var response = instance.XmlToJson(xmlConversionJSON);
            //Assert.IsType<OutputString>(response);
        }
    }
}
