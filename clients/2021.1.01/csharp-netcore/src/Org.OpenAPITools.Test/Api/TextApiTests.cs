/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TextApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TextApiTests : IDisposable
    {
        private TextApi instance;

        public TextApiTests()
        {
            instance = new TextApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TextApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TextApi
            //Assert.IsType<TextApi>(instance);
        }

        /// <summary>
        /// Test CompareStrings
        /// </summary>
        [Fact]
        public void CompareStringsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputStringComparison stringComparison = null;
            //var response = instance.CompareStrings(stringComparison);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test ContainsString
        /// </summary>
        [Fact]
        public void ContainsStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputStringContains stringContains = null;
            //var response = instance.ContainsString(stringContains);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test ConvertCase
        /// </summary>
        [Fact]
        public void ConvertCaseTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCaseConversion caseConversion = null;
            //var response = instance.ConvertCase(caseConversion);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test DecodeString
        /// </summary>
        [Fact]
        public void DecodeStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject stringInput = null;
            //var response = instance.DecodeString(stringInput);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test EncodeString
        /// </summary>
        [Fact]
        public void EncodeStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputString stringInput = null;
            //var response = instance.EncodeString(stringInput);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test GenerateGuid
        /// </summary>
        [Fact]
        public void GenerateGuidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputGenerateUniqueID generateUniqueID = null;
            //var response = instance.GenerateGuid(generateUniqueID);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test GenerateHash
        /// </summary>
        [Fact]
        public void GenerateHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputGenerateHash generateHash = null;
            //var response = instance.GenerateHash(generateHash);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test JoinStrings
        /// </summary>
        [Fact]
        public void JoinStringsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJoinStrings joinStrings = null;
            //var response = instance.JoinStrings(joinStrings);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test RedactString
        /// </summary>
        [Fact]
        public void RedactStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputRedactString redactString = null;
            //var response = instance.RedactString(redactString);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test ReplaceString
        /// </summary>
        [Fact]
        public void ReplaceStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputReplaceString replaceString = null;
            //var response = instance.ReplaceString(replaceString);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test ShortenLink
        /// </summary>
        [Fact]
        public void ShortenLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject1 stringInput = null;
            //var response = instance.ShortenLink(stringInput);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test SpeechToText
        /// </summary>
        [Fact]
        public void SpeechToTextTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //System.IO.Stream file = null;
            //var response = instance.SpeechToText(language, file);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test SplitString
        /// </summary>
        [Fact]
        public void SplitStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputSplitString splitString = null;
            //var response = instance.SplitString(splitString);
            //Assert.IsType<OutputStringArray>(response);
        }

        /// <summary>
        /// Test StringToFile
        /// </summary>
        [Fact]
        public void StringToFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputStringToFile inputStringToFile = null;
            //var response = instance.StringToFile(inputStringToFile);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test TextToSpeech
        /// </summary>
        [Fact]
        public void TextToSpeechTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputTextToSpeech textToSpeech = null;
            //var response = instance.TextToSpeech(textToSpeech);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test TranslateString
        /// </summary>
        [Fact]
        public void TranslateStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputTranslateString translateString = null;
            //var response = instance.TranslateString(translateString);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test TrimString
        /// </summary>
        [Fact]
        public void TrimStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputTrimString trimString = null;
            //var response = instance.TrimString(trimString);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test UrlDecode
        /// </summary>
        [Fact]
        public void UrlDecodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject2 stringInput = null;
            //var response = instance.UrlDecode(stringInput);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test UrlEncode
        /// </summary>
        [Fact]
        public void UrlEncodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputString stringInput = null;
            //var response = instance.UrlEncode(stringInput);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test ValidateEmail
        /// </summary>
        [Fact]
        public void ValidateEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject3 stringInput = null;
            //var response = instance.ValidateEmail(stringInput);
            //Assert.IsType<OutputString>(response);
        }

        /// <summary>
        /// Test VerifyHash
        /// </summary>
        [Fact]
        public void VerifyHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputVerifyHash verifyHash = null;
            //var response = instance.VerifyHash(verifyHash);
            //Assert.IsType<OutputBoolean>(response);
        }
    }
}
