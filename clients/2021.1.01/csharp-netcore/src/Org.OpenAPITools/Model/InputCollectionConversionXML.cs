/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputCollectionConversionXML
    /// </summary>
    [DataContract(Name = "inputCollectionConversionXML")]
    public partial class InputCollectionConversionXML : IEquatable<InputCollectionConversionXML>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionConversionXML" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputCollectionConversionXML() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionConversionXML" /> class.
        /// </summary>
        /// <param name="input">Collection containing strings to convert (required).</param>
        /// <param name="root">Name of root XML node (required).</param>
        /// <param name="child">Name of child XML node(s) (required).</param>
        public InputCollectionConversionXML(List<string> input = default(List<string>), string root = default(string), string child = default(string))
        {
            // to ensure "input" is required (not null)
            this.Input = input ?? throw new ArgumentNullException("input is a required property for InputCollectionConversionXML and cannot be null");
            // to ensure "root" is required (not null)
            this.Root = root ?? throw new ArgumentNullException("root is a required property for InputCollectionConversionXML and cannot be null");
            // to ensure "child" is required (not null)
            this.Child = child ?? throw new ArgumentNullException("child is a required property for InputCollectionConversionXML and cannot be null");
        }

        /// <summary>
        /// Collection containing strings to convert
        /// </summary>
        /// <value>Collection containing strings to convert</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Input { get; set; }

        /// <summary>
        /// Name of root XML node
        /// </summary>
        /// <value>Name of root XML node</value>
        [DataMember(Name = "root", IsRequired = true, EmitDefaultValue = false)]
        public string Root { get; set; }

        /// <summary>
        /// Name of child XML node(s)
        /// </summary>
        /// <value>Name of child XML node(s)</value>
        [DataMember(Name = "child", IsRequired = true, EmitDefaultValue = false)]
        public string Child { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCollectionConversionXML {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("  Child: ").Append(Child).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputCollectionConversionXML);
        }

        /// <summary>
        /// Returns true if InputCollectionConversionXML instances are equal
        /// </summary>
        /// <param name="input">Instance of InputCollectionConversionXML to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCollectionConversionXML input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                ) && 
                (
                    this.Child == input.Child ||
                    (this.Child != null &&
                    this.Child.Equals(input.Child))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Root != null)
                    hashCode = hashCode * 59 + this.Root.GetHashCode();
                if (this.Child != null)
                    hashCode = hashCode * 59 + this.Child.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
