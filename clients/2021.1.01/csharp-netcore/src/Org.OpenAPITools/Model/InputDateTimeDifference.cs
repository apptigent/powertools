/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputDateTimeDifference
    /// </summary>
    [DataContract(Name = "inputDateTimeDifference")]
    public partial class InputDateTimeDifference : IEquatable<InputDateTimeDifference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputDateTimeDifference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputDateTimeDifference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputDateTimeDifference" /> class.
        /// </summary>
        /// <param name="dateTime1">First date/time value (required).</param>
        /// <param name="dateTime2">Second date/time value (required).</param>
        public InputDateTimeDifference(string dateTime1 = default(string), string dateTime2 = default(string))
        {
            // to ensure "dateTime1" is required (not null)
            this.DateTime1 = dateTime1 ?? throw new ArgumentNullException("dateTime1 is a required property for InputDateTimeDifference and cannot be null");
            // to ensure "dateTime2" is required (not null)
            this.DateTime2 = dateTime2 ?? throw new ArgumentNullException("dateTime2 is a required property for InputDateTimeDifference and cannot be null");
        }

        /// <summary>
        /// First date/time value
        /// </summary>
        /// <value>First date/time value</value>
        [DataMember(Name = "dateTime1", IsRequired = true, EmitDefaultValue = false)]
        public string DateTime1 { get; set; }

        /// <summary>
        /// Second date/time value
        /// </summary>
        /// <value>Second date/time value</value>
        [DataMember(Name = "dateTime2", IsRequired = true, EmitDefaultValue = false)]
        public string DateTime2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputDateTimeDifference {\n");
            sb.Append("  DateTime1: ").Append(DateTime1).Append("\n");
            sb.Append("  DateTime2: ").Append(DateTime2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputDateTimeDifference);
        }

        /// <summary>
        /// Returns true if InputDateTimeDifference instances are equal
        /// </summary>
        /// <param name="input">Instance of InputDateTimeDifference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputDateTimeDifference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateTime1 == input.DateTime1 ||
                    (this.DateTime1 != null &&
                    this.DateTime1.Equals(input.DateTime1))
                ) && 
                (
                    this.DateTime2 == input.DateTime2 ||
                    (this.DateTime2 != null &&
                    this.DateTime2.Equals(input.DateTime2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateTime1 != null)
                    hashCode = hashCode * 59 + this.DateTime1.GetHashCode();
                if (this.DateTime2 != null)
                    hashCode = hashCode * 59 + this.DateTime2.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
