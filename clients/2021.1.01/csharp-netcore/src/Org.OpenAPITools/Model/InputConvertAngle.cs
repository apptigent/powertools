/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputConvertAngle
    /// </summary>
    [DataContract(Name = "inputConvertAngle")]
    public partial class InputConvertAngle : IEquatable<InputConvertAngle>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Arcminute for value: Arcminute
            /// </summary>
            [EnumMember(Value = "Arcminute")]
            Arcminute = 1,

            /// <summary>
            /// Enum Arcsecond for value: Arcsecond
            /// </summary>
            [EnumMember(Value = "Arcsecond")]
            Arcsecond = 2,

            /// <summary>
            /// Enum Centiradian for value: Centiradian
            /// </summary>
            [EnumMember(Value = "Centiradian")]
            Centiradian = 3,

            /// <summary>
            /// Enum Deciradian for value: Deciradian
            /// </summary>
            [EnumMember(Value = "Deciradian")]
            Deciradian = 4,

            /// <summary>
            /// Enum Degree for value: Degree
            /// </summary>
            [EnumMember(Value = "Degree")]
            Degree = 5,

            /// <summary>
            /// Enum Gradian for value: Gradian
            /// </summary>
            [EnumMember(Value = "Gradian")]
            Gradian = 6,

            /// <summary>
            /// Enum Microdegree for value: Microdegree
            /// </summary>
            [EnumMember(Value = "Microdegree")]
            Microdegree = 7,

            /// <summary>
            /// Enum Microradian for value: Microradian
            /// </summary>
            [EnumMember(Value = "Microradian")]
            Microradian = 8,

            /// <summary>
            /// Enum Millidegree for value: Millidegree
            /// </summary>
            [EnumMember(Value = "Millidegree")]
            Millidegree = 9,

            /// <summary>
            /// Enum Milliradian for value: Milliradian
            /// </summary>
            [EnumMember(Value = "Milliradian")]
            Milliradian = 10,

            /// <summary>
            /// Enum Nanodegree for value: Nanodegree
            /// </summary>
            [EnumMember(Value = "Nanodegree")]
            Nanodegree = 11,

            /// <summary>
            /// Enum Nanoradian for value: Nanoradian
            /// </summary>
            [EnumMember(Value = "Nanoradian")]
            Nanoradian = 12,

            /// <summary>
            /// Enum Radian for value: Radian
            /// </summary>
            [EnumMember(Value = "Radian")]
            Radian = 13,

            /// <summary>
            /// Enum Revolution for value: Revolution
            /// </summary>
            [EnumMember(Value = "Revolution")]
            Revolution = 14

        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Defines Target
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetEnum
        {
            /// <summary>
            /// Enum Arcminute for value: Arcminute
            /// </summary>
            [EnumMember(Value = "Arcminute")]
            Arcminute = 1,

            /// <summary>
            /// Enum Arcsecond for value: Arcsecond
            /// </summary>
            [EnumMember(Value = "Arcsecond")]
            Arcsecond = 2,

            /// <summary>
            /// Enum Centiradian for value: Centiradian
            /// </summary>
            [EnumMember(Value = "Centiradian")]
            Centiradian = 3,

            /// <summary>
            /// Enum Deciradian for value: Deciradian
            /// </summary>
            [EnumMember(Value = "Deciradian")]
            Deciradian = 4,

            /// <summary>
            /// Enum Degree for value: Degree
            /// </summary>
            [EnumMember(Value = "Degree")]
            Degree = 5,

            /// <summary>
            /// Enum Gradian for value: Gradian
            /// </summary>
            [EnumMember(Value = "Gradian")]
            Gradian = 6,

            /// <summary>
            /// Enum Microdegree for value: Microdegree
            /// </summary>
            [EnumMember(Value = "Microdegree")]
            Microdegree = 7,

            /// <summary>
            /// Enum Microradian for value: Microradian
            /// </summary>
            [EnumMember(Value = "Microradian")]
            Microradian = 8,

            /// <summary>
            /// Enum Millidegree for value: Millidegree
            /// </summary>
            [EnumMember(Value = "Millidegree")]
            Millidegree = 9,

            /// <summary>
            /// Enum Milliradian for value: Milliradian
            /// </summary>
            [EnumMember(Value = "Milliradian")]
            Milliradian = 10,

            /// <summary>
            /// Enum Nanodegree for value: Nanodegree
            /// </summary>
            [EnumMember(Value = "Nanodegree")]
            Nanodegree = 11,

            /// <summary>
            /// Enum Nanoradian for value: Nanoradian
            /// </summary>
            [EnumMember(Value = "Nanoradian")]
            Nanoradian = 12,

            /// <summary>
            /// Enum Radian for value: Radian
            /// </summary>
            [EnumMember(Value = "Radian")]
            Radian = 13,

            /// <summary>
            /// Enum Revolution for value: Revolution
            /// </summary>
            [EnumMember(Value = "Revolution")]
            Revolution = 14

        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = false)]
        public TargetEnum Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputConvertAngle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputConvertAngle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputConvertAngle" /> class.
        /// </summary>
        /// <param name="input">input (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="target">target (required).</param>
        public InputConvertAngle(decimal input = default(decimal), SourceEnum source = default(SourceEnum), TargetEnum target = default(TargetEnum))
        {
            this.Input = input;
            this.Source = source;
            this.Target = target;
        }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public decimal Input { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputConvertAngle {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputConvertAngle);
        }

        /// <summary>
        /// Returns true if InputConvertAngle instances are equal
        /// </summary>
        /// <param name="input">Instance of InputConvertAngle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputConvertAngle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input.Equals(input.Input)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target.Equals(input.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Input.GetHashCode();
                hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
