/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputMarketIndex
    /// </summary>
    [DataContract(Name = "inputMarketIndex")]
    public partial class InputMarketIndex : IEquatable<InputMarketIndex>, IValidatableObject
    {
        /// <summary>
        /// Market index
        /// </summary>
        /// <value>Market index</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SymbolEnum
        {
            /// <summary>
            /// Enum DJAINDXDowJonesCompositeAverage for value: DJA.INDX (Dow Jones Composite Average)
            /// </summary>
            [EnumMember(Value = "DJA.INDX (Dow Jones Composite Average)")]
            DJAINDXDowJonesCompositeAverage = 1,

            /// <summary>
            /// Enum DJIINDXDowJonesIndustrialAverage for value: DJI.INDX (Dow Jones Industrial Average)
            /// </summary>
            [EnumMember(Value = "DJI.INDX (Dow Jones Industrial Average)")]
            DJIINDXDowJonesIndustrialAverage = 2,

            /// <summary>
            /// Enum DJTINDXDowJonesTransportation for value: DJT.INDX (Dow Jones Transportation)
            /// </summary>
            [EnumMember(Value = "DJT.INDX (Dow Jones Transportation)")]
            DJTINDXDowJonesTransportation = 3,

            /// <summary>
            /// Enum DJUSINDXDowJonesUS for value: DJUS.INDX (Dow Jones US)
            /// </summary>
            [EnumMember(Value = "DJUS.INDX (Dow Jones US)")]
            DJUSINDXDowJonesUS = 4,

            /// <summary>
            /// Enum DXYINDXUSDollarIndex for value: DXY.INDX (US Dollar Index)
            /// </summary>
            [EnumMember(Value = "DXY.INDX (US Dollar Index)")]
            DXYINDXUSDollarIndex = 5,

            /// <summary>
            /// Enum GDOWINDXGlobalDowUSD for value: GDOW.INDX (Global Dow USD)
            /// </summary>
            [EnumMember(Value = "GDOW.INDX (Global Dow USD)")]
            GDOWINDXGlobalDowUSD = 6,

            /// <summary>
            /// Enum NYINDXNYSEUS100Index for value: NY.INDX (NYSE US 100 Index)
            /// </summary>
            [EnumMember(Value = "NY.INDX (NYSE US 100 Index)")]
            NYINDXNYSEUS100Index = 7,

            /// <summary>
            /// Enum NYAINDXNYSEComposite for value: NYA.INDX (NYSE Composite)
            /// </summary>
            [EnumMember(Value = "NYA.INDX (NYSE Composite)")]
            NYAINDXNYSEComposite = 8,

            /// <summary>
            /// Enum IXICINDXNASDAQComposite for value: IXIC.INDX (NASDAQ Composite)
            /// </summary>
            [EnumMember(Value = "IXIC.INDX (NASDAQ Composite)")]
            IXICINDXNASDAQComposite = 9,

            /// <summary>
            /// Enum NDXINDXNASDAQ100 for value: NDX.INDX (NASDAQ 100)
            /// </summary>
            [EnumMember(Value = "NDX.INDX (NASDAQ 100)")]
            NDXINDXNASDAQ100 = 10,

            /// <summary>
            /// Enum GSPCINDXSP500 for value: GSPC.INDX (S&P 500)
            /// </summary>
            [EnumMember(Value = "GSPC.INDX (S&P 500)")]
            GSPCINDXSP500 = 11,

            /// <summary>
            /// Enum ESINDXSP500Futures for value: ES.INDX (S&P 500 Futures)
            /// </summary>
            [EnumMember(Value = "ES.INDX (S&P 500 Futures)")]
            ESINDXSP500Futures = 12,

            /// <summary>
            /// Enum MIDINDXSPMidcap400 for value: MID.INDX (S&P Midcap 400)
            /// </summary>
            [EnumMember(Value = "MID.INDX (S&P Midcap 400)")]
            MIDINDXSPMidcap400 = 13,

            /// <summary>
            /// Enum GPTSEINDXSPTSXCompositeIndexCanada for value: GPTSE.INDX (S&P TSX Composite Index [Canada])
            /// </summary>
            [EnumMember(Value = "GPTSE.INDX (S&P TSX Composite Index [Canada])")]
            GPTSEINDXSPTSXCompositeIndexCanada = 14,

            /// <summary>
            /// Enum FTSEINDXFTSE100IndexUK for value: FTSE.INDX (FTSE 100 Index [UK])
            /// </summary>
            [EnumMember(Value = "FTSE.INDX (FTSE 100 Index [UK])")]
            FTSEINDXFTSE100IndexUK = 15,

            /// <summary>
            /// Enum CDAXXINDXDAXCompositeIndexGermany for value: CDAXX.INDX (DAX Composite Index [Germany])
            /// </summary>
            [EnumMember(Value = "CDAXX.INDX (DAX Composite Index [Germany])")]
            CDAXXINDXDAXCompositeIndexGermany = 16,

            /// <summary>
            /// Enum GDAXIINDXDAXIndexGermany for value: GDAXI.INDX (DAX Index [Germany])
            /// </summary>
            [EnumMember(Value = "GDAXI.INDX (DAX Index [Germany])")]
            GDAXIINDXDAXIndexGermany = 17,

            /// <summary>
            /// Enum HSCEINDXHangSengChinaEnterpriseCEI for value: HSCE.INDX (Hang Seng China Enterprise (CEI))
            /// </summary>
            [EnumMember(Value = "HSCE.INDX (Hang Seng China Enterprise (CEI))")]
            HSCEINDXHangSengChinaEnterpriseCEI = 18,

            /// <summary>
            /// Enum HSIINDXHangSengIndexHongKong for value: HSI.INDX (Hang Seng Index [Hong Kong])
            /// </summary>
            [EnumMember(Value = "HSI.INDX (Hang Seng Index [Hong Kong])")]
            HSIINDXHangSengIndexHongKong = 19,

            /// <summary>
            /// Enum N100INDXEuroNext100 for value: N100.INDX (EuroNext 100)
            /// </summary>
            [EnumMember(Value = "N100.INDX (EuroNext 100)")]
            N100INDXEuroNext100 = 20,

            /// <summary>
            /// Enum N225INDXNikkei225Index for value: N225.INDX (Nikkei 225 Index)
            /// </summary>
            [EnumMember(Value = "N225.INDX (Nikkei 225 Index)")]
            N225INDXNikkei225Index = 21,

            /// <summary>
            /// Enum RTSIINDXRTSIIndexRussia for value: RTSI.INDX (RTSI Index [Russia])
            /// </summary>
            [EnumMember(Value = "RTSI.INDX (RTSI Index [Russia])")]
            RTSIINDXRTSIIndexRussia = 22,

            /// <summary>
            /// Enum SSECINDXShanghaiComposite for value: SSEC.INDX (Shanghai Composite)
            /// </summary>
            [EnumMember(Value = "SSEC.INDX (Shanghai Composite)")]
            SSECINDXShanghaiComposite = 23,

            /// <summary>
            /// Enum SSMIINDXSwissMarketIndex for value: SSMI.INDX (Swiss Market Index)
            /// </summary>
            [EnumMember(Value = "SSMI.INDX (Swiss Market Index)")]
            SSMIINDXSwissMarketIndex = 24

        }

        /// <summary>
        /// Market index
        /// </summary>
        /// <value>Market index</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = false)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputMarketIndex" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputMarketIndex() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputMarketIndex" /> class.
        /// </summary>
        /// <param name="symbol">Market index (required).</param>
        /// <param name="date">Date (yyyy-MM-dd, leave empty for last trading day).</param>
        public InputMarketIndex(SymbolEnum symbol = default(SymbolEnum), string date = default(string))
        {
            this.Symbol = symbol;
            this.Date = date;
        }

        /// <summary>
        /// Date (yyyy-MM-dd, leave empty for last trading day)
        /// </summary>
        /// <value>Date (yyyy-MM-dd, leave empty for last trading day)</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputMarketIndex {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputMarketIndex);
        }

        /// <summary>
        /// Returns true if InputMarketIndex instances are equal
        /// </summary>
        /// <param name="input">Instance of InputMarketIndex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputMarketIndex input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    this.Symbol.Equals(input.Symbol)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
