/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputJoinStrings
    /// </summary>
    [DataContract(Name = "inputJoinStrings")]
    public partial class InputJoinStrings : IEquatable<InputJoinStrings>, IValidatableObject
    {
        /// <summary>
        /// Convert strings in collection to lowercase
        /// </summary>
        /// <value>Convert strings in collection to lowercase</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LowerEnum
        {
            /// <summary>
            /// Enum True for value: True
            /// </summary>
            [EnumMember(Value = "True")]
            True = 1,

            /// <summary>
            /// Enum False for value: False
            /// </summary>
            [EnumMember(Value = "False")]
            False = 2

        }

        /// <summary>
        /// Convert strings in collection to lowercase
        /// </summary>
        /// <value>Convert strings in collection to lowercase</value>
        [DataMember(Name = "lower", IsRequired = true, EmitDefaultValue = false)]
        public LowerEnum Lower { get; set; }
        /// <summary>
        /// Trim strings in collection
        /// </summary>
        /// <value>Trim strings in collection</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrimEnum
        {
            /// <summary>
            /// Enum True for value: True
            /// </summary>
            [EnumMember(Value = "True")]
            True = 1,

            /// <summary>
            /// Enum False for value: False
            /// </summary>
            [EnumMember(Value = "False")]
            False = 2

        }

        /// <summary>
        /// Trim strings in collection
        /// </summary>
        /// <value>Trim strings in collection</value>
        [DataMember(Name = "trim", IsRequired = true, EmitDefaultValue = false)]
        public TrimEnum Trim { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputJoinStrings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputJoinStrings() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputJoinStrings" /> class.
        /// </summary>
        /// <param name="input">Collection of strings to be joined (required).</param>
        /// <param name="separator">Separator character (required).</param>
        /// <param name="lower">Convert strings in collection to lowercase (required).</param>
        /// <param name="trim">Trim strings in collection (required).</param>
        public InputJoinStrings(List<string> input = default(List<string>), string separator = default(string), LowerEnum lower = default(LowerEnum), TrimEnum trim = default(TrimEnum))
        {
            // to ensure "input" is required (not null)
            this.Input = input ?? throw new ArgumentNullException("input is a required property for InputJoinStrings and cannot be null");
            // to ensure "separator" is required (not null)
            this.Separator = separator ?? throw new ArgumentNullException("separator is a required property for InputJoinStrings and cannot be null");
            this.Lower = lower;
            this.Trim = trim;
        }

        /// <summary>
        /// Collection of strings to be joined
        /// </summary>
        /// <value>Collection of strings to be joined</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Input { get; set; }

        /// <summary>
        /// Separator character
        /// </summary>
        /// <value>Separator character</value>
        [DataMember(Name = "separator", IsRequired = true, EmitDefaultValue = false)]
        public string Separator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputJoinStrings {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  Lower: ").Append(Lower).Append("\n");
            sb.Append("  Trim: ").Append(Trim).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputJoinStrings);
        }

        /// <summary>
        /// Returns true if InputJoinStrings instances are equal
        /// </summary>
        /// <param name="input">Instance of InputJoinStrings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputJoinStrings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.Separator == input.Separator ||
                    (this.Separator != null &&
                    this.Separator.Equals(input.Separator))
                ) && 
                (
                    this.Lower == input.Lower ||
                    this.Lower.Equals(input.Lower)
                ) && 
                (
                    this.Trim == input.Trim ||
                    this.Trim.Equals(input.Trim)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Separator != null)
                    hashCode = hashCode * 59 + this.Separator.GetHashCode();
                hashCode = hashCode * 59 + this.Lower.GetHashCode();
                hashCode = hashCode * 59 + this.Trim.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
