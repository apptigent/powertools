/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputConvertEnergy
    /// </summary>
    [DataContract(Name = "inputConvertEnergy")]
    public partial class InputConvertEnergy : IEquatable<InputConvertEnergy>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum BritishThermalUnit for value: BritishThermalUnit
            /// </summary>
            [EnumMember(Value = "BritishThermalUnit")]
            BritishThermalUnit = 1,

            /// <summary>
            /// Enum Calorie for value: Calorie
            /// </summary>
            [EnumMember(Value = "Calorie")]
            Calorie = 2,

            /// <summary>
            /// Enum ElectronVolt for value: ElectronVolt
            /// </summary>
            [EnumMember(Value = "ElectronVolt")]
            ElectronVolt = 3,

            /// <summary>
            /// Enum FootPound for value: FootPound
            /// </summary>
            [EnumMember(Value = "FootPound")]
            FootPound = 4,

            /// <summary>
            /// Enum GigawattHour for value: GigawattHour
            /// </summary>
            [EnumMember(Value = "GigawattHour")]
            GigawattHour = 5,

            /// <summary>
            /// Enum Joule for value: Joule
            /// </summary>
            [EnumMember(Value = "Joule")]
            Joule = 6,

            /// <summary>
            /// Enum Kilocalorie for value: Kilocalorie
            /// </summary>
            [EnumMember(Value = "Kilocalorie")]
            Kilocalorie = 7,

            /// <summary>
            /// Enum Kilojoule for value: Kilojoule
            /// </summary>
            [EnumMember(Value = "Kilojoule")]
            Kilojoule = 8,

            /// <summary>
            /// Enum KilowattHour for value: KilowattHour
            /// </summary>
            [EnumMember(Value = "KilowattHour")]
            KilowattHour = 9,

            /// <summary>
            /// Enum Megajoule for value: Megajoule
            /// </summary>
            [EnumMember(Value = "Megajoule")]
            Megajoule = 10,

            /// <summary>
            /// Enum MegawattHour for value: MegawattHour
            /// </summary>
            [EnumMember(Value = "MegawattHour")]
            MegawattHour = 11,

            /// <summary>
            /// Enum TerawattHour for value: TerawattHour
            /// </summary>
            [EnumMember(Value = "TerawattHour")]
            TerawattHour = 12,

            /// <summary>
            /// Enum ThermEU for value: Therm (EU)
            /// </summary>
            [EnumMember(Value = "Therm (EU)")]
            ThermEU = 13,

            /// <summary>
            /// Enum ThermUK for value: Therm (UK)
            /// </summary>
            [EnumMember(Value = "Therm (UK)")]
            ThermUK = 14,

            /// <summary>
            /// Enum ThermUS for value: Therm (US)
            /// </summary>
            [EnumMember(Value = "Therm (US)")]
            ThermUS = 15,

            /// <summary>
            /// Enum WattHour for value: WattHour
            /// </summary>
            [EnumMember(Value = "WattHour")]
            WattHour = 16

        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Defines Target
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetEnum
        {
            /// <summary>
            /// Enum BritishThermalUnit for value: BritishThermalUnit
            /// </summary>
            [EnumMember(Value = "BritishThermalUnit")]
            BritishThermalUnit = 1,

            /// <summary>
            /// Enum Calorie for value: Calorie
            /// </summary>
            [EnumMember(Value = "Calorie")]
            Calorie = 2,

            /// <summary>
            /// Enum ElectronVolt for value: ElectronVolt
            /// </summary>
            [EnumMember(Value = "ElectronVolt")]
            ElectronVolt = 3,

            /// <summary>
            /// Enum FootPound for value: FootPound
            /// </summary>
            [EnumMember(Value = "FootPound")]
            FootPound = 4,

            /// <summary>
            /// Enum GigawattHour for value: GigawattHour
            /// </summary>
            [EnumMember(Value = "GigawattHour")]
            GigawattHour = 5,

            /// <summary>
            /// Enum Joule for value: Joule
            /// </summary>
            [EnumMember(Value = "Joule")]
            Joule = 6,

            /// <summary>
            /// Enum Kilocalorie for value: Kilocalorie
            /// </summary>
            [EnumMember(Value = "Kilocalorie")]
            Kilocalorie = 7,

            /// <summary>
            /// Enum Kilojoule for value: Kilojoule
            /// </summary>
            [EnumMember(Value = "Kilojoule")]
            Kilojoule = 8,

            /// <summary>
            /// Enum KilowattHour for value: KilowattHour
            /// </summary>
            [EnumMember(Value = "KilowattHour")]
            KilowattHour = 9,

            /// <summary>
            /// Enum Megajoule for value: Megajoule
            /// </summary>
            [EnumMember(Value = "Megajoule")]
            Megajoule = 10,

            /// <summary>
            /// Enum MegawattHour for value: MegawattHour
            /// </summary>
            [EnumMember(Value = "MegawattHour")]
            MegawattHour = 11,

            /// <summary>
            /// Enum TerawattHour for value: TerawattHour
            /// </summary>
            [EnumMember(Value = "TerawattHour")]
            TerawattHour = 12,

            /// <summary>
            /// Enum ThermEU for value: Therm (EU)
            /// </summary>
            [EnumMember(Value = "Therm (EU)")]
            ThermEU = 13,

            /// <summary>
            /// Enum ThermUK for value: Therm (UK)
            /// </summary>
            [EnumMember(Value = "Therm (UK)")]
            ThermUK = 14,

            /// <summary>
            /// Enum ThermUS for value: Therm (US)
            /// </summary>
            [EnumMember(Value = "Therm (US)")]
            ThermUS = 15,

            /// <summary>
            /// Enum WattHour for value: WattHour
            /// </summary>
            [EnumMember(Value = "WattHour")]
            WattHour = 16

        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = false)]
        public TargetEnum Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputConvertEnergy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputConvertEnergy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputConvertEnergy" /> class.
        /// </summary>
        /// <param name="input">input (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="target">target (required).</param>
        public InputConvertEnergy(decimal input = default(decimal), SourceEnum source = default(SourceEnum), TargetEnum target = default(TargetEnum))
        {
            this.Input = input;
            this.Source = source;
            this.Target = target;
        }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public decimal Input { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputConvertEnergy {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputConvertEnergy);
        }

        /// <summary>
        /// Returns true if InputConvertEnergy instances are equal
        /// </summary>
        /// <param name="input">Instance of InputConvertEnergy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputConvertEnergy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input.Equals(input.Input)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target.Equals(input.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Input.GetHashCode();
                hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
