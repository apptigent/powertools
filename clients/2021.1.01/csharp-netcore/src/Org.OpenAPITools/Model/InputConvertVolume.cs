/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputConvertVolume
    /// </summary>
    [DataContract(Name = "inputConvertVolume")]
    public partial class InputConvertVolume : IEquatable<InputConvertVolume>, IValidatableObject
    {
        /// <summary>
        /// Defines Source
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceEnum
        {
            /// <summary>
            /// Enum Centiliter for value: Centiliter
            /// </summary>
            [EnumMember(Value = "Centiliter")]
            Centiliter = 1,

            /// <summary>
            /// Enum CubicCentimeter for value: CubicCentimeter
            /// </summary>
            [EnumMember(Value = "CubicCentimeter")]
            CubicCentimeter = 2,

            /// <summary>
            /// Enum CubicDecimeter for value: CubicDecimeter
            /// </summary>
            [EnumMember(Value = "CubicDecimeter")]
            CubicDecimeter = 3,

            /// <summary>
            /// Enum CubicFoot for value: CubicFoot
            /// </summary>
            [EnumMember(Value = "CubicFoot")]
            CubicFoot = 4,

            /// <summary>
            /// Enum CubicHectometer for value: CubicHectometer
            /// </summary>
            [EnumMember(Value = "CubicHectometer")]
            CubicHectometer = 5,

            /// <summary>
            /// Enum CubicInch for value: CubicInch
            /// </summary>
            [EnumMember(Value = "CubicInch")]
            CubicInch = 6,

            /// <summary>
            /// Enum CubicKilometer for value: CubicKilometer
            /// </summary>
            [EnumMember(Value = "CubicKilometer")]
            CubicKilometer = 7,

            /// <summary>
            /// Enum CubicMeter for value: CubicMeter
            /// </summary>
            [EnumMember(Value = "CubicMeter")]
            CubicMeter = 8,

            /// <summary>
            /// Enum CubicMillimeter for value: CubicMillimeter
            /// </summary>
            [EnumMember(Value = "CubicMillimeter")]
            CubicMillimeter = 9,

            /// <summary>
            /// Enum CubicYard for value: CubicYard
            /// </summary>
            [EnumMember(Value = "CubicYard")]
            CubicYard = 10,

            /// <summary>
            /// Enum Deciliter for value: Deciliter
            /// </summary>
            [EnumMember(Value = "Deciliter")]
            Deciliter = 11,

            /// <summary>
            /// Enum ImperialBeerBarrel for value: ImperialBeerBarrel
            /// </summary>
            [EnumMember(Value = "ImperialBeerBarrel")]
            ImperialBeerBarrel = 12,

            /// <summary>
            /// Enum ImperialGallon for value: ImperialGallon
            /// </summary>
            [EnumMember(Value = "ImperialGallon")]
            ImperialGallon = 13,

            /// <summary>
            /// Enum ImperialOunce for value: ImperialOunce
            /// </summary>
            [EnumMember(Value = "ImperialOunce")]
            ImperialOunce = 14,

            /// <summary>
            /// Enum ImperialPint for value: ImperialPint
            /// </summary>
            [EnumMember(Value = "ImperialPint")]
            ImperialPint = 15,

            /// <summary>
            /// Enum Kiloliter for value: Kiloliter
            /// </summary>
            [EnumMember(Value = "Kiloliter")]
            Kiloliter = 16,

            /// <summary>
            /// Enum Liter for value: Liter
            /// </summary>
            [EnumMember(Value = "Liter")]
            Liter = 17,

            /// <summary>
            /// Enum Microliter for value: Microliter
            /// </summary>
            [EnumMember(Value = "Microliter")]
            Microliter = 18,

            /// <summary>
            /// Enum Milliliter for value: Milliliter
            /// </summary>
            [EnumMember(Value = "Milliliter")]
            Milliliter = 19,

            /// <summary>
            /// Enum Gallon for value: Gallon
            /// </summary>
            [EnumMember(Value = "Gallon")]
            Gallon = 20,

            /// <summary>
            /// Enum Cup for value: Cup
            /// </summary>
            [EnumMember(Value = "Cup")]
            Cup = 21,

            /// <summary>
            /// Enum Ounce for value: Ounce
            /// </summary>
            [EnumMember(Value = "Ounce")]
            Ounce = 22,

            /// <summary>
            /// Enum Pint for value: Pint
            /// </summary>
            [EnumMember(Value = "Pint")]
            Pint = 23,

            /// <summary>
            /// Enum Quart for value: Quart
            /// </summary>
            [EnumMember(Value = "Quart")]
            Quart = 24,

            /// <summary>
            /// Enum Tablespoon for value: Tablespoon
            /// </summary>
            [EnumMember(Value = "Tablespoon")]
            Tablespoon = 25,

            /// <summary>
            /// Enum Teaspoon for value: Teaspoon
            /// </summary>
            [EnumMember(Value = "Teaspoon")]
            Teaspoon = 26

        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = false)]
        public SourceEnum Source { get; set; }
        /// <summary>
        /// Defines Target
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetEnum
        {
            /// <summary>
            /// Enum Centiliter for value: Centiliter
            /// </summary>
            [EnumMember(Value = "Centiliter")]
            Centiliter = 1,

            /// <summary>
            /// Enum CubicCentimeter for value: CubicCentimeter
            /// </summary>
            [EnumMember(Value = "CubicCentimeter")]
            CubicCentimeter = 2,

            /// <summary>
            /// Enum CubicDecimeter for value: CubicDecimeter
            /// </summary>
            [EnumMember(Value = "CubicDecimeter")]
            CubicDecimeter = 3,

            /// <summary>
            /// Enum CubicFoot for value: CubicFoot
            /// </summary>
            [EnumMember(Value = "CubicFoot")]
            CubicFoot = 4,

            /// <summary>
            /// Enum CubicHectometer for value: CubicHectometer
            /// </summary>
            [EnumMember(Value = "CubicHectometer")]
            CubicHectometer = 5,

            /// <summary>
            /// Enum CubicInch for value: CubicInch
            /// </summary>
            [EnumMember(Value = "CubicInch")]
            CubicInch = 6,

            /// <summary>
            /// Enum CubicKilometer for value: CubicKilometer
            /// </summary>
            [EnumMember(Value = "CubicKilometer")]
            CubicKilometer = 7,

            /// <summary>
            /// Enum CubicMeter for value: CubicMeter
            /// </summary>
            [EnumMember(Value = "CubicMeter")]
            CubicMeter = 8,

            /// <summary>
            /// Enum CubicMillimeter for value: CubicMillimeter
            /// </summary>
            [EnumMember(Value = "CubicMillimeter")]
            CubicMillimeter = 9,

            /// <summary>
            /// Enum CubicYard for value: CubicYard
            /// </summary>
            [EnumMember(Value = "CubicYard")]
            CubicYard = 10,

            /// <summary>
            /// Enum Deciliter for value: Deciliter
            /// </summary>
            [EnumMember(Value = "Deciliter")]
            Deciliter = 11,

            /// <summary>
            /// Enum ImperialBeerBarrel for value: ImperialBeerBarrel
            /// </summary>
            [EnumMember(Value = "ImperialBeerBarrel")]
            ImperialBeerBarrel = 12,

            /// <summary>
            /// Enum ImperialGallon for value: ImperialGallon
            /// </summary>
            [EnumMember(Value = "ImperialGallon")]
            ImperialGallon = 13,

            /// <summary>
            /// Enum ImperialOunce for value: ImperialOunce
            /// </summary>
            [EnumMember(Value = "ImperialOunce")]
            ImperialOunce = 14,

            /// <summary>
            /// Enum ImperialPint for value: ImperialPint
            /// </summary>
            [EnumMember(Value = "ImperialPint")]
            ImperialPint = 15,

            /// <summary>
            /// Enum Kiloliter for value: Kiloliter
            /// </summary>
            [EnumMember(Value = "Kiloliter")]
            Kiloliter = 16,

            /// <summary>
            /// Enum Liter for value: Liter
            /// </summary>
            [EnumMember(Value = "Liter")]
            Liter = 17,

            /// <summary>
            /// Enum Microliter for value: Microliter
            /// </summary>
            [EnumMember(Value = "Microliter")]
            Microliter = 18,

            /// <summary>
            /// Enum Milliliter for value: Milliliter
            /// </summary>
            [EnumMember(Value = "Milliliter")]
            Milliliter = 19,

            /// <summary>
            /// Enum Gallon for value: Gallon
            /// </summary>
            [EnumMember(Value = "Gallon")]
            Gallon = 20,

            /// <summary>
            /// Enum Cup for value: Cup
            /// </summary>
            [EnumMember(Value = "Cup")]
            Cup = 21,

            /// <summary>
            /// Enum Ounce for value: Ounce
            /// </summary>
            [EnumMember(Value = "Ounce")]
            Ounce = 22,

            /// <summary>
            /// Enum Pint for value: Pint
            /// </summary>
            [EnumMember(Value = "Pint")]
            Pint = 23,

            /// <summary>
            /// Enum Quart for value: Quart
            /// </summary>
            [EnumMember(Value = "Quart")]
            Quart = 24,

            /// <summary>
            /// Enum Tablespoon for value: Tablespoon
            /// </summary>
            [EnumMember(Value = "Tablespoon")]
            Tablespoon = 25,

            /// <summary>
            /// Enum Teaspoon for value: Teaspoon
            /// </summary>
            [EnumMember(Value = "Teaspoon")]
            Teaspoon = 26

        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", IsRequired = true, EmitDefaultValue = false)]
        public TargetEnum Target { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputConvertVolume" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputConvertVolume() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputConvertVolume" /> class.
        /// </summary>
        /// <param name="input">input (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="target">target (required).</param>
        public InputConvertVolume(decimal input = default(decimal), SourceEnum source = default(SourceEnum), TargetEnum target = default(TargetEnum))
        {
            this.Input = input;
            this.Source = source;
            this.Target = target;
        }

        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public decimal Input { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputConvertVolume {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputConvertVolume);
        }

        /// <summary>
        /// Returns true if InputConvertVolume instances are equal
        /// </summary>
        /// <param name="input">Instance of InputConvertVolume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputConvertVolume input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input.Equals(input.Input)
                ) && 
                (
                    this.Source == input.Source ||
                    this.Source.Equals(input.Source)
                ) && 
                (
                    this.Target == input.Target ||
                    this.Target.Equals(input.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Input.GetHashCode();
                hashCode = hashCode * 59 + this.Source.GetHashCode();
                hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
