/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputCollectionSearch
    /// </summary>
    [DataContract(Name = "inputCollectionSearch")]
    public partial class InputCollectionSearch : IEquatable<InputCollectionSearch>, IValidatableObject
    {
        /// <summary>
        /// Trim white space from comparison string
        /// </summary>
        /// <value>Trim white space from comparison string</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TrimEnum
        {
            /// <summary>
            /// Enum True for value: True
            /// </summary>
            [EnumMember(Value = "True")]
            True = 1,

            /// <summary>
            /// Enum False for value: False
            /// </summary>
            [EnumMember(Value = "False")]
            False = 2

        }

        /// <summary>
        /// Trim white space from comparison string
        /// </summary>
        /// <value>Trim white space from comparison string</value>
        [DataMember(Name = "trim", EmitDefaultValue = false)]
        public TrimEnum? Trim { get; set; }
        /// <summary>
        /// Ignore case when performing comparison
        /// </summary>
        /// <value>Ignore case when performing comparison</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IgnorecaseEnum
        {
            /// <summary>
            /// Enum True for value: True
            /// </summary>
            [EnumMember(Value = "True")]
            True = 1,

            /// <summary>
            /// Enum False for value: False
            /// </summary>
            [EnumMember(Value = "False")]
            False = 2

        }

        /// <summary>
        /// Ignore case when performing comparison
        /// </summary>
        /// <value>Ignore case when performing comparison</value>
        [DataMember(Name = "ignorecase", EmitDefaultValue = false)]
        public IgnorecaseEnum? Ignorecase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionSearch" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputCollectionSearch() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionSearch" /> class.
        /// </summary>
        /// <param name="input">Collection of strings to search (required).</param>
        /// <param name="match">Text to match (required).</param>
        /// <param name="trim">Trim white space from comparison string.</param>
        /// <param name="ignorecase">Ignore case when performing comparison.</param>
        public InputCollectionSearch(List<string> input = default(List<string>), string match = default(string), TrimEnum? trim = default(TrimEnum?), IgnorecaseEnum? ignorecase = default(IgnorecaseEnum?))
        {
            // to ensure "input" is required (not null)
            this.Input = input ?? throw new ArgumentNullException("input is a required property for InputCollectionSearch and cannot be null");
            // to ensure "match" is required (not null)
            this.Match = match ?? throw new ArgumentNullException("match is a required property for InputCollectionSearch and cannot be null");
            this.Trim = trim;
            this.Ignorecase = ignorecase;
        }

        /// <summary>
        /// Collection of strings to search
        /// </summary>
        /// <value>Collection of strings to search</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Input { get; set; }

        /// <summary>
        /// Text to match
        /// </summary>
        /// <value>Text to match</value>
        [DataMember(Name = "match", IsRequired = true, EmitDefaultValue = false)]
        public string Match { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCollectionSearch {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Trim: ").Append(Trim).Append("\n");
            sb.Append("  Ignorecase: ").Append(Ignorecase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputCollectionSearch);
        }

        /// <summary>
        /// Returns true if InputCollectionSearch instances are equal
        /// </summary>
        /// <param name="input">Instance of InputCollectionSearch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCollectionSearch input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.Trim == input.Trim ||
                    this.Trim.Equals(input.Trim)
                ) && 
                (
                    this.Ignorecase == input.Ignorecase ||
                    this.Ignorecase.Equals(input.Ignorecase)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                hashCode = hashCode * 59 + this.Trim.GetHashCode();
                hashCode = hashCode * 59 + this.Ignorecase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
