/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputTranslateString
    /// </summary>
    [DataContract(Name = "inputTranslateString")]
    public partial class InputTranslateString : IEquatable<InputTranslateString>, IValidatableObject
    {
        /// <summary>
        /// Translation language
        /// </summary>
        /// <value>Translation language</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            /// <summary>
            /// Enum Arabic for value: Arabic
            /// </summary>
            [EnumMember(Value = "Arabic")]
            Arabic = 1,

            /// <summary>
            /// Enum ChineseSimplified for value: Chinese (Simplified)
            /// </summary>
            [EnumMember(Value = "Chinese (Simplified)")]
            ChineseSimplified = 2,

            /// <summary>
            /// Enum Czech for value: Czech
            /// </summary>
            [EnumMember(Value = "Czech")]
            Czech = 3,

            /// <summary>
            /// Enum Danish for value: Danish
            /// </summary>
            [EnumMember(Value = "Danish")]
            Danish = 4,

            /// <summary>
            /// Enum Dutch for value: Dutch
            /// </summary>
            [EnumMember(Value = "Dutch")]
            Dutch = 5,

            /// <summary>
            /// Enum English for value: English
            /// </summary>
            [EnumMember(Value = "English")]
            English = 6,

            /// <summary>
            /// Enum Finnish for value: Finnish
            /// </summary>
            [EnumMember(Value = "Finnish")]
            Finnish = 7,

            /// <summary>
            /// Enum French for value: French
            /// </summary>
            [EnumMember(Value = "French")]
            French = 8,

            /// <summary>
            /// Enum German for value: German
            /// </summary>
            [EnumMember(Value = "German")]
            German = 9,

            /// <summary>
            /// Enum Greek for value: Greek
            /// </summary>
            [EnumMember(Value = "Greek")]
            Greek = 10,

            /// <summary>
            /// Enum Hindi for value: Hindi
            /// </summary>
            [EnumMember(Value = "Hindi")]
            Hindi = 11,

            /// <summary>
            /// Enum Hungarian for value: Hungarian
            /// </summary>
            [EnumMember(Value = "Hungarian")]
            Hungarian = 12,

            /// <summary>
            /// Enum Italian for value: Italian
            /// </summary>
            [EnumMember(Value = "Italian")]
            Italian = 13,

            /// <summary>
            /// Enum Japanese for value: Japanese
            /// </summary>
            [EnumMember(Value = "Japanese")]
            Japanese = 14,

            /// <summary>
            /// Enum Klingon for value: Klingon
            /// </summary>
            [EnumMember(Value = "Klingon")]
            Klingon = 15,

            /// <summary>
            /// Enum Korean for value: Korean
            /// </summary>
            [EnumMember(Value = "Korean")]
            Korean = 16,

            /// <summary>
            /// Enum Norweigan for value: Norweigan
            /// </summary>
            [EnumMember(Value = "Norweigan")]
            Norweigan = 17,

            /// <summary>
            /// Enum Polish for value: Polish
            /// </summary>
            [EnumMember(Value = "Polish")]
            Polish = 18,

            /// <summary>
            /// Enum Portuguese for value: Portuguese
            /// </summary>
            [EnumMember(Value = "Portuguese")]
            Portuguese = 19,

            /// <summary>
            /// Enum Russian for value: Russian
            /// </summary>
            [EnumMember(Value = "Russian")]
            Russian = 20,

            /// <summary>
            /// Enum Spanish for value: Spanish
            /// </summary>
            [EnumMember(Value = "Spanish")]
            Spanish = 21,

            /// <summary>
            /// Enum Swedish for value: Swedish
            /// </summary>
            [EnumMember(Value = "Swedish")]
            Swedish = 22,

            /// <summary>
            /// Enum Turkish for value: Turkish
            /// </summary>
            [EnumMember(Value = "Turkish")]
            Turkish = 23,

            /// <summary>
            /// Enum Vietnamese for value: Vietnamese
            /// </summary>
            [EnumMember(Value = "Vietnamese")]
            Vietnamese = 24,

            /// <summary>
            /// Enum Welsh for value: Welsh
            /// </summary>
            [EnumMember(Value = "Welsh")]
            Welsh = 25

        }

        /// <summary>
        /// Translation language
        /// </summary>
        /// <value>Translation language</value>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = false)]
        public LanguageEnum Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputTranslateString" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputTranslateString() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputTranslateString" /> class.
        /// </summary>
        /// <param name="input">String containing the text to be translated (required).</param>
        /// <param name="language">Translation language (required).</param>
        public InputTranslateString(string input = default(string), LanguageEnum language = default(LanguageEnum))
        {
            // to ensure "input" is required (not null)
            this.Input = input ?? throw new ArgumentNullException("input is a required property for InputTranslateString and cannot be null");
            this.Language = language;
        }

        /// <summary>
        /// String containing the text to be translated
        /// </summary>
        /// <value>String containing the text to be translated</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public string Input { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputTranslateString {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputTranslateString);
        }

        /// <summary>
        /// Returns true if InputTranslateString instances are equal
        /// </summary>
        /// <param name="input">Instance of InputTranslateString to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputTranslateString input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Language == input.Language ||
                    this.Language.Equals(input.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
