/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputTextToSpeech
    /// </summary>
    [DataContract(Name = "inputTextToSpeech")]
    public partial class InputTextToSpeech : IEquatable<InputTextToSpeech>, IValidatableObject
    {
        /// <summary>
        /// Text or file type
        /// </summary>
        /// <value>Text or file type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PlainText for value: PlainText
            /// </summary>
            [EnumMember(Value = "PlainText")]
            PlainText = 1,

            /// <summary>
            /// Enum SSML for value: SSML
            /// </summary>
            [EnumMember(Value = "SSML")]
            SSML = 2

        }

        /// <summary>
        /// Text or file type
        /// </summary>
        /// <value>Text or file type</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Voice locale (must match language of input text)
        /// </summary>
        /// <value>Voice locale (must match language of input text)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoiceEnum
        {
            /// <summary>
            /// Enum ArEGHodaFemale for value: ar-EG, Hoda (Female)
            /// </summary>
            [EnumMember(Value = "ar-EG, Hoda (Female)")]
            ArEGHodaFemale = 1,

            /// <summary>
            /// Enum ArSANaayfMale for value: ar-SA, Naayf (Male)
            /// </summary>
            [EnumMember(Value = "ar-SA, Naayf (Male)")]
            ArSANaayfMale = 2,

            /// <summary>
            /// Enum BgBGIvanMale for value: bg-BG, Ivan (Male)
            /// </summary>
            [EnumMember(Value = "bg-BG, Ivan (Male)")]
            BgBGIvanMale = 3,

            /// <summary>
            /// Enum CaESHerenaFemale for value: ca-ES, Herena (Female)
            /// </summary>
            [EnumMember(Value = "ca-ES, Herena (Female)")]
            CaESHerenaFemale = 4,

            /// <summary>
            /// Enum CsCZJakubMale for value: cs-CZ, Jakub (Male)
            /// </summary>
            [EnumMember(Value = "cs-CZ, Jakub (Male)")]
            CsCZJakubMale = 5,

            /// <summary>
            /// Enum DaDKHelleFemale for value: da-DK, Helle (Female)
            /// </summary>
            [EnumMember(Value = "da-DK, Helle (Female)")]
            DaDKHelleFemale = 6,

            /// <summary>
            /// Enum DeATMichaelMale for value: de-AT, Michael (Male)
            /// </summary>
            [EnumMember(Value = "de-AT, Michael (Male)")]
            DeATMichaelMale = 7,

            /// <summary>
            /// Enum DeCHKarstenMale for value: de-CH, Karsten (Male)
            /// </summary>
            [EnumMember(Value = "de-CH, Karsten (Male)")]
            DeCHKarstenMale = 8,

            /// <summary>
            /// Enum DeDEHeddaFemale for value: de-DE, Hedda (Female)
            /// </summary>
            [EnumMember(Value = "de-DE, Hedda (Female)")]
            DeDEHeddaFemale = 9,

            /// <summary>
            /// Enum DeDEStefanMale for value: de-DE, Stefan (Male)
            /// </summary>
            [EnumMember(Value = "de-DE, Stefan (Male)")]
            DeDEStefanMale = 10,

            /// <summary>
            /// Enum ElGRStefanosMale for value: el-GR, Stefanos (Male)
            /// </summary>
            [EnumMember(Value = "el-GR, Stefanos (Male)")]
            ElGRStefanosMale = 11,

            /// <summary>
            /// Enum EnAUCatherineFemale for value: en-AU, Catherine (Female)
            /// </summary>
            [EnumMember(Value = "en-AU, Catherine (Female)")]
            EnAUCatherineFemale = 12,

            /// <summary>
            /// Enum EnAUHayleyFemale for value: en-AU, Hayley (Female)
            /// </summary>
            [EnumMember(Value = "en-AU, Hayley (Female)")]
            EnAUHayleyFemale = 13,

            /// <summary>
            /// Enum EnCAHeatherFemale for value: en-CA, Heather (Female)
            /// </summary>
            [EnumMember(Value = "en-CA, Heather (Female)")]
            EnCAHeatherFemale = 14,

            /// <summary>
            /// Enum EnCALindaFemale for value: en-CA, Linda (Female)
            /// </summary>
            [EnumMember(Value = "en-CA, Linda (Female)")]
            EnCALindaFemale = 15,

            /// <summary>
            /// Enum EnGBGeorgeMale for value: en-GB, George (Male)
            /// </summary>
            [EnumMember(Value = "en-GB, George (Male)")]
            EnGBGeorgeMale = 16,

            /// <summary>
            /// Enum EnGBHazelFemale for value: en-GB, Hazel (Female)
            /// </summary>
            [EnumMember(Value = "en-GB, Hazel (Female)")]
            EnGBHazelFemale = 17,

            /// <summary>
            /// Enum EnGBSusanFemale for value: en-GB, Susan (Female)
            /// </summary>
            [EnumMember(Value = "en-GB, Susan (Female)")]
            EnGBSusanFemale = 18,

            /// <summary>
            /// Enum EnIESeanMale for value: en-IE, Sean (Male)
            /// </summary>
            [EnumMember(Value = "en-IE, Sean (Male)")]
            EnIESeanMale = 19,

            /// <summary>
            /// Enum EnINHeeraFemale for value: en-IN, Heera (Female)
            /// </summary>
            [EnumMember(Value = "en-IN, Heera (Female)")]
            EnINHeeraFemale = 20,

            /// <summary>
            /// Enum EnINPriyaFemale for value: en-IN, Priya (Female)
            /// </summary>
            [EnumMember(Value = "en-IN, Priya (Female)")]
            EnINPriyaFemale = 21,

            /// <summary>
            /// Enum EnINRaviMale for value: en-IN, Ravi (Male)
            /// </summary>
            [EnumMember(Value = "en-IN, Ravi (Male)")]
            EnINRaviMale = 22,

            /// <summary>
            /// Enum EnUSAriaFemale for value: en-US, Aria (Female)
            /// </summary>
            [EnumMember(Value = "en-US, Aria (Female)")]
            EnUSAriaFemale = 23,

            /// <summary>
            /// Enum EnUSBenjaminMale for value: en-US, Benjamin (Male)
            /// </summary>
            [EnumMember(Value = "en-US, Benjamin (Male)")]
            EnUSBenjaminMale = 24,

            /// <summary>
            /// Enum EnUSGuyMale for value: en-US, Guy (Male)
            /// </summary>
            [EnumMember(Value = "en-US, Guy (Male)")]
            EnUSGuyMale = 25,

            /// <summary>
            /// Enum EnUSZiraFemale for value: en-US, Zira (Female)
            /// </summary>
            [EnumMember(Value = "en-US, Zira (Female)")]
            EnUSZiraFemale = 26,

            /// <summary>
            /// Enum EsESHelenaFemale for value: es-ES, Helena (Female)
            /// </summary>
            [EnumMember(Value = "es-ES, Helena (Female)")]
            EsESHelenaFemale = 27,

            /// <summary>
            /// Enum EsESLauraFemale for value: es-ES, Laura (Female)
            /// </summary>
            [EnumMember(Value = "es-ES, Laura (Female)")]
            EsESLauraFemale = 28,

            /// <summary>
            /// Enum EsESPabloMale for value: es-ES, Pablo (Male)
            /// </summary>
            [EnumMember(Value = "es-ES, Pablo (Male)")]
            EsESPabloMale = 29,

            /// <summary>
            /// Enum EsMXHildaFemale for value: es-MX, Hilda (Female)
            /// </summary>
            [EnumMember(Value = "es-MX, Hilda (Female)")]
            EsMXHildaFemale = 30,

            /// <summary>
            /// Enum EsMXRaulMale for value: es-MX, Raul (Male)
            /// </summary>
            [EnumMember(Value = "es-MX, Raul (Male)")]
            EsMXRaulMale = 31,

            /// <summary>
            /// Enum FiFIHeidiFemale for value: fi-FI, Heidi (Female)
            /// </summary>
            [EnumMember(Value = "fi-FI, Heidi (Female)")]
            FiFIHeidiFemale = 32,

            /// <summary>
            /// Enum FrCACarolineFemale for value: fr-CA, Caroline (Female)
            /// </summary>
            [EnumMember(Value = "fr-CA, Caroline (Female)")]
            FrCACarolineFemale = 33,

            /// <summary>
            /// Enum FrCAHarmonieFemale for value: fr-CA, Harmonie (Female)
            /// </summary>
            [EnumMember(Value = "fr-CA, Harmonie (Female)")]
            FrCAHarmonieFemale = 34,

            /// <summary>
            /// Enum FrCHGuillaumeMale for value: fr-CH, Guillaume (Male)
            /// </summary>
            [EnumMember(Value = "fr-CH, Guillaume (Male)")]
            FrCHGuillaumeMale = 35,

            /// <summary>
            /// Enum FrFRHortenseFemale for value: fr-FR, Hortense (Female)
            /// </summary>
            [EnumMember(Value = "fr-FR, Hortense (Female)")]
            FrFRHortenseFemale = 36,

            /// <summary>
            /// Enum FrFRJulieFemale for value: fr-FR, Julie (Female)
            /// </summary>
            [EnumMember(Value = "fr-FR, Julie (Female)")]
            FrFRJulieFemale = 37,

            /// <summary>
            /// Enum FrFRPaulMale for value: fr-FR, Paul (Male)
            /// </summary>
            [EnumMember(Value = "fr-FR, Paul (Male)")]
            FrFRPaulMale = 38,

            /// <summary>
            /// Enum HeILAsafMale for value: he-IL, Asaf (Male)
            /// </summary>
            [EnumMember(Value = "he-IL, Asaf (Male)")]
            HeILAsafMale = 39,

            /// <summary>
            /// Enum HiINHemantMale for value: hi-IN, Hemant (Male)
            /// </summary>
            [EnumMember(Value = "hi-IN, Hemant (Male)")]
            HiINHemantMale = 40,

            /// <summary>
            /// Enum HiINKalpanaFemale for value: hi-IN, Kalpana (Female)
            /// </summary>
            [EnumMember(Value = "hi-IN, Kalpana (Female)")]
            HiINKalpanaFemale = 41,

            /// <summary>
            /// Enum HrHRMatejMale for value: hr-HR, Matej (Male)
            /// </summary>
            [EnumMember(Value = "hr-HR, Matej (Male)")]
            HrHRMatejMale = 42,

            /// <summary>
            /// Enum HuHUSzabolcsMale for value: hu-HU, Szabolcs (Male)
            /// </summary>
            [EnumMember(Value = "hu-HU, Szabolcs (Male)")]
            HuHUSzabolcsMale = 43,

            /// <summary>
            /// Enum IdIDAndikaMale for value: id-ID, Andika (Male)
            /// </summary>
            [EnumMember(Value = "id-ID, Andika (Male)")]
            IdIDAndikaMale = 44,

            /// <summary>
            /// Enum ItITCosimoMale for value: it-IT, Cosimo (Male)
            /// </summary>
            [EnumMember(Value = "it-IT, Cosimo (Male)")]
            ItITCosimoMale = 45,

            /// <summary>
            /// Enum ItITLuciaFemale for value: it-IT, Lucia (Female)
            /// </summary>
            [EnumMember(Value = "it-IT, Lucia (Female)")]
            ItITLuciaFemale = 46,

            /// <summary>
            /// Enum JaJPAyumiFemale for value: ja-JP, Ayumi (Female)
            /// </summary>
            [EnumMember(Value = "ja-JP, Ayumi (Female)")]
            JaJPAyumiFemale = 47,

            /// <summary>
            /// Enum JaJPHarukaFemale for value: ja-JP, Haruka (Female)
            /// </summary>
            [EnumMember(Value = "ja-JP, Haruka (Female)")]
            JaJPHarukaFemale = 48,

            /// <summary>
            /// Enum JaJPIchiroMale for value: ja-JP, Ichiro (Male)
            /// </summary>
            [EnumMember(Value = "ja-JP, Ichiro (Male)")]
            JaJPIchiroMale = 49,

            /// <summary>
            /// Enum KoKRHeamiFemale for value: ko-KR, Heami (Female)
            /// </summary>
            [EnumMember(Value = "ko-KR, Heami (Female)")]
            KoKRHeamiFemale = 50,

            /// <summary>
            /// Enum MsMYRizwanMale for value: ms-MY, Rizwan (Male)
            /// </summary>
            [EnumMember(Value = "ms-MY, Rizwan (Male)")]
            MsMYRizwanMale = 51,

            /// <summary>
            /// Enum NbNOHuldaFemale for value: nb-NO, Hulda (Female)
            /// </summary>
            [EnumMember(Value = "nb-NO, Hulda (Female)")]
            NbNOHuldaFemale = 52,

            /// <summary>
            /// Enum NlNLHannaFemale for value: nl-NL, Hanna (Female)
            /// </summary>
            [EnumMember(Value = "nl-NL, Hanna (Female)")]
            NlNLHannaFemale = 53,

            /// <summary>
            /// Enum PlPLPaulinaFemale for value: pl-PL, Paulina (Female)
            /// </summary>
            [EnumMember(Value = "pl-PL, Paulina (Female)")]
            PlPLPaulinaFemale = 54,

            /// <summary>
            /// Enum PtBRDanielMale for value: pt-BR, Daniel (Male)
            /// </summary>
            [EnumMember(Value = "pt-BR, Daniel (Male)")]
            PtBRDanielMale = 55,

            /// <summary>
            /// Enum PtBRHeloisaFemale for value: pt-BR, Heloisa (Female)
            /// </summary>
            [EnumMember(Value = "pt-BR, Heloisa (Female)")]
            PtBRHeloisaFemale = 56,

            /// <summary>
            /// Enum PtPTHeliaFemale for value: pt-PT, Helia (Female)
            /// </summary>
            [EnumMember(Value = "pt-PT, Helia (Female)")]
            PtPTHeliaFemale = 57,

            /// <summary>
            /// Enum RoROAndreiMale for value: ro-RO, Andrei (Male)
            /// </summary>
            [EnumMember(Value = "ro-RO, Andrei (Male)")]
            RoROAndreiMale = 58,

            /// <summary>
            /// Enum RuRUEkaterinaFemale for value: ru-RU, Ekaterina (Female)
            /// </summary>
            [EnumMember(Value = "ru-RU, Ekaterina (Female)")]
            RuRUEkaterinaFemale = 59,

            /// <summary>
            /// Enum RuRUIrinaFemale for value: ru-RU, Irina (Female)
            /// </summary>
            [EnumMember(Value = "ru-RU, Irina (Female)")]
            RuRUIrinaFemale = 60,

            /// <summary>
            /// Enum RuRUPavelMale for value: ru-RU, Pavel (Male)
            /// </summary>
            [EnumMember(Value = "ru-RU, Pavel (Male)")]
            RuRUPavelMale = 61,

            /// <summary>
            /// Enum SkSKFilipMale for value: sk-SK, Filip (Male)
            /// </summary>
            [EnumMember(Value = "sk-SK, Filip (Male)")]
            SkSKFilipMale = 62,

            /// <summary>
            /// Enum SlSILadoMale for value: sl-SI, Lado (Male)
            /// </summary>
            [EnumMember(Value = "sl-SI, Lado (Male)")]
            SlSILadoMale = 63,

            /// <summary>
            /// Enum SvSEHedvigFemale for value: sv-SE, Hedvig (Female)
            /// </summary>
            [EnumMember(Value = "sv-SE, Hedvig (Female)")]
            SvSEHedvigFemale = 64,

            /// <summary>
            /// Enum TaINValluvarMale for value: ta-IN, Valluvar (Male)
            /// </summary>
            [EnumMember(Value = "ta-IN, Valluvar (Male)")]
            TaINValluvarMale = 65,

            /// <summary>
            /// Enum TeINChitraFemale for value: te-IN, Chitra (Female)
            /// </summary>
            [EnumMember(Value = "te-IN, Chitra (Female)")]
            TeINChitraFemale = 66,

            /// <summary>
            /// Enum ThTHPattaraMale for value: th-TH, Pattara (Male)
            /// </summary>
            [EnumMember(Value = "th-TH, Pattara (Male)")]
            ThTHPattaraMale = 67,

            /// <summary>
            /// Enum TrTRSedaFemale for value: tr-TR, Seda (Female)
            /// </summary>
            [EnumMember(Value = "tr-TR, Seda (Female)")]
            TrTRSedaFemale = 68,

            /// <summary>
            /// Enum ViVNAnMale for value: vi-VN, An (Male)
            /// </summary>
            [EnumMember(Value = "vi-VN, An (Male)")]
            ViVNAnMale = 69,

            /// <summary>
            /// Enum ZhCNHuihuiFemale for value: zh-CN, Huihui (Female)
            /// </summary>
            [EnumMember(Value = "zh-CN, Huihui (Female)")]
            ZhCNHuihuiFemale = 70,

            /// <summary>
            /// Enum ZhCNKangkangMale for value: zh-CN, Kangkang (Male)
            /// </summary>
            [EnumMember(Value = "zh-CN, Kangkang (Male)")]
            ZhCNKangkangMale = 71,

            /// <summary>
            /// Enum ZhCNYaoyaoFemale for value: zh-CN, Yaoyao (Female)
            /// </summary>
            [EnumMember(Value = "zh-CN, Yaoyao (Female)")]
            ZhCNYaoyaoFemale = 72,

            /// <summary>
            /// Enum ZhHKDannyMale for value: zh-HK, Danny (Male)
            /// </summary>
            [EnumMember(Value = "zh-HK, Danny (Male)")]
            ZhHKDannyMale = 73,

            /// <summary>
            /// Enum ZhHKTracyFemale for value: zh-HK, Tracy (Female)
            /// </summary>
            [EnumMember(Value = "zh-HK, Tracy (Female)")]
            ZhHKTracyFemale = 74,

            /// <summary>
            /// Enum ZhTWHanHanFemale for value: zh-TW, HanHan (Female)
            /// </summary>
            [EnumMember(Value = "zh-TW, HanHan (Female)")]
            ZhTWHanHanFemale = 75,

            /// <summary>
            /// Enum ZhTWYatingFemale for value: zh-TW, Yating (Female)
            /// </summary>
            [EnumMember(Value = "zh-TW, Yating (Female)")]
            ZhTWYatingFemale = 76,

            /// <summary>
            /// Enum ZhTWZhiweiMale for value: zh-TW, Zhiwei (Male)
            /// </summary>
            [EnumMember(Value = "zh-TW, Zhiwei (Male)")]
            ZhTWZhiweiMale = 77

        }

        /// <summary>
        /// Voice locale (must match language of input text)
        /// </summary>
        /// <value>Voice locale (must match language of input text)</value>
        [DataMember(Name = "voice", IsRequired = true, EmitDefaultValue = false)]
        public VoiceEnum Voice { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputTextToSpeech" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputTextToSpeech() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputTextToSpeech" /> class.
        /// </summary>
        /// <param name="text">Text to convert (10,000 characters max) (required).</param>
        /// <param name="type">Text or file type (required) (default to TypeEnum.PlainText).</param>
        /// <param name="voice">Voice locale (must match language of input text) (required) (default to VoiceEnum.EnUSAriaFemale).</param>
        public InputTextToSpeech(string text = default(string), TypeEnum type = TypeEnum.PlainText, VoiceEnum voice = VoiceEnum.EnUSAriaFemale)
        {
            // to ensure "text" is required (not null)
            this.Text = text ?? throw new ArgumentNullException("text is a required property for InputTextToSpeech and cannot be null");
            this.Type = type;
            this.Voice = voice;
        }

        /// <summary>
        /// Text to convert (10,000 characters max)
        /// </summary>
        /// <value>Text to convert (10,000 characters max)</value>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputTextToSpeech {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputTextToSpeech);
        }

        /// <summary>
        /// Returns true if InputTextToSpeech instances are equal
        /// </summary>
        /// <param name="input">Instance of InputTextToSpeech to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputTextToSpeech input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Voice == input.Voice ||
                    this.Voice.Equals(input.Voice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Voice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
