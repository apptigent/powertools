/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputJsonConversionXML
    /// </summary>
    [DataContract(Name = "inputJsonConversionXML")]
    public partial class InputJsonConversionXML : IEquatable<InputJsonConversionXML>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputJsonConversionXML" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputJsonConversionXML() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputJsonConversionXML" /> class.
        /// </summary>
        /// <param name="input">JSON array object (required).</param>
        /// <param name="root">Name of root node (required).</param>
        public InputJsonConversionXML(string input = default(string), string root = default(string))
        {
            // to ensure "input" is required (not null)
            this.Input = input ?? throw new ArgumentNullException("input is a required property for InputJsonConversionXML and cannot be null");
            // to ensure "root" is required (not null)
            this.Root = root ?? throw new ArgumentNullException("root is a required property for InputJsonConversionXML and cannot be null");
        }

        /// <summary>
        /// JSON array object
        /// </summary>
        /// <value>JSON array object</value>
        [DataMember(Name = "input", IsRequired = true, EmitDefaultValue = false)]
        public string Input { get; set; }

        /// <summary>
        /// Name of root node
        /// </summary>
        /// <value>Name of root node</value>
        [DataMember(Name = "root", IsRequired = true, EmitDefaultValue = false)]
        public string Root { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputJsonConversionXML {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Root: ").Append(Root).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputJsonConversionXML);
        }

        /// <summary>
        /// Returns true if InputJsonConversionXML instances are equal
        /// </summary>
        /// <param name="input">Instance of InputJsonConversionXML to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputJsonConversionXML input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Root == input.Root ||
                    (this.Root != null &&
                    this.Root.Equals(input.Root))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Root != null)
                    hashCode = hashCode * 59 + this.Root.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
