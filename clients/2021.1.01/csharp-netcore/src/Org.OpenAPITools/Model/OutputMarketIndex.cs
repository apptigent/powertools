/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// OutputMarketIndex
    /// </summary>
    [DataContract(Name = "outputMarketIndex")]
    public partial class OutputMarketIndex : IEquatable<OutputMarketIndex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputMarketIndex" /> class.
        /// </summary>
        /// <param name="date">Date.</param>
        /// <param name="symbol">Index symbol.</param>
        /// <param name="exchange">Market exchange.</param>
        /// <param name="open">Open value.</param>
        /// <param name="high">High value.</param>
        /// <param name="low">Low value.</param>
        /// <param name="close">Close value.</param>
        /// <param name="volume">Trading volume.</param>
        /// <param name="adjOpen">Adjusted open value.</param>
        /// <param name="adjHigh">Adjusted high value.</param>
        /// <param name="adjLow">Adjusted low value.</param>
        /// <param name="adjClose">Adjusted close value.</param>
        /// <param name="adjVolume">Adjusted trading volume.</param>
        public OutputMarketIndex(string date = default(string), string symbol = default(string), string exchange = default(string), decimal open = default(decimal), decimal high = default(decimal), decimal low = default(decimal), decimal close = default(decimal), decimal volume = default(decimal), decimal adjOpen = default(decimal), decimal adjHigh = default(decimal), decimal adjLow = default(decimal), decimal adjClose = default(decimal), decimal adjVolume = default(decimal))
        {
            this.Date = date;
            this.Symbol = symbol;
            this.Exchange = exchange;
            this.Open = open;
            this.High = high;
            this.Low = low;
            this.Close = close;
            this.Volume = volume;
            this.AdjOpen = adjOpen;
            this.AdjHigh = adjHigh;
            this.AdjLow = adjLow;
            this.AdjClose = adjClose;
            this.AdjVolume = adjVolume;
        }

        /// <summary>
        /// Date
        /// </summary>
        /// <value>Date</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Index symbol
        /// </summary>
        /// <value>Index symbol</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Market exchange
        /// </summary>
        /// <value>Market exchange</value>
        [DataMember(Name = "exchange", EmitDefaultValue = false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Open value
        /// </summary>
        /// <value>Open value</value>
        [DataMember(Name = "open", EmitDefaultValue = false)]
        public decimal Open { get; set; }

        /// <summary>
        /// High value
        /// </summary>
        /// <value>High value</value>
        [DataMember(Name = "high", EmitDefaultValue = false)]
        public decimal High { get; set; }

        /// <summary>
        /// Low value
        /// </summary>
        /// <value>Low value</value>
        [DataMember(Name = "low", EmitDefaultValue = false)]
        public decimal Low { get; set; }

        /// <summary>
        /// Close value
        /// </summary>
        /// <value>Close value</value>
        [DataMember(Name = "close", EmitDefaultValue = false)]
        public decimal Close { get; set; }

        /// <summary>
        /// Trading volume
        /// </summary>
        /// <value>Trading volume</value>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public decimal Volume { get; set; }

        /// <summary>
        /// Adjusted open value
        /// </summary>
        /// <value>Adjusted open value</value>
        [DataMember(Name = "adj_open", EmitDefaultValue = false)]
        public decimal AdjOpen { get; set; }

        /// <summary>
        /// Adjusted high value
        /// </summary>
        /// <value>Adjusted high value</value>
        [DataMember(Name = "adj_high", EmitDefaultValue = false)]
        public decimal AdjHigh { get; set; }

        /// <summary>
        /// Adjusted low value
        /// </summary>
        /// <value>Adjusted low value</value>
        [DataMember(Name = "adj_low", EmitDefaultValue = false)]
        public decimal AdjLow { get; set; }

        /// <summary>
        /// Adjusted close value
        /// </summary>
        /// <value>Adjusted close value</value>
        [DataMember(Name = "adj_close", EmitDefaultValue = false)]
        public decimal AdjClose { get; set; }

        /// <summary>
        /// Adjusted trading volume
        /// </summary>
        /// <value>Adjusted trading volume</value>
        [DataMember(Name = "adj_volume", EmitDefaultValue = false)]
        public decimal AdjVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutputMarketIndex {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  AdjOpen: ").Append(AdjOpen).Append("\n");
            sb.Append("  AdjHigh: ").Append(AdjHigh).Append("\n");
            sb.Append("  AdjLow: ").Append(AdjLow).Append("\n");
            sb.Append("  AdjClose: ").Append(AdjClose).Append("\n");
            sb.Append("  AdjVolume: ").Append(AdjVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputMarketIndex);
        }

        /// <summary>
        /// Returns true if OutputMarketIndex instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputMarketIndex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputMarketIndex input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Open == input.Open ||
                    this.Open.Equals(input.Open)
                ) && 
                (
                    this.High == input.High ||
                    this.High.Equals(input.High)
                ) && 
                (
                    this.Low == input.Low ||
                    this.Low.Equals(input.Low)
                ) && 
                (
                    this.Close == input.Close ||
                    this.Close.Equals(input.Close)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.AdjOpen == input.AdjOpen ||
                    this.AdjOpen.Equals(input.AdjOpen)
                ) && 
                (
                    this.AdjHigh == input.AdjHigh ||
                    this.AdjHigh.Equals(input.AdjHigh)
                ) && 
                (
                    this.AdjLow == input.AdjLow ||
                    this.AdjLow.Equals(input.AdjLow)
                ) && 
                (
                    this.AdjClose == input.AdjClose ||
                    this.AdjClose.Equals(input.AdjClose)
                ) && 
                (
                    this.AdjVolume == input.AdjVolume ||
                    this.AdjVolume.Equals(input.AdjVolume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                hashCode = hashCode * 59 + this.Open.GetHashCode();
                hashCode = hashCode * 59 + this.High.GetHashCode();
                hashCode = hashCode * 59 + this.Low.GetHashCode();
                hashCode = hashCode * 59 + this.Close.GetHashCode();
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                hashCode = hashCode * 59 + this.AdjOpen.GetHashCode();
                hashCode = hashCode * 59 + this.AdjHigh.GetHashCode();
                hashCode = hashCode * 59 + this.AdjLow.GetHashCode();
                hashCode = hashCode * 59 + this.AdjClose.GetHashCode();
                hashCode = hashCode * 59 + this.AdjVolume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
