/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateTimeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>OutputDateDifference</returns>
        OutputDateDifference DateTimeDifference(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference));

        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>ApiResponse of OutputDateDifference</returns>
        ApiResponse<OutputDateDifference> DateTimeDifferenceWithHttpInfo(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference));
        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>OutputDateInfo</returns>
        OutputDateInfo DateTimeInfo(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo));

        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>ApiResponse of OutputDateInfo</returns>
        ApiResponse<OutputDateInfo> DateTimeInfoWithHttpInfo(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo));
        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString FormatDateTime(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat));

        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> FormatDateTimeWithHttpInfo(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat));
        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString WorldTime(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion));

        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> WorldTimeWithHttpInfo(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateTimeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputDateDifference</returns>
        System.Threading.Tasks.Task<OutputDateDifference> DateTimeDifferenceAsync(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputDateDifference)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputDateDifference>> DateTimeDifferenceWithHttpInfoAsync(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputDateInfo</returns>
        System.Threading.Tasks.Task<OutputDateInfo> DateTimeInfoAsync(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputDateInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputDateInfo>> DateTimeInfoWithHttpInfoAsync(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> FormatDateTimeAsync(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> FormatDateTimeWithHttpInfoAsync(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> WorldTimeAsync(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> WorldTimeWithHttpInfoAsync(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateTimeApi : IDateTimeApiSync, IDateTimeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DateTimeApi : IDateTimeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DateTimeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DateTimeApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DateTimeApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DateTimeApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>OutputDateDifference</returns>
        public OutputDateDifference DateTimeDifference(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputDateDifference> localVarResponse = DateTimeDifferenceWithHttpInfo(dateTimeDifference);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>ApiResponse of OutputDateDifference</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputDateDifference> DateTimeDifferenceWithHttpInfo(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeDifference;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputDateDifference>("/DateTimeDifference", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DateTimeDifference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputDateDifference</returns>
        public async System.Threading.Tasks.Task<OutputDateDifference> DateTimeDifferenceAsync(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputDateDifference> localVarResponse = await DateTimeDifferenceWithHttpInfoAsync(dateTimeDifference, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputDateDifference)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputDateDifference>> DateTimeDifferenceWithHttpInfoAsync(InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeDifference;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputDateDifference>("/DateTimeDifference", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DateTimeDifference", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>OutputDateInfo</returns>
        public OutputDateInfo DateTimeInfo(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputDateInfo> localVarResponse = DateTimeInfoWithHttpInfo(dateTimeInfo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>ApiResponse of OutputDateInfo</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputDateInfo> DateTimeInfoWithHttpInfo(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeInfo;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputDateInfo>("/DateTimeInfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DateTimeInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputDateInfo</returns>
        public async System.Threading.Tasks.Task<OutputDateInfo> DateTimeInfoAsync(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputDateInfo> localVarResponse = await DateTimeInfoWithHttpInfoAsync(dateTimeInfo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputDateInfo)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputDateInfo>> DateTimeInfoWithHttpInfoAsync(InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeInfo;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputDateInfo>("/DateTimeInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DateTimeInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString FormatDateTime(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = FormatDateTimeWithHttpInfo(dateTimeFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputString> FormatDateTimeWithHttpInfo(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeFormat;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputString>("/FormatDateTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FormatDateTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> FormatDateTimeAsync(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = await FormatDateTimeWithHttpInfoAsync(dateTimeFormat, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputString>> FormatDateTimeWithHttpInfoAsync(InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeFormat;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputString>("/FormatDateTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FormatDateTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString WorldTime(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = WorldTimeWithHttpInfo(dateTimeConversion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputString> WorldTimeWithHttpInfo(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeConversion;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputString>("/WorldTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorldTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> WorldTimeAsync(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = await WorldTimeWithHttpInfoAsync(dateTimeConversion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputString>> WorldTimeWithHttpInfoAsync(InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = dateTimeConversion;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputString>("/WorldTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WorldTime", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
