/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Collections - Add to collection
        /// </summary>
        /// <remarks>
        /// Add an item to a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        OutputCollectionResult AddToCollection(InputCollectionModify collectionModify = default(InputCollectionModify));

        /// <summary>
        /// Collections - Add to collection
        /// </summary>
        /// <remarks>
        /// Add an item to a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        ApiResponse<OutputCollectionResult> AddToCollectionWithHttpInfo(InputCollectionModify collectionModify = default(InputCollectionModify));
        /// <summary>
        /// Collections - Contains number
        /// </summary>
        /// <remarks>
        /// Determine if a collection contains a specific number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionNumber</returns>
        OutputCollectionNumber CollectionContainsNumber(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric));

        /// <summary>
        /// Collections - Contains number
        /// </summary>
        /// <remarks>
        /// Determine if a collection contains a specific number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionNumber</returns>
        ApiResponse<OutputCollectionNumber> CollectionContainsNumberWithHttpInfo(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric));
        /// <summary>
        /// Collections - Contains string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection contain a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionString</returns>
        OutputCollectionString CollectionContainsString(InputCollectionSearch collectionSearch = default(InputCollectionSearch));

        /// <summary>
        /// Collections - Contains string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection contain a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionString</returns>
        ApiResponse<OutputCollectionString> CollectionContainsStringWithHttpInfo(InputCollectionSearch collectionSearch = default(InputCollectionSearch));
        /// <summary>
        /// Collections - Ends with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection end with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionString</returns>
        OutputCollectionString CollectionEndsWithString(InputCollectionSearch collectionSearch = default(InputCollectionSearch));

        /// <summary>
        /// Collections - Ends with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection end with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionString</returns>
        ApiResponse<OutputCollectionString> CollectionEndsWithStringWithHttpInfo(InputCollectionSearch collectionSearch = default(InputCollectionSearch));
        /// <summary>
        /// Collections - Starts with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection start with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionString</returns>
        OutputCollectionString CollectionStartsWithString(InputCollectionSearch collectionSearch = default(InputCollectionSearch));

        /// <summary>
        /// Collections - Starts with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection start with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionString</returns>
        ApiResponse<OutputCollectionString> CollectionStartsWithStringWithHttpInfo(InputCollectionSearch collectionSearch = default(InputCollectionSearch));
        /// <summary>
        /// Collections - Collection to JSON
        /// </summary>
        /// <remarks>
        /// Convert a collection to a named JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString CollectionToJSON(InputCollectionConversion collectionConversion = default(InputCollectionConversion));

        /// <summary>
        /// Collections - Collection to JSON
        /// </summary>
        /// <remarks>
        /// Convert a collection to a named JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> CollectionToJSONWithHttpInfo(InputCollectionConversion collectionConversion = default(InputCollectionConversion));
        /// <summary>
        /// Collections - Collection to XML
        /// </summary>
        /// <remarks>
        /// Convert a collection to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString CollectionToXml(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML));

        /// <summary>
        /// Collections - Collection to XML
        /// </summary>
        /// <remarks>
        /// Convert a collection to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> CollectionToXmlWithHttpInfo(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML));
        /// <summary>
        /// Collections - Count collection
        /// </summary>
        /// <remarks>
        /// Count a collection of items
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CountCollection(InputCollectionCount collectionCount = default(InputCollectionCount));

        /// <summary>
        /// Collections - Count collection
        /// </summary>
        /// <remarks>
        /// Count a collection of items
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CountCollectionWithHttpInfo(InputCollectionCount collectionCount = default(InputCollectionCount));
        /// <summary>
        /// Collections - Filter collection
        /// </summary>
        /// <remarks>
        /// Filter a collection of strings by keyword
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        OutputCollectionResult FilterCollection(InputCollectionFilter collectionFilter = default(InputCollectionFilter));

        /// <summary>
        /// Collections - Filter collection
        /// </summary>
        /// <remarks>
        /// Filter a collection of strings by keyword
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        ApiResponse<OutputCollectionResult> FilterCollectionWithHttpInfo(InputCollectionFilter collectionFilter = default(InputCollectionFilter));
        /// <summary>
        /// Collections - Remove from collection
        /// </summary>
        /// <remarks>
        /// Remove an item from a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        OutputCollectionResult RemoveFromCollection(InputCollectionModify collectionModify = default(InputCollectionModify));

        /// <summary>
        /// Collections - Remove from collection
        /// </summary>
        /// <remarks>
        /// Remove an item from a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        ApiResponse<OutputCollectionResult> RemoveFromCollectionWithHttpInfo(InputCollectionModify collectionModify = default(InputCollectionModify));
        /// <summary>
        /// Collections - Replace values in collection
        /// </summary>
        /// <remarks>
        /// Replace whole or partial strings in a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        OutputCollectionResult ReplaceValuesInCollection(InputCollectionReplace collectionReplace = default(InputCollectionReplace));

        /// <summary>
        /// Collections - Replace values in collection
        /// </summary>
        /// <remarks>
        /// Replace whole or partial strings in a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        ApiResponse<OutputCollectionResult> ReplaceValuesInCollectionWithHttpInfo(InputCollectionReplace collectionReplace = default(InputCollectionReplace));
        /// <summary>
        /// Collections - Sort collection
        /// </summary>
        /// <remarks>
        /// Sort a collection of strings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        OutputCollectionResult SortCollection(InputCollectionSort collectionSort = default(InputCollectionSort));

        /// <summary>
        /// Collections - Sort collection
        /// </summary>
        /// <remarks>
        /// Sort a collection of strings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        ApiResponse<OutputCollectionResult> SortCollectionWithHttpInfo(InputCollectionSort collectionSort = default(InputCollectionSort));
        /// <summary>
        /// Collections - Split collection
        /// </summary>
        /// <remarks>
        /// Split a collection of items by matching value or index
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <returns>OutputMultiCollection</returns>
        OutputMultiCollection SplitCollection(InputCollectionSplit collectionSplit = default(InputCollectionSplit));

        /// <summary>
        /// Collections - Split collection
        /// </summary>
        /// <remarks>
        /// Split a collection of items by matching value or index
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputMultiCollection</returns>
        ApiResponse<OutputMultiCollection> SplitCollectionWithHttpInfo(InputCollectionSplit collectionSplit = default(InputCollectionSplit));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Collections - Add to collection
        /// </summary>
        /// <remarks>
        /// Add an item to a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        System.Threading.Tasks.Task<OutputCollectionResult> AddToCollectionAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Add to collection
        /// </summary>
        /// <remarks>
        /// Add an item to a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionResult>> AddToCollectionWithHttpInfoAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Contains number
        /// </summary>
        /// <remarks>
        /// Determine if a collection contains a specific number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionNumber</returns>
        System.Threading.Tasks.Task<OutputCollectionNumber> CollectionContainsNumberAsync(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Contains number
        /// </summary>
        /// <remarks>
        /// Determine if a collection contains a specific number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionNumber>> CollectionContainsNumberWithHttpInfoAsync(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Contains string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection contain a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionString</returns>
        System.Threading.Tasks.Task<OutputCollectionString> CollectionContainsStringAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Contains string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection contain a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionString>> CollectionContainsStringWithHttpInfoAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Ends with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection end with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionString</returns>
        System.Threading.Tasks.Task<OutputCollectionString> CollectionEndsWithStringAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Ends with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection end with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionString>> CollectionEndsWithStringWithHttpInfoAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Starts with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection start with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionString</returns>
        System.Threading.Tasks.Task<OutputCollectionString> CollectionStartsWithStringAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Starts with string
        /// </summary>
        /// <remarks>
        /// Determine if any items in a collection start with a specific string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionString>> CollectionStartsWithStringWithHttpInfoAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Collection to JSON
        /// </summary>
        /// <remarks>
        /// Convert a collection to a named JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> CollectionToJSONAsync(InputCollectionConversion collectionConversion = default(InputCollectionConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Collection to JSON
        /// </summary>
        /// <remarks>
        /// Convert a collection to a named JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> CollectionToJSONWithHttpInfoAsync(InputCollectionConversion collectionConversion = default(InputCollectionConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Collection to XML
        /// </summary>
        /// <remarks>
        /// Convert a collection to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> CollectionToXmlAsync(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Collection to XML
        /// </summary>
        /// <remarks>
        /// Convert a collection to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> CollectionToXmlWithHttpInfoAsync(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Count collection
        /// </summary>
        /// <remarks>
        /// Count a collection of items
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CountCollectionAsync(InputCollectionCount collectionCount = default(InputCollectionCount), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Count collection
        /// </summary>
        /// <remarks>
        /// Count a collection of items
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CountCollectionWithHttpInfoAsync(InputCollectionCount collectionCount = default(InputCollectionCount), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Filter collection
        /// </summary>
        /// <remarks>
        /// Filter a collection of strings by keyword
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        System.Threading.Tasks.Task<OutputCollectionResult> FilterCollectionAsync(InputCollectionFilter collectionFilter = default(InputCollectionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Filter collection
        /// </summary>
        /// <remarks>
        /// Filter a collection of strings by keyword
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionResult>> FilterCollectionWithHttpInfoAsync(InputCollectionFilter collectionFilter = default(InputCollectionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Remove from collection
        /// </summary>
        /// <remarks>
        /// Remove an item from a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        System.Threading.Tasks.Task<OutputCollectionResult> RemoveFromCollectionAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Remove from collection
        /// </summary>
        /// <remarks>
        /// Remove an item from a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionResult>> RemoveFromCollectionWithHttpInfoAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Replace values in collection
        /// </summary>
        /// <remarks>
        /// Replace whole or partial strings in a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        System.Threading.Tasks.Task<OutputCollectionResult> ReplaceValuesInCollectionAsync(InputCollectionReplace collectionReplace = default(InputCollectionReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Replace values in collection
        /// </summary>
        /// <remarks>
        /// Replace whole or partial strings in a collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionResult>> ReplaceValuesInCollectionWithHttpInfoAsync(InputCollectionReplace collectionReplace = default(InputCollectionReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Sort collection
        /// </summary>
        /// <remarks>
        /// Sort a collection of strings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        System.Threading.Tasks.Task<OutputCollectionResult> SortCollectionAsync(InputCollectionSort collectionSort = default(InputCollectionSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Sort collection
        /// </summary>
        /// <remarks>
        /// Sort a collection of strings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputCollectionResult>> SortCollectionWithHttpInfoAsync(InputCollectionSort collectionSort = default(InputCollectionSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collections - Split collection
        /// </summary>
        /// <remarks>
        /// Split a collection of items by matching value or index
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputMultiCollection</returns>
        System.Threading.Tasks.Task<OutputMultiCollection> SplitCollectionAsync(InputCollectionSplit collectionSplit = default(InputCollectionSplit), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collections - Split collection
        /// </summary>
        /// <remarks>
        /// Split a collection of items by matching value or index
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputMultiCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputMultiCollection>> SplitCollectionWithHttpInfoAsync(InputCollectionSplit collectionSplit = default(InputCollectionSplit), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectionsApi : ICollectionsApiSync, ICollectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectionsApi : ICollectionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CollectionsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Collections - Add to collection Add an item to a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        public OutputCollectionResult AddToCollection(InputCollectionModify collectionModify = default(InputCollectionModify))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = AddToCollectionWithHttpInfo(collectionModify);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Add to collection Add an item to a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> AddToCollectionWithHttpInfo(InputCollectionModify collectionModify = default(InputCollectionModify))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionModify;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionResult>("/AddToCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Add to collection Add an item to a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        public async System.Threading.Tasks.Task<OutputCollectionResult> AddToCollectionAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = await AddToCollectionWithHttpInfoAsync(collectionModify, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Add to collection Add an item to a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult>> AddToCollectionWithHttpInfoAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionModify;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionResult>("/AddToCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddToCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Contains number Determine if a collection contains a specific number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionNumber</returns>
        public OutputCollectionNumber CollectionContainsNumber(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionNumber> localVarResponse = CollectionContainsNumberWithHttpInfo(collectionSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Contains number Determine if a collection contains a specific number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionNumber</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionNumber> CollectionContainsNumberWithHttpInfo(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionNumber>("/CollectionContainsNumber", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionContainsNumber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Contains number Determine if a collection contains a specific number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionNumber</returns>
        public async System.Threading.Tasks.Task<OutputCollectionNumber> CollectionContainsNumberAsync(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionNumber> localVarResponse = await CollectionContainsNumberWithHttpInfoAsync(collectionSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Contains number Determine if a collection contains a specific number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionNumber)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionNumber>> CollectionContainsNumberWithHttpInfoAsync(InputCollectionSearchNumeric collectionSearch = default(InputCollectionSearchNumeric), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionNumber>("/CollectionContainsNumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionContainsNumber", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Contains string Determine if any items in a collection contain a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionString</returns>
        public OutputCollectionString CollectionContainsString(InputCollectionSearch collectionSearch = default(InputCollectionSearch))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> localVarResponse = CollectionContainsStringWithHttpInfo(collectionSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Contains string Determine if any items in a collection contain a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> CollectionContainsStringWithHttpInfo(InputCollectionSearch collectionSearch = default(InputCollectionSearch))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionString>("/CollectionContainsString", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionContainsString", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Contains string Determine if any items in a collection contain a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionString</returns>
        public async System.Threading.Tasks.Task<OutputCollectionString> CollectionContainsStringAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> localVarResponse = await CollectionContainsStringWithHttpInfoAsync(collectionSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Contains string Determine if any items in a collection contain a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionString>> CollectionContainsStringWithHttpInfoAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionString>("/CollectionContainsString", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionContainsString", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Ends with string Determine if any items in a collection end with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionString</returns>
        public OutputCollectionString CollectionEndsWithString(InputCollectionSearch collectionSearch = default(InputCollectionSearch))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> localVarResponse = CollectionEndsWithStringWithHttpInfo(collectionSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Ends with string Determine if any items in a collection end with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> CollectionEndsWithStringWithHttpInfo(InputCollectionSearch collectionSearch = default(InputCollectionSearch))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionString>("/CollectionEndsWithString", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionEndsWithString", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Ends with string Determine if any items in a collection end with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionString</returns>
        public async System.Threading.Tasks.Task<OutputCollectionString> CollectionEndsWithStringAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> localVarResponse = await CollectionEndsWithStringWithHttpInfoAsync(collectionSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Ends with string Determine if any items in a collection end with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionString>> CollectionEndsWithStringWithHttpInfoAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionString>("/CollectionEndsWithString", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionEndsWithString", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Starts with string Determine if any items in a collection start with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>OutputCollectionString</returns>
        public OutputCollectionString CollectionStartsWithString(InputCollectionSearch collectionSearch = default(InputCollectionSearch))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> localVarResponse = CollectionStartsWithStringWithHttpInfo(collectionSearch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Starts with string Determine if any items in a collection start with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> CollectionStartsWithStringWithHttpInfo(InputCollectionSearch collectionSearch = default(InputCollectionSearch))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionString>("/CollectionStartsWithString", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionStartsWithString", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Starts with string Determine if any items in a collection start with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionString</returns>
        public async System.Threading.Tasks.Task<OutputCollectionString> CollectionStartsWithStringAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionString> localVarResponse = await CollectionStartsWithStringWithHttpInfoAsync(collectionSearch, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Starts with string Determine if any items in a collection start with a specific string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSearch">Collection search parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionString>> CollectionStartsWithStringWithHttpInfoAsync(InputCollectionSearch collectionSearch = default(InputCollectionSearch), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSearch;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionString>("/CollectionStartsWithString", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionStartsWithString", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Collection to JSON Convert a collection to a named JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString CollectionToJSON(InputCollectionConversion collectionConversion = default(InputCollectionConversion))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = CollectionToJSONWithHttpInfo(collectionConversion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Collection to JSON Convert a collection to a named JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputString> CollectionToJSONWithHttpInfo(InputCollectionConversion collectionConversion = default(InputCollectionConversion))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionConversion;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputString>("/CollectionToJSON", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionToJSON", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Collection to JSON Convert a collection to a named JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> CollectionToJSONAsync(InputCollectionConversion collectionConversion = default(InputCollectionConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = await CollectionToJSONWithHttpInfoAsync(collectionConversion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Collection to JSON Convert a collection to a named JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputString>> CollectionToJSONWithHttpInfoAsync(InputCollectionConversion collectionConversion = default(InputCollectionConversion), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionConversion;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputString>("/CollectionToJSON", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionToJSON", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Collection to XML Convert a collection to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString CollectionToXml(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = CollectionToXmlWithHttpInfo(collectionConversionXML);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Collection to XML Convert a collection to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputString> CollectionToXmlWithHttpInfo(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionConversionXML;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputString>("/CollectionToXML", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionToXml", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Collection to XML Convert a collection to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> CollectionToXmlAsync(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputString> localVarResponse = await CollectionToXmlWithHttpInfoAsync(collectionConversionXML, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Collection to XML Convert a collection to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputString>> CollectionToXmlWithHttpInfoAsync(InputCollectionConversionXML collectionConversionXML = default(InputCollectionConversionXML), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionConversionXML;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputString>("/CollectionToXML", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CollectionToXml", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Count collection Count a collection of items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CountCollection(InputCollectionCount collectionCount = default(InputCollectionCount))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputNumber> localVarResponse = CountCollectionWithHttpInfo(collectionCount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Count collection Count a collection of items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputNumber> CountCollectionWithHttpInfo(InputCollectionCount collectionCount = default(InputCollectionCount))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionCount;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputNumber>("/CountCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Count collection Count a collection of items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CountCollectionAsync(InputCollectionCount collectionCount = default(InputCollectionCount), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputNumber> localVarResponse = await CountCollectionWithHttpInfoAsync(collectionCount, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Count collection Count a collection of items
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionCount">Count collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputNumber>> CountCollectionWithHttpInfoAsync(InputCollectionCount collectionCount = default(InputCollectionCount), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionCount;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputNumber>("/CountCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CountCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Filter collection Filter a collection of strings by keyword
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        public OutputCollectionResult FilterCollection(InputCollectionFilter collectionFilter = default(InputCollectionFilter))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = FilterCollectionWithHttpInfo(collectionFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Filter collection Filter a collection of strings by keyword
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> FilterCollectionWithHttpInfo(InputCollectionFilter collectionFilter = default(InputCollectionFilter))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionFilter;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionResult>("/FilterCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Filter collection Filter a collection of strings by keyword
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        public async System.Threading.Tasks.Task<OutputCollectionResult> FilterCollectionAsync(InputCollectionFilter collectionFilter = default(InputCollectionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = await FilterCollectionWithHttpInfoAsync(collectionFilter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Filter collection Filter a collection of strings by keyword
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionFilter">Filter collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult>> FilterCollectionWithHttpInfoAsync(InputCollectionFilter collectionFilter = default(InputCollectionFilter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionFilter;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionResult>("/FilterCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FilterCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Remove from collection Remove an item from a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        public OutputCollectionResult RemoveFromCollection(InputCollectionModify collectionModify = default(InputCollectionModify))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = RemoveFromCollectionWithHttpInfo(collectionModify);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Remove from collection Remove an item from a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> RemoveFromCollectionWithHttpInfo(InputCollectionModify collectionModify = default(InputCollectionModify))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionModify;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionResult>("/RemoveFromCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFromCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Remove from collection Remove an item from a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        public async System.Threading.Tasks.Task<OutputCollectionResult> RemoveFromCollectionAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = await RemoveFromCollectionWithHttpInfoAsync(collectionModify, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Remove from collection Remove an item from a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionModify">Collection modification parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult>> RemoveFromCollectionWithHttpInfoAsync(InputCollectionModify collectionModify = default(InputCollectionModify), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionModify;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionResult>("/RemoveFromCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFromCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Replace values in collection Replace whole or partial strings in a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        public OutputCollectionResult ReplaceValuesInCollection(InputCollectionReplace collectionReplace = default(InputCollectionReplace))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = ReplaceValuesInCollectionWithHttpInfo(collectionReplace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Replace values in collection Replace whole or partial strings in a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> ReplaceValuesInCollectionWithHttpInfo(InputCollectionReplace collectionReplace = default(InputCollectionReplace))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionReplace;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionResult>("/ReplaceValuesInCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceValuesInCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Replace values in collection Replace whole or partial strings in a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        public async System.Threading.Tasks.Task<OutputCollectionResult> ReplaceValuesInCollectionAsync(InputCollectionReplace collectionReplace = default(InputCollectionReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = await ReplaceValuesInCollectionWithHttpInfoAsync(collectionReplace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Replace values in collection Replace whole or partial strings in a collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionReplace">Replace values in collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult>> ReplaceValuesInCollectionWithHttpInfoAsync(InputCollectionReplace collectionReplace = default(InputCollectionReplace), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionReplace;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionResult>("/ReplaceValuesInCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceValuesInCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Sort collection Sort a collection of strings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <returns>OutputCollectionResult</returns>
        public OutputCollectionResult SortCollection(InputCollectionSort collectionSort = default(InputCollectionSort))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = SortCollectionWithHttpInfo(collectionSort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Sort collection Sort a collection of strings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputCollectionResult</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> SortCollectionWithHttpInfo(InputCollectionSort collectionSort = default(InputCollectionSort))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSort;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputCollectionResult>("/SortCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SortCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Sort collection Sort a collection of strings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputCollectionResult</returns>
        public async System.Threading.Tasks.Task<OutputCollectionResult> SortCollectionAsync(InputCollectionSort collectionSort = default(InputCollectionSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult> localVarResponse = await SortCollectionWithHttpInfoAsync(collectionSort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Sort collection Sort a collection of strings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSort">Sort collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputCollectionResult)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputCollectionResult>> SortCollectionWithHttpInfoAsync(InputCollectionSort collectionSort = default(InputCollectionSort), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSort;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputCollectionResult>("/SortCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SortCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Split collection Split a collection of items by matching value or index
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <returns>OutputMultiCollection</returns>
        public OutputMultiCollection SplitCollection(InputCollectionSplit collectionSplit = default(InputCollectionSplit))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputMultiCollection> localVarResponse = SplitCollectionWithHttpInfo(collectionSplit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Split collection Split a collection of items by matching value or index
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <returns>ApiResponse of OutputMultiCollection</returns>
        public Org.OpenAPITools.Client.ApiResponse<OutputMultiCollection> SplitCollectionWithHttpInfo(InputCollectionSplit collectionSplit = default(InputCollectionSplit))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSplit;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OutputMultiCollection>("/SplitCollection", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SplitCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collections - Split collection Split a collection of items by matching value or index
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutputMultiCollection</returns>
        public async System.Threading.Tasks.Task<OutputMultiCollection> SplitCollectionAsync(InputCollectionSplit collectionSplit = default(InputCollectionSplit), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<OutputMultiCollection> localVarResponse = await SplitCollectionWithHttpInfoAsync(collectionSplit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Collections - Split collection Split a collection of items by matching value or index
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionSplit">Split collection parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutputMultiCollection)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OutputMultiCollection>> SplitCollectionWithHttpInfoAsync(InputCollectionSplit collectionSplit = default(InputCollectionSplit), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = collectionSplit;

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-IBM-Client-Id", this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OutputMultiCollection>("/SplitCollection", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SplitCollection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
