/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MathApiController : ControllerBase
    { 
        /// <summary>
        /// Math - Calculate Absolute
        /// </summary>
        /// <remarks>Calculate the absolute value of a number</remarks>
        /// <param name="calculateNumber">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateAbsolute")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateAbsolute")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateAbsolute([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Addition
        /// </summary>
        /// <remarks>Calculate the sum of two numbers</remarks>
        /// <param name="calculateNumbers">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateAddition")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateAddition")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateAddition([FromBody]InputCalculateNumbers calculateNumbers)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate average
        /// </summary>
        /// <remarks>Calculate the average of two or more numbers</remarks>
        /// <param name="calculateSeries">Series calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateAverage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateAverage")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateAverage([FromBody]InputCalculateSeries calculateSeries)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Cosine
        /// </summary>
        /// <remarks>Calculate the cosine value of an angle</remarks>
        /// <param name="calculateNumber">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateCosine")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateCosine")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateCosine([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Division
        /// </summary>
        /// <remarks>Calculate the quotient of two numbers</remarks>
        /// <param name="calculateNumbers">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateDivision")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateDivision")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateDivision([FromBody]InputCalculateNumbers calculateNumbers)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Logarithm
        /// </summary>
        /// <remarks>Calculate the logarithm of a number</remarks>
        /// <param name="calculateNumber">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateLogarithm")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateLogarithm")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateLogarithm([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate median
        /// </summary>
        /// <remarks>Calculate the median of two or more numbers</remarks>
        /// <param name="calculateSeries">Series calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateMedian")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateMedian")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateMedian([FromBody]InputCalculateSeries calculateSeries)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate minimum or maximum
        /// </summary>
        /// <remarks>Calculate the minimum or maximum value in a sequence of numbers</remarks>
        /// <param name="calculateSeries">Series calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateMinMax")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateMinMax")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateMinMax([FromBody]InputCalculateMinMax calculateSeries)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Modulo
        /// </summary>
        /// <remarks>Calculate the remainder of dividing two numbers</remarks>
        /// <param name="calculateNumbers">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateModulo")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateModulo")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateModulo([FromBody]InputCalculateNumbers calculateNumbers)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Multiplication
        /// </summary>
        /// <remarks>Calculate the product of two numbers</remarks>
        /// <param name="calculateNumbers">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateMultiplication")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateMultiplication")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateMultiplication([FromBody]InputCalculateNumbers calculateNumbers)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Nth Root
        /// </summary>
        /// <remarks>Calculate the n-th root of a number</remarks>
        /// <param name="calculateNumbers">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateNthRoot")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateNthRoot")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateNthRoot([FromBody]InputCalculateNumbers calculateNumbers)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate power
        /// </summary>
        /// <remarks>Raise number to a specified power</remarks>
        /// <param name="calculatePower">Power calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculatePower")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculatePower")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculatePower([FromBody]InputCalculatePower calculatePower)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Sine
        /// </summary>
        /// <remarks>Calculate the sine value of an angle</remarks>
        /// <param name="calculateNumber">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateSine")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateSine")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateSine([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Square Root
        /// </summary>
        /// <remarks>Calculate the square root of a number</remarks>
        /// <param name="calculateNumber">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateSquareRoot")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateSquareRoot")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateSquareRoot([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Subtraction
        /// </summary>
        /// <remarks>Calculate the difference between two numbers</remarks>
        /// <param name="calculateNumbers">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateSubtraction")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateSubtraction")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateSubtraction([FromBody]InputCalculateNumbers calculateNumbers)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate sum
        /// </summary>
        /// <remarks>Calculate the sum of two or more numbers</remarks>
        /// <param name="calculateSeries">Series calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateSum")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateSum")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateSum([FromBody]InputCalculateSeries calculateSeries)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate Tangent
        /// </summary>
        /// <remarks>Calculate the tangent value of an angle</remarks>
        /// <param name="calculateNumber">Number calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateTangent")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateTangent")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateTangent([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate variance
        /// </summary>
        /// <remarks>Calculate the statistical variance of two or more numbers</remarks>
        /// <param name="calculateSeries">Series calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CalculateVariance")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CalculateVariance")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CalculateVariance([FromBody]InputCalculateSeries calculateSeries)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert angle
        /// </summary>
        /// <remarks>Convert value from one angle measurement to another</remarks>
        /// <param name="convertAngle"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertAngle")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertAngle")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertAngle([FromBody]InputConvertAngle convertAngle)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert area
        /// </summary>
        /// <remarks>Convert value from one area measurement to another</remarks>
        /// <param name="convertArea"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertArea")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertArea")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertArea([FromBody]InputConvertArea convertArea)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert distance
        /// </summary>
        /// <remarks>Convert value from one distance measurement to another</remarks>
        /// <param name="convertDistance"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertDistance")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertDistance")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertDistance([FromBody]InputConvertDistance convertDistance)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert duration
        /// </summary>
        /// <remarks>Convert value from one duration measurement to another</remarks>
        /// <param name="convertDuration"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertDuration")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertDuration")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertDuration([FromBody]InputConvertDuration convertDuration)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert energy
        /// </summary>
        /// <remarks>Convert value from one energy measurement to another</remarks>
        /// <param name="convertEnergy"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertEnergy")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertEnergy")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertEnergy([FromBody]InputConvertEnergy convertEnergy)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert power
        /// </summary>
        /// <remarks>Convert value from one power measurement to another</remarks>
        /// <param name="convertPower"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertPower")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertPower")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertPower([FromBody]InputConvertPower convertPower)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert speed
        /// </summary>
        /// <remarks>Convert value from one speed measurement to another</remarks>
        /// <param name="convertSpeed"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertSpeed")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertSpeed")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertSpeed([FromBody]InputConvertSpeed convertSpeed)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert temperature
        /// </summary>
        /// <remarks>Convert value from one temperature measurement to another</remarks>
        /// <param name="convertTemperature"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertTemperature")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertTemperature")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertTemperature([FromBody]InputConvertTemperature convertTemperature)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert volume
        /// </summary>
        /// <remarks>Convert value from one volume measurement to another</remarks>
        /// <param name="convertVolume"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertVolume")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertVolume")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertVolume([FromBody]InputConvertVolume convertVolume)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Convert weight
        /// </summary>
        /// <remarks>Convert value from one weight measurement to another</remarks>
        /// <param name="convertWeight"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertWeight")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertWeight")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertWeight([FromBody]InputConvertWeight convertWeight)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Random number
        /// </summary>
        /// <remarks>Generate a random number within a specified range</remarks>
        /// <param name="numberRange"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/RandomNumber")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("RandomNumber")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult RandomNumber([FromBody]InputNumberRange numberRange)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Round number
        /// </summary>
        /// <remarks>Round a numeric value up or down</remarks>
        /// <param name="calculateNumber">Numeric calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/RoundNumber")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("RoundNumber")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult RoundNumber([FromBody]InputCalculateNumber calculateNumber)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Math - Calculate standard deviation
        /// </summary>
        /// <remarks>Calculate the standard deviation of two or more numbers</remarks>
        /// <param name="calculateSeries">Series calculation parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/StandardDeviation")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("StandardDeviation")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult StandardDeviation([FromBody]InputCalculateSeries calculateSeries)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
