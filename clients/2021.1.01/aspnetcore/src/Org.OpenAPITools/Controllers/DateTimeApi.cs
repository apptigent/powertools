/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DateTimeApiController : ControllerBase
    { 
        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>Calculate the difference between two dates</remarks>
        /// <param name="dateTimeDifference"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/DateTimeDifference")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("DateTimeDifference")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputDateDifference), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult DateTimeDifference([FromBody]InputDateTimeDifference dateTimeDifference)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputDateDifference));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"years\" : 1,\n  \"months\" : 2,\n  \"days\" : 14,\n  \"hours\" : 1,\n  \"minutes\" : 50,\n  \"seconds\" : 30,\n  \"milliseconds\" : 0,\n  \"totalYears\" : 1.2,\n  \"totalMonths\" : 14.39,\n  \"totalDays\" : 438.08,\n  \"totalHours\" : 10513.84,\n  \"totalMinutes\" : 630830.5,\n  \"totalSeconds\" : 37849830,\n  \"totalMilliseconds\" : 37849830000,\n  \"ticks\" : 378498300000000\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputDateDifference>(exampleJson)
            : default(OutputDateDifference);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>Retrieve useful date and time information, such as day of year, total seconds and ticks</remarks>
        /// <param name="dateTimeInfo"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/DateTimeInfo")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("DateTimeInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputDateInfo), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult DateTimeInfo([FromBody]InputDateTimeInfo dateTimeInfo)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputDateInfo));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"DayOfYear\" : 25,\n  \"DayOfWeek\" : 2,\n  \"WeekOfYear\" : 10,\n  \"SecondsInDay\" : 1234,\n  \"MinutesInDay\" : 359,\n  \"Ticks\" : 1234567890\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputDateInfo>(exampleJson)
            : default(OutputDateInfo);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>Create a date/time string in a specific format</remarks>
        /// <param name="dateTimeFormat"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/FormatDateTime")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("FormatDateTime")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult FormatDateTime([FromBody]InputDateTimeFormat dateTimeFormat)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>Convert date and time from one time zone to another</remarks>
        /// <param name="dateTimeConversion"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/WorldTime")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("WorldTime")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult WorldTime([FromBody]InputDateTimeConversion dateTimeConversion)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
