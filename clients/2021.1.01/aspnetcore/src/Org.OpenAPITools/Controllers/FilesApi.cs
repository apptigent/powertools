/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FilesApiController : ControllerBase
    { 
        /// <summary>
        /// Files - Convert Image
        /// </summary>
        /// <remarks>Convert an image from one format to another</remarks>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertImage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertImage([FromForm][Required()]string format, [FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - Crop Image
        /// </summary>
        /// <remarks>Crop an image</remarks>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CropImage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CropImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CropImage([FromForm][Required()]string position, [FromForm][Required()]decimal width, [FromForm][Required()]decimal height, [FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - File to string
        /// </summary>
        /// <remarks>Convert a file to a Base64 string</remarks>
        /// <param name="file">Source file (10MB limit)</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/FileToString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("FileToString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult FileToString([FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - Flip Image
        /// </summary>
        /// <remarks>Flip an image (horizontal or vertical)</remarks>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/FlipImage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("FlipImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult FlipImage([FromForm][Required()]string orientation, [FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - Generate QR code
        /// </summary>
        /// <remarks>Generate a QR code image</remarks>
        /// <param name="inputQRCode"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/GenerateQRCode")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("GenerateQRCode")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult GenerateQRCode([FromBody]InputQRCode inputQRCode)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - Resize Image
        /// </summary>
        /// <remarks>Resize an image</remarks>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent)</param>
        /// <param name="width">Image width (pixels or percent)</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ResizeImage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ResizeImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ResizeImage([FromForm][Required()]string algorithm, [FromForm][Required()]string units, [FromForm][Required()]System.IO.Stream file, [FromForm]decimal? height, [FromForm]decimal? width)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - Rotate Image
        /// </summary>
        /// <remarks>Rotate an image by specified number of degrees</remarks>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/RotateImage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("RotateImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult RotateImage([FromForm][Required()]string degrees, [FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Files - Watermark Image
        /// </summary>
        /// <remarks>Add watermark text to an image</remarks>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/WatermarkImage")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("WatermarkImage")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult WatermarkImage([FromForm][Required()]string text, [FromForm][Required()]string font, [FromForm][Required()]decimal size, [FromForm][Required()]string color, [FromForm][Required()]string horizontal, [FromForm][Required()]string vertical, [FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
