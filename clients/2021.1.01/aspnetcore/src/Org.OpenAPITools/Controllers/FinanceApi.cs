/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FinanceApiController : ControllerBase
    { 
        /// <summary>
        /// Currency - Convert currency
        /// </summary>
        /// <remarks>Calculate monetary value in a different currency</remarks>
        /// <param name="currencyConversion"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertCurrency")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertCurrency")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertCurrency([FromBody]InputCurrencyConversion currencyConversion)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Currency - Format currency
        /// </summary>
        /// <remarks>Apply currency symbol to a numeric value</remarks>
        /// <param name="currencyFormat"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/FormatCurrency")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("FormatCurrency")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult FormatCurrency([FromBody]InputCurrencyFormat currencyFormat)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Finance - Market index
        /// </summary>
        /// <remarks>Get current and historical market index information</remarks>
        /// <param name="marketIndex"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/MarketIndex")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("MarketIndex")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputMarketIndex), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult MarketIndex([FromBody]InputMarketIndex marketIndex)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputMarketIndex));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"date\" : \"2020-10-07T00:00:00+0000\",\n  \"symbol\" : \"DJI.INDX\",\n  \"exchange\" : \"INDX\",\n  \"open\" : 73.84,\n  \"high\" : 74.32,\n  \"low\" : 72.245,\n  \"close\" : 72.7,\n  \"volume\" : 15151304,\n  \"adj_open\" : 73.84,\n  \"adj_high\" : 74.32,\n  \"adj_low\" : 72.245,\n  \"adj_close\" : 72.7,\n  \"adj_volume\" : 15151304\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputMarketIndex>(exampleJson)
            : default(OutputMarketIndex);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Finance - Stock prices
        /// </summary>
        /// <remarks>Get current and historical stock price information</remarks>
        /// <param name="stockPrices"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/StockPrices")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("StockPrices")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputStockPrice), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult StockPrices([FromBody]InputStockPrices stockPrices)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputStockPrice));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : [ {\n    \"open\" : 73.84,\n    \"high\" : 74.32,\n    \"low\" : 72.245,\n    \"last\" : 72.3,\n    \"close\" : 72.7,\n    \"volume\" : 15151304,\n    \"date\" : \"2020-10-07T00:00:00+0000\",\n    \"symbol\" : \"CVX\",\n    \"exchange\" : \"XNYS\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputStockPrice>(exampleJson)
            : default(OutputStockPrice);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
