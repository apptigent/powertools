/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CollectionsApiController : ControllerBase
    { 
        /// <summary>
        /// Collections - Add to collection
        /// </summary>
        /// <remarks>Add an item to a collection</remarks>
        /// <param name="collectionModify">Collection modification parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/AddToCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("AddToCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionResult), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult AddToCollection([FromBody]InputCollectionModify collectionModify)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : [ \"a\", \"b\", \"c\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionResult>(exampleJson)
            : default(OutputCollectionResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Contains number
        /// </summary>
        /// <remarks>Determine if a collection contains a specific number</remarks>
        /// <param name="collectionSearch">Collection search parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CollectionContainsNumber")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CollectionContainsNumber")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CollectionContainsNumber([FromBody]InputCollectionSearchNumeric collectionSearch)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : false,\n  \"item\" : 1.25,\n  \"items\" : [ 1.25, 2.5, 3.75 ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionNumber>(exampleJson)
            : default(OutputCollectionNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Contains string
        /// </summary>
        /// <remarks>Determine if any items in a collection contain a specific string</remarks>
        /// <param name="collectionSearch">Collection search parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CollectionContainsString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CollectionContainsString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CollectionContainsString([FromBody]InputCollectionSearch collectionSearch)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : false,\n  \"item\" : \"string\",\n  \"items\" : [ \"string\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionString>(exampleJson)
            : default(OutputCollectionString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Ends with string
        /// </summary>
        /// <remarks>Determine if any items in a collection end with a specific string</remarks>
        /// <param name="collectionSearch">Collection search parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CollectionEndsWithString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CollectionEndsWithString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CollectionEndsWithString([FromBody]InputCollectionSearch collectionSearch)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : false,\n  \"item\" : \"string\",\n  \"items\" : [ \"string\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionString>(exampleJson)
            : default(OutputCollectionString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Starts with string
        /// </summary>
        /// <remarks>Determine if any items in a collection start with a specific string</remarks>
        /// <param name="collectionSearch">Collection search parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CollectionStartsWithString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CollectionStartsWithString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CollectionStartsWithString([FromBody]InputCollectionSearch collectionSearch)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"status\" : false,\n  \"item\" : \"string\",\n  \"items\" : [ \"string\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionString>(exampleJson)
            : default(OutputCollectionString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Collection to JSON
        /// </summary>
        /// <remarks>Convert a collection to a named JSON object</remarks>
        /// <param name="collectionConversion"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CollectionToJSON")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CollectionToJSON")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CollectionToJSON([FromBody]InputCollectionConversion collectionConversion)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Collection to XML
        /// </summary>
        /// <remarks>Convert a collection to an XML string</remarks>
        /// <param name="collectionConversionXML"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CollectionToXML")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CollectionToXml")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CollectionToXml([FromBody]InputCollectionConversionXML collectionConversionXML)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Count collection
        /// </summary>
        /// <remarks>Count a collection of items</remarks>
        /// <param name="collectionCount">Count collection parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CountCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CountCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputNumber), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CountCollection([FromBody]InputCollectionCount collectionCount)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputNumber));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : 1\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputNumber>(exampleJson)
            : default(OutputNumber);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Filter collection
        /// </summary>
        /// <remarks>Filter a collection of strings by keyword</remarks>
        /// <param name="collectionFilter">Filter collection parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/FilterCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("FilterCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionResult), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult FilterCollection([FromBody]InputCollectionFilter collectionFilter)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : [ \"a\", \"b\", \"c\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionResult>(exampleJson)
            : default(OutputCollectionResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Remove from collection
        /// </summary>
        /// <remarks>Remove an item from a collection</remarks>
        /// <param name="collectionModify">Collection modification parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/RemoveFromCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("RemoveFromCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionResult), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult RemoveFromCollection([FromBody]InputCollectionModify collectionModify)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : [ \"a\", \"b\", \"c\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionResult>(exampleJson)
            : default(OutputCollectionResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Replace values in collection
        /// </summary>
        /// <remarks>Replace whole or partial strings in a collection</remarks>
        /// <param name="collectionReplace">Replace values in collection parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ReplaceValuesInCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ReplaceValuesInCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionResult), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ReplaceValuesInCollection([FromBody]InputCollectionReplace collectionReplace)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : [ \"a\", \"b\", \"c\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionResult>(exampleJson)
            : default(OutputCollectionResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Sort collection
        /// </summary>
        /// <remarks>Sort a collection of strings</remarks>
        /// <param name="collectionSort">Sort collection parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/SortCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("SortCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputCollectionResult), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult SortCollection([FromBody]InputCollectionSort collectionSort)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputCollectionResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : [ \"a\", \"b\", \"c\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputCollectionResult>(exampleJson)
            : default(OutputCollectionResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Collections - Split collection
        /// </summary>
        /// <remarks>Split a collection of items by matching value or index</remarks>
        /// <param name="collectionSplit">Split collection parameters</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/SplitCollection")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("SplitCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputMultiCollection), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult SplitCollection([FromBody]InputCollectionSplit collectionSplit)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputMultiCollection));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result1\" : [ \"a\", \"b\", \"c\" ],\n  \"result2\" : [ \"d\", \"e\", \"f\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputMultiCollection>(exampleJson)
            : default(OutputMultiCollection);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
