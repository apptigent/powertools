/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TextApiController : ControllerBase
    { 
        /// <summary>
        /// Text - Compare strings
        /// </summary>
        /// <remarks>Perform a comparison of two strings</remarks>
        /// <param name="stringComparison"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/CompareStrings")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("CompareStrings")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult CompareStrings([FromBody]InputStringComparison stringComparison)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Contains string
        /// </summary>
        /// <remarks>Determine if a string contains another string</remarks>
        /// <param name="stringContains"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ContainsString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ContainsString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ContainsString([FromBody]InputStringContains stringContains)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Convert case
        /// </summary>
        /// <remarks>Convert string to upper, lower or title case</remarks>
        /// <param name="caseConversion"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ConvertCase")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ConvertCase")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ConvertCase([FromBody]InputCaseConversion caseConversion)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Decode string
        /// </summary>
        /// <remarks>Decode a string encoded with Base64 encoding</remarks>
        /// <param name="stringInput"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/DecodeString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("DecodeString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult DecodeString([FromBody]InlineObject stringInput)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Encode string
        /// </summary>
        /// <remarks>Encode a string using Base64 encoding</remarks>
        /// <param name="stringInput"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/EncodeString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("EncodeString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult EncodeString([FromBody]InputString stringInput)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Generate GUID
        /// </summary>
        /// <remarks>Generate a globally unique identifier</remarks>
        /// <param name="generateUniqueID"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/GenerateGuid")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("GenerateGuid")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult GenerateGuid([FromBody]InputGenerateUniqueID generateUniqueID)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Generate hash
        /// </summary>
        /// <remarks>Generate a hash value from a string</remarks>
        /// <param name="generateHash"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/GenerateHash")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("GenerateHash")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult GenerateHash([FromBody]InputGenerateHash generateHash)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Join strings
        /// </summary>
        /// <remarks>Join a collection of strings</remarks>
        /// <param name="joinStrings"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/JoinStrings")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("JoinStrings")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult JoinStrings([FromBody]InputJoinStrings joinStrings)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Redact string
        /// </summary>
        /// <remarks>Redact a strng containing sensitive content</remarks>
        /// <param name="redactString"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/RedactString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("RedactString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult RedactString([FromBody]InputRedactString redactString)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Replace string
        /// </summary>
        /// <remarks>Replace one value with another in a string</remarks>
        /// <param name="replaceString"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ReplaceString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ReplaceString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ReplaceString([FromBody]InputReplaceString replaceString)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Shorten hyperlink
        /// </summary>
        /// <remarks>Generate a simple, short URL from a complex URL</remarks>
        /// <param name="stringInput"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ShortenLink")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ShortenLink")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ShortenLink([FromBody]InlineObject1 stringInput)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Speech to Text
        /// </summary>
        /// <remarks>Convert audio file to text (10MB limit)</remarks>
        /// <param name="language">Language of audio input</param>
        /// <param name="file">Source audio file (WAV, MP3, AAC, M4A)</param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/SpeechToText")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("SpeechToText")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult SpeechToText([FromForm][Required()]string language, [FromForm][Required()]System.IO.Stream file)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Split string
        /// </summary>
        /// <remarks>Split a string based upon one or more characters</remarks>
        /// <param name="splitString"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/SplitString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("SplitString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputStringArray), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult SplitString([FromBody]InputSplitString splitString)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputStringArray));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ \"string\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputStringArray>(exampleJson)
            : default(OutputStringArray);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - String to File
        /// </summary>
        /// <remarks>Convert text string to file</remarks>
        /// <param name="inputStringToFile"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/StringToFile")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("StringToFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult StringToFile([FromBody]InputStringToFile inputStringToFile)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Text to Speech
        /// </summary>
        /// <remarks>Convert text to an audio file using AI-driven speech synthesis.</remarks>
        /// <param name="textToSpeech"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/TextToSpeech")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("TextToSpeech")]
        [SwaggerResponse(statusCode: 200, type: typeof(System.IO.Stream), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult TextToSpeech([FromBody]InputTextToSpeech textToSpeech)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(System.IO.Stream));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<System.IO.Stream>(exampleJson)
            : default(System.IO.Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Translate string
        /// </summary>
        /// <remarks>Translate a string into a different language</remarks>
        /// <param name="translateString"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/TranslateString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("TranslateString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult TranslateString([FromBody]InputTranslateString translateString)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Trim string
        /// </summary>
        /// <remarks>Trim leading or trailing whitespace from a string</remarks>
        /// <param name="trimString"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/TrimString")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("TrimString")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult TrimString([FromBody]InputTrimString trimString)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Decode URL
        /// </summary>
        /// <remarks>Decode an encoded URL</remarks>
        /// <param name="stringInput"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/URLDecode")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("UrlDecode")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult UrlDecode([FromBody]InlineObject2 stringInput)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Encode URL
        /// </summary>
        /// <remarks>Generate an encoded string from a complex hyperlink</remarks>
        /// <param name="stringInput"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/URLEncode")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("UrlEncode")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult UrlEncode([FromBody]InputString stringInput)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Validate email
        /// </summary>
        /// <remarks>Determine if an email address is valid</remarks>
        /// <param name="stringInput"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/ValidateEmail")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("ValidateEmail")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputString), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult ValidateEmail([FromBody]InlineObject3 stringInput)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputString));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"string\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputString>(exampleJson)
            : default(OutputString);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Text - Verify hash
        /// </summary>
        /// <remarks>Verify a hashed value against the original source string</remarks>
        /// <param name="verifyHash"></param>
        /// <response code="200">OK</response>
        /// <response code="400">ERROR</response>
        [HttpPost]
        [Route("/api/utilities/VerifyHash")]
        [Authorize(Policy = "apiKeyHeader")]
        [ValidateModelState]
        [SwaggerOperation("VerifyHash")]
        [SwaggerResponse(statusCode: 200, type: typeof(OutputBoolean), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(OutputString), description: "ERROR")]
        public virtual IActionResult VerifyHash([FromBody]InputVerifyHash verifyHash)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OutputBoolean));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(OutputString));
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<OutputBoolean>(exampleJson)
            : default(OutputBoolean);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
