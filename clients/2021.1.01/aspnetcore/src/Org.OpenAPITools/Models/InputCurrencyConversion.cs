/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputCurrencyConversion : IEquatable<InputCurrencyConversion>
    {
        /// <summary>
        /// Amount to convert
        /// </summary>
        /// <value>Amount to convert</value>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public decimal Input { get; set; }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<SourceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum USDEnum for USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USDEnum = 1,
            
            /// <summary>
            /// Enum AUDEnum for AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUDEnum = 2,
            
            /// <summary>
            /// Enum BGNEnum for BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGNEnum = 3,
            
            /// <summary>
            /// Enum BRLEnum for BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRLEnum = 4,
            
            /// <summary>
            /// Enum CADEnum for CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CADEnum = 5,
            
            /// <summary>
            /// Enum CHFEnum for CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHFEnum = 6,
            
            /// <summary>
            /// Enum CNYEnum for CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNYEnum = 7,
            
            /// <summary>
            /// Enum CZKEnum for CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZKEnum = 8,
            
            /// <summary>
            /// Enum DKKEnum for DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKKEnum = 9,
            
            /// <summary>
            /// Enum EUREnum for EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUREnum = 10,
            
            /// <summary>
            /// Enum GBPEnum for GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBPEnum = 11,
            
            /// <summary>
            /// Enum HKDEnum for HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKDEnum = 12,
            
            /// <summary>
            /// Enum HRKEnum for HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRKEnum = 13,
            
            /// <summary>
            /// Enum HUFEnum for HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUFEnum = 14,
            
            /// <summary>
            /// Enum IDREnum for IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDREnum = 15,
            
            /// <summary>
            /// Enum ILSEnum for ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILSEnum = 16,
            
            /// <summary>
            /// Enum INREnum for INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INREnum = 17,
            
            /// <summary>
            /// Enum ISKEnum for ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISKEnum = 18,
            
            /// <summary>
            /// Enum JPYEnum for JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPYEnum = 19,
            
            /// <summary>
            /// Enum KRWEnum for KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRWEnum = 20,
            
            /// <summary>
            /// Enum MXNEnum for MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXNEnum = 21,
            
            /// <summary>
            /// Enum MYREnum for MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYREnum = 22,
            
            /// <summary>
            /// Enum NOKEnum for NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOKEnum = 23,
            
            /// <summary>
            /// Enum NZDEnum for NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZDEnum = 24,
            
            /// <summary>
            /// Enum PHPEnum for PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHPEnum = 25,
            
            /// <summary>
            /// Enum PLNEnum for PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLNEnum = 26,
            
            /// <summary>
            /// Enum RONEnum for RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RONEnum = 27,
            
            /// <summary>
            /// Enum RUBEnum for RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUBEnum = 28,
            
            /// <summary>
            /// Enum SGDEnum for SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGDEnum = 29,
            
            /// <summary>
            /// Enum SEKEnum for SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEKEnum = 30,
            
            /// <summary>
            /// Enum THBEnum for THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THBEnum = 31,
            
            /// <summary>
            /// Enum TRYEnum for TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRYEnum = 32,
            
            /// <summary>
            /// Enum ZAREnum for ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAREnum = 33
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [Required]
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum Source { get; set; } = SourceEnum.USDEnum;


        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TargetEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TargetEnum
        {
            
            /// <summary>
            /// Enum USDEnum for USD
            /// </summary>
            [EnumMember(Value = "USD")]
            USDEnum = 1,
            
            /// <summary>
            /// Enum AUDEnum for AUD
            /// </summary>
            [EnumMember(Value = "AUD")]
            AUDEnum = 2,
            
            /// <summary>
            /// Enum BGNEnum for BGN
            /// </summary>
            [EnumMember(Value = "BGN")]
            BGNEnum = 3,
            
            /// <summary>
            /// Enum BRLEnum for BRL
            /// </summary>
            [EnumMember(Value = "BRL")]
            BRLEnum = 4,
            
            /// <summary>
            /// Enum CADEnum for CAD
            /// </summary>
            [EnumMember(Value = "CAD")]
            CADEnum = 5,
            
            /// <summary>
            /// Enum CHFEnum for CHF
            /// </summary>
            [EnumMember(Value = "CHF")]
            CHFEnum = 6,
            
            /// <summary>
            /// Enum CNYEnum for CNY
            /// </summary>
            [EnumMember(Value = "CNY")]
            CNYEnum = 7,
            
            /// <summary>
            /// Enum CZKEnum for CZK
            /// </summary>
            [EnumMember(Value = "CZK")]
            CZKEnum = 8,
            
            /// <summary>
            /// Enum DKKEnum for DKK
            /// </summary>
            [EnumMember(Value = "DKK")]
            DKKEnum = 9,
            
            /// <summary>
            /// Enum EUREnum for EUR
            /// </summary>
            [EnumMember(Value = "EUR")]
            EUREnum = 10,
            
            /// <summary>
            /// Enum GBPEnum for GBP
            /// </summary>
            [EnumMember(Value = "GBP")]
            GBPEnum = 11,
            
            /// <summary>
            /// Enum HKDEnum for HKD
            /// </summary>
            [EnumMember(Value = "HKD")]
            HKDEnum = 12,
            
            /// <summary>
            /// Enum HRKEnum for HRK
            /// </summary>
            [EnumMember(Value = "HRK")]
            HRKEnum = 13,
            
            /// <summary>
            /// Enum HUFEnum for HUF
            /// </summary>
            [EnumMember(Value = "HUF")]
            HUFEnum = 14,
            
            /// <summary>
            /// Enum IDREnum for IDR
            /// </summary>
            [EnumMember(Value = "IDR")]
            IDREnum = 15,
            
            /// <summary>
            /// Enum ILSEnum for ILS
            /// </summary>
            [EnumMember(Value = "ILS")]
            ILSEnum = 16,
            
            /// <summary>
            /// Enum INREnum for INR
            /// </summary>
            [EnumMember(Value = "INR")]
            INREnum = 17,
            
            /// <summary>
            /// Enum ISKEnum for ISK
            /// </summary>
            [EnumMember(Value = "ISK")]
            ISKEnum = 18,
            
            /// <summary>
            /// Enum JPYEnum for JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPYEnum = 19,
            
            /// <summary>
            /// Enum KRWEnum for KRW
            /// </summary>
            [EnumMember(Value = "KRW")]
            KRWEnum = 20,
            
            /// <summary>
            /// Enum MXNEnum for MXN
            /// </summary>
            [EnumMember(Value = "MXN")]
            MXNEnum = 21,
            
            /// <summary>
            /// Enum MYREnum for MYR
            /// </summary>
            [EnumMember(Value = "MYR")]
            MYREnum = 22,
            
            /// <summary>
            /// Enum NOKEnum for NOK
            /// </summary>
            [EnumMember(Value = "NOK")]
            NOKEnum = 23,
            
            /// <summary>
            /// Enum NZDEnum for NZD
            /// </summary>
            [EnumMember(Value = "NZD")]
            NZDEnum = 24,
            
            /// <summary>
            /// Enum PHPEnum for PHP
            /// </summary>
            [EnumMember(Value = "PHP")]
            PHPEnum = 25,
            
            /// <summary>
            /// Enum PLNEnum for PLN
            /// </summary>
            [EnumMember(Value = "PLN")]
            PLNEnum = 26,
            
            /// <summary>
            /// Enum RONEnum for RON
            /// </summary>
            [EnumMember(Value = "RON")]
            RONEnum = 27,
            
            /// <summary>
            /// Enum RUBEnum for RUB
            /// </summary>
            [EnumMember(Value = "RUB")]
            RUBEnum = 28,
            
            /// <summary>
            /// Enum SGDEnum for SGD
            /// </summary>
            [EnumMember(Value = "SGD")]
            SGDEnum = 29,
            
            /// <summary>
            /// Enum SEKEnum for SEK
            /// </summary>
            [EnumMember(Value = "SEK")]
            SEKEnum = 30,
            
            /// <summary>
            /// Enum THBEnum for THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THBEnum = 31,
            
            /// <summary>
            /// Enum TRYEnum for TRY
            /// </summary>
            [EnumMember(Value = "TRY")]
            TRYEnum = 32,
            
            /// <summary>
            /// Enum ZAREnum for ZAR
            /// </summary>
            [EnumMember(Value = "ZAR")]
            ZAREnum = 33
        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [Required]
        [DataMember(Name="target", EmitDefaultValue=false)]
        public TargetEnum Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCurrencyConversion {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputCurrencyConversion)obj);
        }

        /// <summary>
        /// Returns true if InputCurrencyConversion instances are equal
        /// </summary>
        /// <param name="other">Instance of InputCurrencyConversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCurrencyConversion other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    
                    Input.Equals(other.Input)
                ) && 
                (
                    Source == other.Source ||
                    
                    Source.Equals(other.Source)
                ) && 
                (
                    Target == other.Target ||
                    
                    Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + Target.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputCurrencyConversion left, InputCurrencyConversion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputCurrencyConversion left, InputCurrencyConversion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
