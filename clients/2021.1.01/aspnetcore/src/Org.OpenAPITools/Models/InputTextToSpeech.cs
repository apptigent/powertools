/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputTextToSpeech : IEquatable<InputTextToSpeech>
    {
        /// <summary>
        /// Text to convert (10,000 characters max)
        /// </summary>
        /// <value>Text to convert (10,000 characters max)</value>
        [Required]
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }


        /// <summary>
        /// Text or file type
        /// </summary>
        /// <value>Text or file type</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum PlainTextEnum for PlainText
            /// </summary>
            [EnumMember(Value = "PlainText")]
            PlainTextEnum = 1,
            
            /// <summary>
            /// Enum SSMLEnum for SSML
            /// </summary>
            [EnumMember(Value = "SSML")]
            SSMLEnum = 2
        }

        /// <summary>
        /// Text or file type
        /// </summary>
        /// <value>Text or file type</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; } = TypeEnum.PlainTextEnum;


        /// <summary>
        /// Voice locale (must match language of input text)
        /// </summary>
        /// <value>Voice locale (must match language of input text)</value>
        [TypeConverter(typeof(CustomEnumConverter<VoiceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum VoiceEnum
        {
            
            /// <summary>
            /// Enum ArEGHodaFemaleEnum for ar-EG, Hoda (Female)
            /// </summary>
            [EnumMember(Value = "ar-EG, Hoda (Female)")]
            ArEGHodaFemaleEnum = 1,
            
            /// <summary>
            /// Enum ArSANaayfMaleEnum for ar-SA, Naayf (Male)
            /// </summary>
            [EnumMember(Value = "ar-SA, Naayf (Male)")]
            ArSANaayfMaleEnum = 2,
            
            /// <summary>
            /// Enum BgBGIvanMaleEnum for bg-BG, Ivan (Male)
            /// </summary>
            [EnumMember(Value = "bg-BG, Ivan (Male)")]
            BgBGIvanMaleEnum = 3,
            
            /// <summary>
            /// Enum CaESHerenaFemaleEnum for ca-ES, Herena (Female)
            /// </summary>
            [EnumMember(Value = "ca-ES, Herena (Female)")]
            CaESHerenaFemaleEnum = 4,
            
            /// <summary>
            /// Enum CsCZJakubMaleEnum for cs-CZ, Jakub (Male)
            /// </summary>
            [EnumMember(Value = "cs-CZ, Jakub (Male)")]
            CsCZJakubMaleEnum = 5,
            
            /// <summary>
            /// Enum DaDKHelleFemaleEnum for da-DK, Helle (Female)
            /// </summary>
            [EnumMember(Value = "da-DK, Helle (Female)")]
            DaDKHelleFemaleEnum = 6,
            
            /// <summary>
            /// Enum DeATMichaelMaleEnum for de-AT, Michael (Male)
            /// </summary>
            [EnumMember(Value = "de-AT, Michael (Male)")]
            DeATMichaelMaleEnum = 7,
            
            /// <summary>
            /// Enum DeCHKarstenMaleEnum for de-CH, Karsten (Male)
            /// </summary>
            [EnumMember(Value = "de-CH, Karsten (Male)")]
            DeCHKarstenMaleEnum = 8,
            
            /// <summary>
            /// Enum DeDEHeddaFemaleEnum for de-DE, Hedda (Female)
            /// </summary>
            [EnumMember(Value = "de-DE, Hedda (Female)")]
            DeDEHeddaFemaleEnum = 9,
            
            /// <summary>
            /// Enum DeDEStefanMaleEnum for de-DE, Stefan (Male)
            /// </summary>
            [EnumMember(Value = "de-DE, Stefan (Male)")]
            DeDEStefanMaleEnum = 10,
            
            /// <summary>
            /// Enum ElGRStefanosMaleEnum for el-GR, Stefanos (Male)
            /// </summary>
            [EnumMember(Value = "el-GR, Stefanos (Male)")]
            ElGRStefanosMaleEnum = 11,
            
            /// <summary>
            /// Enum EnAUCatherineFemaleEnum for en-AU, Catherine (Female)
            /// </summary>
            [EnumMember(Value = "en-AU, Catherine (Female)")]
            EnAUCatherineFemaleEnum = 12,
            
            /// <summary>
            /// Enum EnAUHayleyFemaleEnum for en-AU, Hayley (Female)
            /// </summary>
            [EnumMember(Value = "en-AU, Hayley (Female)")]
            EnAUHayleyFemaleEnum = 13,
            
            /// <summary>
            /// Enum EnCAHeatherFemaleEnum for en-CA, Heather (Female)
            /// </summary>
            [EnumMember(Value = "en-CA, Heather (Female)")]
            EnCAHeatherFemaleEnum = 14,
            
            /// <summary>
            /// Enum EnCALindaFemaleEnum for en-CA, Linda (Female)
            /// </summary>
            [EnumMember(Value = "en-CA, Linda (Female)")]
            EnCALindaFemaleEnum = 15,
            
            /// <summary>
            /// Enum EnGBGeorgeMaleEnum for en-GB, George (Male)
            /// </summary>
            [EnumMember(Value = "en-GB, George (Male)")]
            EnGBGeorgeMaleEnum = 16,
            
            /// <summary>
            /// Enum EnGBHazelFemaleEnum for en-GB, Hazel (Female)
            /// </summary>
            [EnumMember(Value = "en-GB, Hazel (Female)")]
            EnGBHazelFemaleEnum = 17,
            
            /// <summary>
            /// Enum EnGBSusanFemaleEnum for en-GB, Susan (Female)
            /// </summary>
            [EnumMember(Value = "en-GB, Susan (Female)")]
            EnGBSusanFemaleEnum = 18,
            
            /// <summary>
            /// Enum EnIESeanMaleEnum for en-IE, Sean (Male)
            /// </summary>
            [EnumMember(Value = "en-IE, Sean (Male)")]
            EnIESeanMaleEnum = 19,
            
            /// <summary>
            /// Enum EnINHeeraFemaleEnum for en-IN, Heera (Female)
            /// </summary>
            [EnumMember(Value = "en-IN, Heera (Female)")]
            EnINHeeraFemaleEnum = 20,
            
            /// <summary>
            /// Enum EnINPriyaFemaleEnum for en-IN, Priya (Female)
            /// </summary>
            [EnumMember(Value = "en-IN, Priya (Female)")]
            EnINPriyaFemaleEnum = 21,
            
            /// <summary>
            /// Enum EnINRaviMaleEnum for en-IN, Ravi (Male)
            /// </summary>
            [EnumMember(Value = "en-IN, Ravi (Male)")]
            EnINRaviMaleEnum = 22,
            
            /// <summary>
            /// Enum EnUSAriaFemaleEnum for en-US, Aria (Female)
            /// </summary>
            [EnumMember(Value = "en-US, Aria (Female)")]
            EnUSAriaFemaleEnum = 23,
            
            /// <summary>
            /// Enum EnUSBenjaminMaleEnum for en-US, Benjamin (Male)
            /// </summary>
            [EnumMember(Value = "en-US, Benjamin (Male)")]
            EnUSBenjaminMaleEnum = 24,
            
            /// <summary>
            /// Enum EnUSGuyMaleEnum for en-US, Guy (Male)
            /// </summary>
            [EnumMember(Value = "en-US, Guy (Male)")]
            EnUSGuyMaleEnum = 25,
            
            /// <summary>
            /// Enum EnUSZiraFemaleEnum for en-US, Zira (Female)
            /// </summary>
            [EnumMember(Value = "en-US, Zira (Female)")]
            EnUSZiraFemaleEnum = 26,
            
            /// <summary>
            /// Enum EsESHelenaFemaleEnum for es-ES, Helena (Female)
            /// </summary>
            [EnumMember(Value = "es-ES, Helena (Female)")]
            EsESHelenaFemaleEnum = 27,
            
            /// <summary>
            /// Enum EsESLauraFemaleEnum for es-ES, Laura (Female)
            /// </summary>
            [EnumMember(Value = "es-ES, Laura (Female)")]
            EsESLauraFemaleEnum = 28,
            
            /// <summary>
            /// Enum EsESPabloMaleEnum for es-ES, Pablo (Male)
            /// </summary>
            [EnumMember(Value = "es-ES, Pablo (Male)")]
            EsESPabloMaleEnum = 29,
            
            /// <summary>
            /// Enum EsMXHildaFemaleEnum for es-MX, Hilda (Female)
            /// </summary>
            [EnumMember(Value = "es-MX, Hilda (Female)")]
            EsMXHildaFemaleEnum = 30,
            
            /// <summary>
            /// Enum EsMXRaulMaleEnum for es-MX, Raul (Male)
            /// </summary>
            [EnumMember(Value = "es-MX, Raul (Male)")]
            EsMXRaulMaleEnum = 31,
            
            /// <summary>
            /// Enum FiFIHeidiFemaleEnum for fi-FI, Heidi (Female)
            /// </summary>
            [EnumMember(Value = "fi-FI, Heidi (Female)")]
            FiFIHeidiFemaleEnum = 32,
            
            /// <summary>
            /// Enum FrCACarolineFemaleEnum for fr-CA, Caroline (Female)
            /// </summary>
            [EnumMember(Value = "fr-CA, Caroline (Female)")]
            FrCACarolineFemaleEnum = 33,
            
            /// <summary>
            /// Enum FrCAHarmonieFemaleEnum for fr-CA, Harmonie (Female)
            /// </summary>
            [EnumMember(Value = "fr-CA, Harmonie (Female)")]
            FrCAHarmonieFemaleEnum = 34,
            
            /// <summary>
            /// Enum FrCHGuillaumeMaleEnum for fr-CH, Guillaume (Male)
            /// </summary>
            [EnumMember(Value = "fr-CH, Guillaume (Male)")]
            FrCHGuillaumeMaleEnum = 35,
            
            /// <summary>
            /// Enum FrFRHortenseFemaleEnum for fr-FR, Hortense (Female)
            /// </summary>
            [EnumMember(Value = "fr-FR, Hortense (Female)")]
            FrFRHortenseFemaleEnum = 36,
            
            /// <summary>
            /// Enum FrFRJulieFemaleEnum for fr-FR, Julie (Female)
            /// </summary>
            [EnumMember(Value = "fr-FR, Julie (Female)")]
            FrFRJulieFemaleEnum = 37,
            
            /// <summary>
            /// Enum FrFRPaulMaleEnum for fr-FR, Paul (Male)
            /// </summary>
            [EnumMember(Value = "fr-FR, Paul (Male)")]
            FrFRPaulMaleEnum = 38,
            
            /// <summary>
            /// Enum HeILAsafMaleEnum for he-IL, Asaf (Male)
            /// </summary>
            [EnumMember(Value = "he-IL, Asaf (Male)")]
            HeILAsafMaleEnum = 39,
            
            /// <summary>
            /// Enum HiINHemantMaleEnum for hi-IN, Hemant (Male)
            /// </summary>
            [EnumMember(Value = "hi-IN, Hemant (Male)")]
            HiINHemantMaleEnum = 40,
            
            /// <summary>
            /// Enum HiINKalpanaFemaleEnum for hi-IN, Kalpana (Female)
            /// </summary>
            [EnumMember(Value = "hi-IN, Kalpana (Female)")]
            HiINKalpanaFemaleEnum = 41,
            
            /// <summary>
            /// Enum HrHRMatejMaleEnum for hr-HR, Matej (Male)
            /// </summary>
            [EnumMember(Value = "hr-HR, Matej (Male)")]
            HrHRMatejMaleEnum = 42,
            
            /// <summary>
            /// Enum HuHUSzabolcsMaleEnum for hu-HU, Szabolcs (Male)
            /// </summary>
            [EnumMember(Value = "hu-HU, Szabolcs (Male)")]
            HuHUSzabolcsMaleEnum = 43,
            
            /// <summary>
            /// Enum IdIDAndikaMaleEnum for id-ID, Andika (Male)
            /// </summary>
            [EnumMember(Value = "id-ID, Andika (Male)")]
            IdIDAndikaMaleEnum = 44,
            
            /// <summary>
            /// Enum ItITCosimoMaleEnum for it-IT, Cosimo (Male)
            /// </summary>
            [EnumMember(Value = "it-IT, Cosimo (Male)")]
            ItITCosimoMaleEnum = 45,
            
            /// <summary>
            /// Enum ItITLuciaFemaleEnum for it-IT, Lucia (Female)
            /// </summary>
            [EnumMember(Value = "it-IT, Lucia (Female)")]
            ItITLuciaFemaleEnum = 46,
            
            /// <summary>
            /// Enum JaJPAyumiFemaleEnum for ja-JP, Ayumi (Female)
            /// </summary>
            [EnumMember(Value = "ja-JP, Ayumi (Female)")]
            JaJPAyumiFemaleEnum = 47,
            
            /// <summary>
            /// Enum JaJPHarukaFemaleEnum for ja-JP, Haruka (Female)
            /// </summary>
            [EnumMember(Value = "ja-JP, Haruka (Female)")]
            JaJPHarukaFemaleEnum = 48,
            
            /// <summary>
            /// Enum JaJPIchiroMaleEnum for ja-JP, Ichiro (Male)
            /// </summary>
            [EnumMember(Value = "ja-JP, Ichiro (Male)")]
            JaJPIchiroMaleEnum = 49,
            
            /// <summary>
            /// Enum KoKRHeamiFemaleEnum for ko-KR, Heami (Female)
            /// </summary>
            [EnumMember(Value = "ko-KR, Heami (Female)")]
            KoKRHeamiFemaleEnum = 50,
            
            /// <summary>
            /// Enum MsMYRizwanMaleEnum for ms-MY, Rizwan (Male)
            /// </summary>
            [EnumMember(Value = "ms-MY, Rizwan (Male)")]
            MsMYRizwanMaleEnum = 51,
            
            /// <summary>
            /// Enum NbNOHuldaFemaleEnum for nb-NO, Hulda (Female)
            /// </summary>
            [EnumMember(Value = "nb-NO, Hulda (Female)")]
            NbNOHuldaFemaleEnum = 52,
            
            /// <summary>
            /// Enum NlNLHannaFemaleEnum for nl-NL, Hanna (Female)
            /// </summary>
            [EnumMember(Value = "nl-NL, Hanna (Female)")]
            NlNLHannaFemaleEnum = 53,
            
            /// <summary>
            /// Enum PlPLPaulinaFemaleEnum for pl-PL, Paulina (Female)
            /// </summary>
            [EnumMember(Value = "pl-PL, Paulina (Female)")]
            PlPLPaulinaFemaleEnum = 54,
            
            /// <summary>
            /// Enum PtBRDanielMaleEnum for pt-BR, Daniel (Male)
            /// </summary>
            [EnumMember(Value = "pt-BR, Daniel (Male)")]
            PtBRDanielMaleEnum = 55,
            
            /// <summary>
            /// Enum PtBRHeloisaFemaleEnum for pt-BR, Heloisa (Female)
            /// </summary>
            [EnumMember(Value = "pt-BR, Heloisa (Female)")]
            PtBRHeloisaFemaleEnum = 56,
            
            /// <summary>
            /// Enum PtPTHeliaFemaleEnum for pt-PT, Helia (Female)
            /// </summary>
            [EnumMember(Value = "pt-PT, Helia (Female)")]
            PtPTHeliaFemaleEnum = 57,
            
            /// <summary>
            /// Enum RoROAndreiMaleEnum for ro-RO, Andrei (Male)
            /// </summary>
            [EnumMember(Value = "ro-RO, Andrei (Male)")]
            RoROAndreiMaleEnum = 58,
            
            /// <summary>
            /// Enum RuRUEkaterinaFemaleEnum for ru-RU, Ekaterina (Female)
            /// </summary>
            [EnumMember(Value = "ru-RU, Ekaterina (Female)")]
            RuRUEkaterinaFemaleEnum = 59,
            
            /// <summary>
            /// Enum RuRUIrinaFemaleEnum for ru-RU, Irina (Female)
            /// </summary>
            [EnumMember(Value = "ru-RU, Irina (Female)")]
            RuRUIrinaFemaleEnum = 60,
            
            /// <summary>
            /// Enum RuRUPavelMaleEnum for ru-RU, Pavel (Male)
            /// </summary>
            [EnumMember(Value = "ru-RU, Pavel (Male)")]
            RuRUPavelMaleEnum = 61,
            
            /// <summary>
            /// Enum SkSKFilipMaleEnum for sk-SK, Filip (Male)
            /// </summary>
            [EnumMember(Value = "sk-SK, Filip (Male)")]
            SkSKFilipMaleEnum = 62,
            
            /// <summary>
            /// Enum SlSILadoMaleEnum for sl-SI, Lado (Male)
            /// </summary>
            [EnumMember(Value = "sl-SI, Lado (Male)")]
            SlSILadoMaleEnum = 63,
            
            /// <summary>
            /// Enum SvSEHedvigFemaleEnum for sv-SE, Hedvig (Female)
            /// </summary>
            [EnumMember(Value = "sv-SE, Hedvig (Female)")]
            SvSEHedvigFemaleEnum = 64,
            
            /// <summary>
            /// Enum TaINValluvarMaleEnum for ta-IN, Valluvar (Male)
            /// </summary>
            [EnumMember(Value = "ta-IN, Valluvar (Male)")]
            TaINValluvarMaleEnum = 65,
            
            /// <summary>
            /// Enum TeINChitraFemaleEnum for te-IN, Chitra (Female)
            /// </summary>
            [EnumMember(Value = "te-IN, Chitra (Female)")]
            TeINChitraFemaleEnum = 66,
            
            /// <summary>
            /// Enum ThTHPattaraMaleEnum for th-TH, Pattara (Male)
            /// </summary>
            [EnumMember(Value = "th-TH, Pattara (Male)")]
            ThTHPattaraMaleEnum = 67,
            
            /// <summary>
            /// Enum TrTRSedaFemaleEnum for tr-TR, Seda (Female)
            /// </summary>
            [EnumMember(Value = "tr-TR, Seda (Female)")]
            TrTRSedaFemaleEnum = 68,
            
            /// <summary>
            /// Enum ViVNAnMaleEnum for vi-VN, An (Male)
            /// </summary>
            [EnumMember(Value = "vi-VN, An (Male)")]
            ViVNAnMaleEnum = 69,
            
            /// <summary>
            /// Enum ZhCNHuihuiFemaleEnum for zh-CN, Huihui (Female)
            /// </summary>
            [EnumMember(Value = "zh-CN, Huihui (Female)")]
            ZhCNHuihuiFemaleEnum = 70,
            
            /// <summary>
            /// Enum ZhCNKangkangMaleEnum for zh-CN, Kangkang (Male)
            /// </summary>
            [EnumMember(Value = "zh-CN, Kangkang (Male)")]
            ZhCNKangkangMaleEnum = 71,
            
            /// <summary>
            /// Enum ZhCNYaoyaoFemaleEnum for zh-CN, Yaoyao (Female)
            /// </summary>
            [EnumMember(Value = "zh-CN, Yaoyao (Female)")]
            ZhCNYaoyaoFemaleEnum = 72,
            
            /// <summary>
            /// Enum ZhHKDannyMaleEnum for zh-HK, Danny (Male)
            /// </summary>
            [EnumMember(Value = "zh-HK, Danny (Male)")]
            ZhHKDannyMaleEnum = 73,
            
            /// <summary>
            /// Enum ZhHKTracyFemaleEnum for zh-HK, Tracy (Female)
            /// </summary>
            [EnumMember(Value = "zh-HK, Tracy (Female)")]
            ZhHKTracyFemaleEnum = 74,
            
            /// <summary>
            /// Enum ZhTWHanHanFemaleEnum for zh-TW, HanHan (Female)
            /// </summary>
            [EnumMember(Value = "zh-TW, HanHan (Female)")]
            ZhTWHanHanFemaleEnum = 75,
            
            /// <summary>
            /// Enum ZhTWYatingFemaleEnum for zh-TW, Yating (Female)
            /// </summary>
            [EnumMember(Value = "zh-TW, Yating (Female)")]
            ZhTWYatingFemaleEnum = 76,
            
            /// <summary>
            /// Enum ZhTWZhiweiMaleEnum for zh-TW, Zhiwei (Male)
            /// </summary>
            [EnumMember(Value = "zh-TW, Zhiwei (Male)")]
            ZhTWZhiweiMaleEnum = 77
        }

        /// <summary>
        /// Voice locale (must match language of input text)
        /// </summary>
        /// <value>Voice locale (must match language of input text)</value>
        [Required]
        [DataMember(Name="voice", EmitDefaultValue=false)]
        public VoiceEnum Voice { get; set; } = VoiceEnum.EnUSAriaFemaleEnum;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputTextToSpeech {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Voice: ").Append(Voice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputTextToSpeech)obj);
        }

        /// <summary>
        /// Returns true if InputTextToSpeech instances are equal
        /// </summary>
        /// <param name="other">Instance of InputTextToSpeech to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputTextToSpeech other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Voice == other.Voice ||
                    
                    Voice.Equals(other.Voice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Voice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputTextToSpeech left, InputTextToSpeech right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputTextToSpeech left, InputTextToSpeech right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
