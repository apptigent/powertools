/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputStockPrices : IEquatable<InputStockPrices>
    {
        /// <summary>
        /// Stock ticker symbols (comma-separated, max 20)
        /// </summary>
        /// <value>Stock ticker symbols (comma-separated, max 20)</value>
        [Required]
        [DataMember(Name="symbols", EmitDefaultValue=false)]
        public string Symbols { get; set; }

        /// <summary>
        /// Date (yyyy-MM-dd, leave empty for latest)
        /// </summary>
        /// <value>Date (yyyy-MM-dd, leave empty for latest)</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }


        /// <summary>
        /// Stock exchange
        /// </summary>
        /// <value>Stock exchange</value>
        [TypeConverter(typeof(CustomEnumConverter<ExchangeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ExchangeEnum
        {
            
            /// <summary>
            /// Enum XNYSNewYorkStockExchangeEnum for XNYS (New York Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XNYS (New York Stock Exchange)")]
            XNYSNewYorkStockExchangeEnum = 1,
            
            /// <summary>
            /// Enum XNASNASDAQStockExchangeEnum for XNAS (NASDAQ Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XNAS (NASDAQ Stock Exchange)")]
            XNASNASDAQStockExchangeEnum = 2,
            
            /// <summary>
            /// Enum XBRUEuronextBrusselsEnum for XBRU (Euronext Brussels)
            /// </summary>
            [EnumMember(Value = "XBRU (Euronext Brussels)")]
            XBRUEuronextBrusselsEnum = 3,
            
            /// <summary>
            /// Enum XTSETorontoStockExchangeEnum for XTSE (Toronto Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XTSE (Toronto Stock Exchange)")]
            XTSETorontoStockExchangeEnum = 4,
            
            /// <summary>
            /// Enum XCNQCandadianSecuritiesExchangeEnum for XCNQ (Candadian Securities Exchange)
            /// </summary>
            [EnumMember(Value = "XCNQ (Candadian Securities Exchange)")]
            XCNQCandadianSecuritiesExchangeEnum = 5,
            
            /// <summary>
            /// Enum XSHGShanghaiStockExchangeEnum for XSHG (Shanghai Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XSHG (Shanghai Stock Exchange)")]
            XSHGShanghaiStockExchangeEnum = 6,
            
            /// <summary>
            /// Enum XCSECopenhagenStockExchangeEnum for XCSE (Copenhagen Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XCSE (Copenhagen Stock Exchange)")]
            XCSECopenhagenStockExchangeEnum = 7,
            
            /// <summary>
            /// Enum XPAREuronextParisEnum for XPAR (Euronext Paris)
            /// </summary>
            [EnumMember(Value = "XPAR (Euronext Paris)")]
            XPAREuronextParisEnum = 8,
            
            /// <summary>
            /// Enum XFRADeutscheBorseEnum for XFRA (Deutsche Borse)
            /// </summary>
            [EnumMember(Value = "XFRA (Deutsche Borse)")]
            XFRADeutscheBorseEnum = 9,
            
            /// <summary>
            /// Enum XHKGHongKongStockExchangeEnum for XHKG (Hong Kong Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XHKG (Hong Kong Stock Exchange)")]
            XHKGHongKongStockExchangeEnum = 10,
            
            /// <summary>
            /// Enum XNSENationalStockExchangeIndiaEnum for XNSE (National Stock Exchange India)
            /// </summary>
            [EnumMember(Value = "XNSE (National Stock Exchange India)")]
            XNSENationalStockExchangeIndiaEnum = 11,
            
            /// <summary>
            /// Enum XTAETelAvivStockExchangeEnum for XTAE (Tel Aviv Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XTAE (Tel Aviv Stock Exchange)")]
            XTAETelAvivStockExchangeEnum = 12,
            
            /// <summary>
            /// Enum XNGONagoyaStockExchangeEnum for XNGO (Nagoya Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XNGO (Nagoya Stock Exchange)")]
            XNGONagoyaStockExchangeEnum = 13,
            
            /// <summary>
            /// Enum XFKAFukuokaStockExchangeEnum for XFKA (Fukuoka Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XFKA (Fukuoka Stock Exchange)")]
            XFKAFukuokaStockExchangeEnum = 14,
            
            /// <summary>
            /// Enum XSAPSapporoStockExchangeEnum for XSAP (Sapporo Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XSAP (Sapporo Stock Exchange)")]
            XSAPSapporoStockExchangeEnum = 15,
            
            /// <summary>
            /// Enum XMEXMexicanStockExchangeEnum for XMEX (Mexican Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XMEX (Mexican Stock Exchange)")]
            XMEXMexicanStockExchangeEnum = 16,
            
            /// <summary>
            /// Enum XNZENewZealandStockExchangeEnum for XNZE (New Zealand Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XNZE (New Zealand Stock Exchange)")]
            XNZENewZealandStockExchangeEnum = 17,
            
            /// <summary>
            /// Enum XLISEuronextLisbonEnum for XLIS (Euronext Lisbon)
            /// </summary>
            [EnumMember(Value = "XLIS (Euronext Lisbon)")]
            XLISEuronextLisbonEnum = 18,
            
            /// <summary>
            /// Enum MISXMoscowStockExchangeEnum for MISX (Moscow Stock Exchange)
            /// </summary>
            [EnumMember(Value = "MISX (Moscow Stock Exchange)")]
            MISXMoscowStockExchangeEnum = 19,
            
            /// <summary>
            /// Enum XSESSingaporeStockExchangeEnum for XSES (Singapore Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XSES (Singapore Stock Exchange)")]
            XSESSingaporeStockExchangeEnum = 20,
            
            /// <summary>
            /// Enum XLONLondonStockExchangeEnum for XLON (London Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XLON (London Stock Exchange)")]
            XLONLondonStockExchangeEnum = 21,
            
            /// <summary>
            /// Enum XASEAmericanStockExchangeEnum for XASE (American Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XASE (American Stock Exchange)")]
            XASEAmericanStockExchangeEnum = 22,
            
            /// <summary>
            /// Enum XASXAustraliaStockExchangeEnum for XASX (Australia Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XASX (Australia Stock Exchange)")]
            XASXAustraliaStockExchangeEnum = 23,
            
            /// <summary>
            /// Enum XDFMDubaiFinancialMarketEnum for XDFM (Dubai Financial Market)
            /// </summary>
            [EnumMember(Value = "XDFM (Dubai Financial Market)")]
            XDFMDubaiFinancialMarketEnum = 24,
            
            /// <summary>
            /// Enum XBKKStockExchangeOfThailandEnum for XBKK (Stock Exchange of Thailand)
            /// </summary>
            [EnumMember(Value = "XBKK (Stock Exchange of Thailand)")]
            XBKKStockExchangeOfThailandEnum = 25,
            
            /// <summary>
            /// Enum XSWXSIXSwissExchangeEnum for XSWX (SIX Swiss Exchange)
            /// </summary>
            [EnumMember(Value = "XSWX (SIX Swiss Exchange)")]
            XSWXSIXSwissExchangeEnum = 26,
            
            /// <summary>
            /// Enum XSTOStockholmStockExchangeEnum for XSTO (Stockholm Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XSTO (Stockholm Stock Exchange)")]
            XSTOStockholmStockExchangeEnum = 27,
            
            /// <summary>
            /// Enum BMEXBolsasYMercadosEspaolesEnum for BMEX (Bolsas y Mercados Españoles)
            /// </summary>
            [EnumMember(Value = "BMEX (Bolsas y Mercados Españoles)")]
            BMEXBolsasYMercadosEspaolesEnum = 28,
            
            /// <summary>
            /// Enum XJSEJohannesburgStockExchangeEnum for XJSE (Johannesburg Stock Exchange)
            /// </summary>
            [EnumMember(Value = "XJSE (Johannesburg Stock Exchange)")]
            XJSEJohannesburgStockExchangeEnum = 29
        }

        /// <summary>
        /// Stock exchange
        /// </summary>
        /// <value>Stock exchange</value>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public ExchangeEnum Exchange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputStockPrices {\n");
            sb.Append("  Symbols: ").Append(Symbols).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputStockPrices)obj);
        }

        /// <summary>
        /// Returns true if InputStockPrices instances are equal
        /// </summary>
        /// <param name="other">Instance of InputStockPrices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputStockPrices other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Symbols == other.Symbols ||
                    Symbols != null &&
                    Symbols.Equals(other.Symbols)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Exchange == other.Exchange ||
                    
                    Exchange.Equals(other.Exchange)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Symbols != null)
                    hashCode = hashCode * 59 + Symbols.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    
                    hashCode = hashCode * 59 + Exchange.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputStockPrices left, InputStockPrices right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputStockPrices left, InputStockPrices right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
