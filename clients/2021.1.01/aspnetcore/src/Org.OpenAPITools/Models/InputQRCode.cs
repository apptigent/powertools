/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputQRCode : IEquatable<InputQRCode>
    {
        /// <summary>
        /// Text value(s) (vertical bar delimited by type)
        /// </summary>
        /// <value>Text value(s) (vertical bar delimited by type)</value>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }


        /// <summary>
        /// Payload type
        /// </summary>
        /// <value>Payload type</value>
        [TypeConverter(typeof(CustomEnumConverter<PayloadEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PayloadEnum
        {
            
            /// <summary>
            /// Enum PlainTextStringEnum for Plain Text (string)
            /// </summary>
            [EnumMember(Value = "Plain Text (string)")]
            PlainTextStringEnum = 1,
            
            /// <summary>
            /// Enum BitcoinPaymentAddressAmountLabelMessageEnum for Bitcoin Payment (address|amount|label|message)
            /// </summary>
            [EnumMember(Value = "Bitcoin Payment (address|amount|label|message)")]
            BitcoinPaymentAddressAmountLabelMessageEnum = 2,
            
            /// <summary>
            /// Enum BookmarkUrlTitleEnum for Bookmark (url|title)
            /// </summary>
            [EnumMember(Value = "Bookmark (url|title)")]
            BookmarkUrlTitleEnum = 3,
            
            /// <summary>
            /// Enum CalendarEventSubjectDescriptionLocationStartEndAllDayEventTrueOrFalseFormatUniversalOrICalEnum for Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])
            /// </summary>
            [EnumMember(Value = "Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])")]
            CalendarEventSubjectDescriptionLocationStartEndAllDayEventTrueOrFalseFormatUniversalOrICalEnum = 4,
            
            /// <summary>
            /// Enum GeolocationLatitudeLongitudeEnum for Geolocation (latitude|longitude)
            /// </summary>
            [EnumMember(Value = "Geolocation (latitude|longitude)")]
            GeolocationLatitudeLongitudeEnum = 5,
            
            /// <summary>
            /// Enum MailRecipientSubjectMessageEnum for Mail (recipient|subject|message)
            /// </summary>
            [EnumMember(Value = "Mail (recipient|subject|message)")]
            MailRecipientSubjectMessageEnum = 6,
            
            /// <summary>
            /// Enum PhoneNumberStringEnum for Phone Number (string)
            /// </summary>
            [EnumMember(Value = "Phone Number (string)")]
            PhoneNumberStringEnum = 7,
            
            /// <summary>
            /// Enum SMSNumberMessageEnum for SMS (number|message)
            /// </summary>
            [EnumMember(Value = "SMS (number|message)")]
            SMSNumberMessageEnum = 8,
            
            /// <summary>
            /// Enum URLStringEnum for URL (string)
            /// </summary>
            [EnumMember(Value = "URL (string)")]
            URLStringEnum = 9,
            
            /// <summary>
            /// Enum WiFiSsidPasswordAuthenticationModeWEPWPAOrWPA2Enum for WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])
            /// </summary>
            [EnumMember(Value = "WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])")]
            WiFiSsidPasswordAuthenticationModeWEPWPAOrWPA2Enum = 10
        }

        /// <summary>
        /// Payload type
        /// </summary>
        /// <value>Payload type</value>
        [Required]
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public PayloadEnum Payload { get; set; } = PayloadEnum.PlainTextStringEnum;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputQRCode {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputQRCode)obj);
        }

        /// <summary>
        /// Returns true if InputQRCode instances are equal
        /// </summary>
        /// <param name="other">Instance of InputQRCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputQRCode other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    Input != null &&
                    Input.Equals(other.Input)
                ) && 
                (
                    Payload == other.Payload ||
                    
                    Payload.Equals(other.Payload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Input != null)
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputQRCode left, InputQRCode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputQRCode left, InputQRCode right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
