/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputMarketIndex : IEquatable<InputMarketIndex>
    {

        /// <summary>
        /// Market index
        /// </summary>
        /// <value>Market index</value>
        [TypeConverter(typeof(CustomEnumConverter<SymbolEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SymbolEnum
        {
            
            /// <summary>
            /// Enum DJAINDXDowJonesCompositeAverageEnum for DJA.INDX (Dow Jones Composite Average)
            /// </summary>
            [EnumMember(Value = "DJA.INDX (Dow Jones Composite Average)")]
            DJAINDXDowJonesCompositeAverageEnum = 1,
            
            /// <summary>
            /// Enum DJIINDXDowJonesIndustrialAverageEnum for DJI.INDX (Dow Jones Industrial Average)
            /// </summary>
            [EnumMember(Value = "DJI.INDX (Dow Jones Industrial Average)")]
            DJIINDXDowJonesIndustrialAverageEnum = 2,
            
            /// <summary>
            /// Enum DJTINDXDowJonesTransportationEnum for DJT.INDX (Dow Jones Transportation)
            /// </summary>
            [EnumMember(Value = "DJT.INDX (Dow Jones Transportation)")]
            DJTINDXDowJonesTransportationEnum = 3,
            
            /// <summary>
            /// Enum DJUSINDXDowJonesUSEnum for DJUS.INDX (Dow Jones US)
            /// </summary>
            [EnumMember(Value = "DJUS.INDX (Dow Jones US)")]
            DJUSINDXDowJonesUSEnum = 4,
            
            /// <summary>
            /// Enum DXYINDXUSDollarIndexEnum for DXY.INDX (US Dollar Index)
            /// </summary>
            [EnumMember(Value = "DXY.INDX (US Dollar Index)")]
            DXYINDXUSDollarIndexEnum = 5,
            
            /// <summary>
            /// Enum GDOWINDXGlobalDowUSDEnum for GDOW.INDX (Global Dow USD)
            /// </summary>
            [EnumMember(Value = "GDOW.INDX (Global Dow USD)")]
            GDOWINDXGlobalDowUSDEnum = 6,
            
            /// <summary>
            /// Enum NYINDXNYSEUS100IndexEnum for NY.INDX (NYSE US 100 Index)
            /// </summary>
            [EnumMember(Value = "NY.INDX (NYSE US 100 Index)")]
            NYINDXNYSEUS100IndexEnum = 7,
            
            /// <summary>
            /// Enum NYAINDXNYSECompositeEnum for NYA.INDX (NYSE Composite)
            /// </summary>
            [EnumMember(Value = "NYA.INDX (NYSE Composite)")]
            NYAINDXNYSECompositeEnum = 8,
            
            /// <summary>
            /// Enum IXICINDXNASDAQCompositeEnum for IXIC.INDX (NASDAQ Composite)
            /// </summary>
            [EnumMember(Value = "IXIC.INDX (NASDAQ Composite)")]
            IXICINDXNASDAQCompositeEnum = 9,
            
            /// <summary>
            /// Enum NDXINDXNASDAQ100Enum for NDX.INDX (NASDAQ 100)
            /// </summary>
            [EnumMember(Value = "NDX.INDX (NASDAQ 100)")]
            NDXINDXNASDAQ100Enum = 10,
            
            /// <summary>
            /// Enum GSPCINDXSP500Enum for GSPC.INDX (S&P 500)
            /// </summary>
            [EnumMember(Value = "GSPC.INDX (S&P 500)")]
            GSPCINDXSP500Enum = 11,
            
            /// <summary>
            /// Enum ESINDXSP500FuturesEnum for ES.INDX (S&P 500 Futures)
            /// </summary>
            [EnumMember(Value = "ES.INDX (S&P 500 Futures)")]
            ESINDXSP500FuturesEnum = 12,
            
            /// <summary>
            /// Enum MIDINDXSPMidcap400Enum for MID.INDX (S&P Midcap 400)
            /// </summary>
            [EnumMember(Value = "MID.INDX (S&P Midcap 400)")]
            MIDINDXSPMidcap400Enum = 13,
            
            /// <summary>
            /// Enum GPTSEINDXSPTSXCompositeIndexCanadaEnum for GPTSE.INDX (S&P TSX Composite Index [Canada])
            /// </summary>
            [EnumMember(Value = "GPTSE.INDX (S&P TSX Composite Index [Canada])")]
            GPTSEINDXSPTSXCompositeIndexCanadaEnum = 14,
            
            /// <summary>
            /// Enum FTSEINDXFTSE100IndexUKEnum for FTSE.INDX (FTSE 100 Index [UK])
            /// </summary>
            [EnumMember(Value = "FTSE.INDX (FTSE 100 Index [UK])")]
            FTSEINDXFTSE100IndexUKEnum = 15,
            
            /// <summary>
            /// Enum CDAXXINDXDAXCompositeIndexGermanyEnum for CDAXX.INDX (DAX Composite Index [Germany])
            /// </summary>
            [EnumMember(Value = "CDAXX.INDX (DAX Composite Index [Germany])")]
            CDAXXINDXDAXCompositeIndexGermanyEnum = 16,
            
            /// <summary>
            /// Enum GDAXIINDXDAXIndexGermanyEnum for GDAXI.INDX (DAX Index [Germany])
            /// </summary>
            [EnumMember(Value = "GDAXI.INDX (DAX Index [Germany])")]
            GDAXIINDXDAXIndexGermanyEnum = 17,
            
            /// <summary>
            /// Enum HSCEINDXHangSengChinaEnterpriseCEIEnum for HSCE.INDX (Hang Seng China Enterprise (CEI))
            /// </summary>
            [EnumMember(Value = "HSCE.INDX (Hang Seng China Enterprise (CEI))")]
            HSCEINDXHangSengChinaEnterpriseCEIEnum = 18,
            
            /// <summary>
            /// Enum HSIINDXHangSengIndexHongKongEnum for HSI.INDX (Hang Seng Index [Hong Kong])
            /// </summary>
            [EnumMember(Value = "HSI.INDX (Hang Seng Index [Hong Kong])")]
            HSIINDXHangSengIndexHongKongEnum = 19,
            
            /// <summary>
            /// Enum N100INDXEuroNext100Enum for N100.INDX (EuroNext 100)
            /// </summary>
            [EnumMember(Value = "N100.INDX (EuroNext 100)")]
            N100INDXEuroNext100Enum = 20,
            
            /// <summary>
            /// Enum N225INDXNikkei225IndexEnum for N225.INDX (Nikkei 225 Index)
            /// </summary>
            [EnumMember(Value = "N225.INDX (Nikkei 225 Index)")]
            N225INDXNikkei225IndexEnum = 21,
            
            /// <summary>
            /// Enum RTSIINDXRTSIIndexRussiaEnum for RTSI.INDX (RTSI Index [Russia])
            /// </summary>
            [EnumMember(Value = "RTSI.INDX (RTSI Index [Russia])")]
            RTSIINDXRTSIIndexRussiaEnum = 22,
            
            /// <summary>
            /// Enum SSECINDXShanghaiCompositeEnum for SSEC.INDX (Shanghai Composite)
            /// </summary>
            [EnumMember(Value = "SSEC.INDX (Shanghai Composite)")]
            SSECINDXShanghaiCompositeEnum = 23,
            
            /// <summary>
            /// Enum SSMIINDXSwissMarketIndexEnum for SSMI.INDX (Swiss Market Index)
            /// </summary>
            [EnumMember(Value = "SSMI.INDX (Swiss Market Index)")]
            SSMIINDXSwissMarketIndexEnum = 24
        }

        /// <summary>
        /// Market index
        /// </summary>
        /// <value>Market index</value>
        [Required]
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public SymbolEnum Symbol { get; set; }

        /// <summary>
        /// Date (yyyy-MM-dd, leave empty for last trading day)
        /// </summary>
        /// <value>Date (yyyy-MM-dd, leave empty for last trading day)</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputMarketIndex {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputMarketIndex)obj);
        }

        /// <summary>
        /// Returns true if InputMarketIndex instances are equal
        /// </summary>
        /// <param name="other">Instance of InputMarketIndex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputMarketIndex other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Symbol == other.Symbol ||
                    
                    Symbol.Equals(other.Symbol)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputMarketIndex left, InputMarketIndex right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputMarketIndex left, InputMarketIndex right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
