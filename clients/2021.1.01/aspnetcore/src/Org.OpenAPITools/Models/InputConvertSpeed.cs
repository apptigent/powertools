/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputConvertSpeed : IEquatable<InputConvertSpeed>
    {
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public decimal Input { get; set; }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<SourceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum CentimeterPerHourEnum for CentimeterPerHour
            /// </summary>
            [EnumMember(Value = "CentimeterPerHour")]
            CentimeterPerHourEnum = 1,
            
            /// <summary>
            /// Enum CentimeterPerMinuteEnum for CentimeterPerMinute
            /// </summary>
            [EnumMember(Value = "CentimeterPerMinute")]
            CentimeterPerMinuteEnum = 2,
            
            /// <summary>
            /// Enum CentimeterPerSecondEnum for CentimeterPerSecond
            /// </summary>
            [EnumMember(Value = "CentimeterPerSecond")]
            CentimeterPerSecondEnum = 3,
            
            /// <summary>
            /// Enum DecimeterPerMinuteEnum for DecimeterPerMinute
            /// </summary>
            [EnumMember(Value = "DecimeterPerMinute")]
            DecimeterPerMinuteEnum = 4,
            
            /// <summary>
            /// Enum DecimeterPerSecondEnum for DecimeterPerSecond
            /// </summary>
            [EnumMember(Value = "DecimeterPerSecond")]
            DecimeterPerSecondEnum = 5,
            
            /// <summary>
            /// Enum FootPerHourEnum for FootPerHour
            /// </summary>
            [EnumMember(Value = "FootPerHour")]
            FootPerHourEnum = 6,
            
            /// <summary>
            /// Enum FootPerMinuteEnum for FootPerMinute
            /// </summary>
            [EnumMember(Value = "FootPerMinute")]
            FootPerMinuteEnum = 7,
            
            /// <summary>
            /// Enum FootPerSecondEnum for FootPerSecond
            /// </summary>
            [EnumMember(Value = "FootPerSecond")]
            FootPerSecondEnum = 8,
            
            /// <summary>
            /// Enum InchPerHourEnum for InchPerHour
            /// </summary>
            [EnumMember(Value = "InchPerHour")]
            InchPerHourEnum = 9,
            
            /// <summary>
            /// Enum InchPerMinuteEnum for InchPerMinute
            /// </summary>
            [EnumMember(Value = "InchPerMinute")]
            InchPerMinuteEnum = 10,
            
            /// <summary>
            /// Enum InchPerSecondEnum for InchPerSecond
            /// </summary>
            [EnumMember(Value = "InchPerSecond")]
            InchPerSecondEnum = 11,
            
            /// <summary>
            /// Enum KilometerPerHourEnum for KilometerPerHour
            /// </summary>
            [EnumMember(Value = "KilometerPerHour")]
            KilometerPerHourEnum = 12,
            
            /// <summary>
            /// Enum KilometerPerMinuteEnum for KilometerPerMinute
            /// </summary>
            [EnumMember(Value = "KilometerPerMinute")]
            KilometerPerMinuteEnum = 13,
            
            /// <summary>
            /// Enum KilometerPerSecondEnum for KilometerPerSecond
            /// </summary>
            [EnumMember(Value = "KilometerPerSecond")]
            KilometerPerSecondEnum = 14,
            
            /// <summary>
            /// Enum KnotEnum for Knot
            /// </summary>
            [EnumMember(Value = "Knot")]
            KnotEnum = 15,
            
            /// <summary>
            /// Enum MeterPerHourEnum for MeterPerHour
            /// </summary>
            [EnumMember(Value = "MeterPerHour")]
            MeterPerHourEnum = 16,
            
            /// <summary>
            /// Enum MeterPerMinuteEnum for MeterPerMinute
            /// </summary>
            [EnumMember(Value = "MeterPerMinute")]
            MeterPerMinuteEnum = 17,
            
            /// <summary>
            /// Enum MeterPerSecondEnum for MeterPerSecond
            /// </summary>
            [EnumMember(Value = "MeterPerSecond")]
            MeterPerSecondEnum = 18,
            
            /// <summary>
            /// Enum MicrometerPerMinuteEnum for MicrometerPerMinute
            /// </summary>
            [EnumMember(Value = "MicrometerPerMinute")]
            MicrometerPerMinuteEnum = 19,
            
            /// <summary>
            /// Enum MicrometerPerSecondEnum for MicrometerPerSecond
            /// </summary>
            [EnumMember(Value = "MicrometerPerSecond")]
            MicrometerPerSecondEnum = 20,
            
            /// <summary>
            /// Enum MilePerHourEnum for MilePerHour
            /// </summary>
            [EnumMember(Value = "MilePerHour")]
            MilePerHourEnum = 21,
            
            /// <summary>
            /// Enum MillimeterPerHourEnum for MillimeterPerHour
            /// </summary>
            [EnumMember(Value = "MillimeterPerHour")]
            MillimeterPerHourEnum = 22,
            
            /// <summary>
            /// Enum MillimeterPerMinuteEnum for MillimeterPerMinute
            /// </summary>
            [EnumMember(Value = "MillimeterPerMinute")]
            MillimeterPerMinuteEnum = 23,
            
            /// <summary>
            /// Enum MillimeterPerSecondEnum for MillimeterPerSecond
            /// </summary>
            [EnumMember(Value = "MillimeterPerSecond")]
            MillimeterPerSecondEnum = 24,
            
            /// <summary>
            /// Enum NanometerPerMinuteEnum for NanometerPerMinute
            /// </summary>
            [EnumMember(Value = "NanometerPerMinute")]
            NanometerPerMinuteEnum = 25,
            
            /// <summary>
            /// Enum NanometerPerSecondEnum for NanometerPerSecond
            /// </summary>
            [EnumMember(Value = "NanometerPerSecond")]
            NanometerPerSecondEnum = 26,
            
            /// <summary>
            /// Enum YardPerHourEnum for YardPerHour
            /// </summary>
            [EnumMember(Value = "YardPerHour")]
            YardPerHourEnum = 27,
            
            /// <summary>
            /// Enum YardPerMinuteEnum for YardPerMinute
            /// </summary>
            [EnumMember(Value = "YardPerMinute")]
            YardPerMinuteEnum = 28,
            
            /// <summary>
            /// Enum YardPerSecondEnum for YardPerSecond
            /// </summary>
            [EnumMember(Value = "YardPerSecond")]
            YardPerSecondEnum = 29
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [Required]
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum Source { get; set; }


        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TargetEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TargetEnum
        {
            
            /// <summary>
            /// Enum CentimeterPerHourEnum for CentimeterPerHour
            /// </summary>
            [EnumMember(Value = "CentimeterPerHour")]
            CentimeterPerHourEnum = 1,
            
            /// <summary>
            /// Enum CentimeterPerMinuteEnum for CentimeterPerMinute
            /// </summary>
            [EnumMember(Value = "CentimeterPerMinute")]
            CentimeterPerMinuteEnum = 2,
            
            /// <summary>
            /// Enum CentimeterPerSecondEnum for CentimeterPerSecond
            /// </summary>
            [EnumMember(Value = "CentimeterPerSecond")]
            CentimeterPerSecondEnum = 3,
            
            /// <summary>
            /// Enum DecimeterPerMinuteEnum for DecimeterPerMinute
            /// </summary>
            [EnumMember(Value = "DecimeterPerMinute")]
            DecimeterPerMinuteEnum = 4,
            
            /// <summary>
            /// Enum DecimeterPerSecondEnum for DecimeterPerSecond
            /// </summary>
            [EnumMember(Value = "DecimeterPerSecond")]
            DecimeterPerSecondEnum = 5,
            
            /// <summary>
            /// Enum FootPerHourEnum for FootPerHour
            /// </summary>
            [EnumMember(Value = "FootPerHour")]
            FootPerHourEnum = 6,
            
            /// <summary>
            /// Enum FootPerMinuteEnum for FootPerMinute
            /// </summary>
            [EnumMember(Value = "FootPerMinute")]
            FootPerMinuteEnum = 7,
            
            /// <summary>
            /// Enum FootPerSecondEnum for FootPerSecond
            /// </summary>
            [EnumMember(Value = "FootPerSecond")]
            FootPerSecondEnum = 8,
            
            /// <summary>
            /// Enum InchPerHourEnum for InchPerHour
            /// </summary>
            [EnumMember(Value = "InchPerHour")]
            InchPerHourEnum = 9,
            
            /// <summary>
            /// Enum InchPerMinuteEnum for InchPerMinute
            /// </summary>
            [EnumMember(Value = "InchPerMinute")]
            InchPerMinuteEnum = 10,
            
            /// <summary>
            /// Enum InchPerSecondEnum for InchPerSecond
            /// </summary>
            [EnumMember(Value = "InchPerSecond")]
            InchPerSecondEnum = 11,
            
            /// <summary>
            /// Enum KilometerPerHourEnum for KilometerPerHour
            /// </summary>
            [EnumMember(Value = "KilometerPerHour")]
            KilometerPerHourEnum = 12,
            
            /// <summary>
            /// Enum KilometerPerMinuteEnum for KilometerPerMinute
            /// </summary>
            [EnumMember(Value = "KilometerPerMinute")]
            KilometerPerMinuteEnum = 13,
            
            /// <summary>
            /// Enum KilometerPerSecondEnum for KilometerPerSecond
            /// </summary>
            [EnumMember(Value = "KilometerPerSecond")]
            KilometerPerSecondEnum = 14,
            
            /// <summary>
            /// Enum KnotEnum for Knot
            /// </summary>
            [EnumMember(Value = "Knot")]
            KnotEnum = 15,
            
            /// <summary>
            /// Enum MeterPerHourEnum for MeterPerHour
            /// </summary>
            [EnumMember(Value = "MeterPerHour")]
            MeterPerHourEnum = 16,
            
            /// <summary>
            /// Enum MeterPerMinuteEnum for MeterPerMinute
            /// </summary>
            [EnumMember(Value = "MeterPerMinute")]
            MeterPerMinuteEnum = 17,
            
            /// <summary>
            /// Enum MeterPerSecondEnum for MeterPerSecond
            /// </summary>
            [EnumMember(Value = "MeterPerSecond")]
            MeterPerSecondEnum = 18,
            
            /// <summary>
            /// Enum MicrometerPerMinuteEnum for MicrometerPerMinute
            /// </summary>
            [EnumMember(Value = "MicrometerPerMinute")]
            MicrometerPerMinuteEnum = 19,
            
            /// <summary>
            /// Enum MicrometerPerSecondEnum for MicrometerPerSecond
            /// </summary>
            [EnumMember(Value = "MicrometerPerSecond")]
            MicrometerPerSecondEnum = 20,
            
            /// <summary>
            /// Enum MilePerHourEnum for MilePerHour
            /// </summary>
            [EnumMember(Value = "MilePerHour")]
            MilePerHourEnum = 21,
            
            /// <summary>
            /// Enum MillimeterPerHourEnum for MillimeterPerHour
            /// </summary>
            [EnumMember(Value = "MillimeterPerHour")]
            MillimeterPerHourEnum = 22,
            
            /// <summary>
            /// Enum MillimeterPerMinuteEnum for MillimeterPerMinute
            /// </summary>
            [EnumMember(Value = "MillimeterPerMinute")]
            MillimeterPerMinuteEnum = 23,
            
            /// <summary>
            /// Enum MillimeterPerSecondEnum for MillimeterPerSecond
            /// </summary>
            [EnumMember(Value = "MillimeterPerSecond")]
            MillimeterPerSecondEnum = 24,
            
            /// <summary>
            /// Enum NanometerPerMinuteEnum for NanometerPerMinute
            /// </summary>
            [EnumMember(Value = "NanometerPerMinute")]
            NanometerPerMinuteEnum = 25,
            
            /// <summary>
            /// Enum NanometerPerSecondEnum for NanometerPerSecond
            /// </summary>
            [EnumMember(Value = "NanometerPerSecond")]
            NanometerPerSecondEnum = 26,
            
            /// <summary>
            /// Enum YardPerHourEnum for YardPerHour
            /// </summary>
            [EnumMember(Value = "YardPerHour")]
            YardPerHourEnum = 27,
            
            /// <summary>
            /// Enum YardPerMinuteEnum for YardPerMinute
            /// </summary>
            [EnumMember(Value = "YardPerMinute")]
            YardPerMinuteEnum = 28,
            
            /// <summary>
            /// Enum YardPerSecondEnum for YardPerSecond
            /// </summary>
            [EnumMember(Value = "YardPerSecond")]
            YardPerSecondEnum = 29
        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [Required]
        [DataMember(Name="target", EmitDefaultValue=false)]
        public TargetEnum Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputConvertSpeed {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputConvertSpeed)obj);
        }

        /// <summary>
        /// Returns true if InputConvertSpeed instances are equal
        /// </summary>
        /// <param name="other">Instance of InputConvertSpeed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputConvertSpeed other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    
                    Input.Equals(other.Input)
                ) && 
                (
                    Source == other.Source ||
                    
                    Source.Equals(other.Source)
                ) && 
                (
                    Target == other.Target ||
                    
                    Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + Target.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputConvertSpeed left, InputConvertSpeed right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputConvertSpeed left, InputConvertSpeed right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
