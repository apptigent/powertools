/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputConvertWeight : IEquatable<InputConvertWeight>
    {
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public decimal Input { get; set; }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<SourceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum CentigramEnum for Centigram
            /// </summary>
            [EnumMember(Value = "Centigram")]
            CentigramEnum = 1,
            
            /// <summary>
            /// Enum DecagramEnum for Decagram
            /// </summary>
            [EnumMember(Value = "Decagram")]
            DecagramEnum = 2,
            
            /// <summary>
            /// Enum DecigramEnum for Decigram
            /// </summary>
            [EnumMember(Value = "Decigram")]
            DecigramEnum = 3,
            
            /// <summary>
            /// Enum GrainEnum for Grain
            /// </summary>
            [EnumMember(Value = "Grain")]
            GrainEnum = 4,
            
            /// <summary>
            /// Enum GramEnum for Gram
            /// </summary>
            [EnumMember(Value = "Gram")]
            GramEnum = 5,
            
            /// <summary>
            /// Enum HectogramEnum for Hectogram
            /// </summary>
            [EnumMember(Value = "Hectogram")]
            HectogramEnum = 6,
            
            /// <summary>
            /// Enum KilogramEnum for Kilogram
            /// </summary>
            [EnumMember(Value = "Kilogram")]
            KilogramEnum = 7,
            
            /// <summary>
            /// Enum MicrogramEnum for Microgram
            /// </summary>
            [EnumMember(Value = "Microgram")]
            MicrogramEnum = 8,
            
            /// <summary>
            /// Enum MilligramEnum for Milligram
            /// </summary>
            [EnumMember(Value = "Milligram")]
            MilligramEnum = 9,
            
            /// <summary>
            /// Enum NanogramEnum for Nanogram
            /// </summary>
            [EnumMember(Value = "Nanogram")]
            NanogramEnum = 10,
            
            /// <summary>
            /// Enum OunceEnum for Ounce
            /// </summary>
            [EnumMember(Value = "Ounce")]
            OunceEnum = 11,
            
            /// <summary>
            /// Enum PoundEnum for Pound
            /// </summary>
            [EnumMember(Value = "Pound")]
            PoundEnum = 12,
            
            /// <summary>
            /// Enum StoneEnum for Stone
            /// </summary>
            [EnumMember(Value = "Stone")]
            StoneEnum = 13,
            
            /// <summary>
            /// Enum SolarMassEnum for Solar Mass
            /// </summary>
            [EnumMember(Value = "Solar Mass")]
            SolarMassEnum = 14,
            
            /// <summary>
            /// Enum EarthMassEnum for Earth Mass
            /// </summary>
            [EnumMember(Value = "Earth Mass")]
            EarthMassEnum = 15,
            
            /// <summary>
            /// Enum SlugEnum for Slug
            /// </summary>
            [EnumMember(Value = "Slug")]
            SlugEnum = 16,
            
            /// <summary>
            /// Enum ShortTonEnum for Short Ton
            /// </summary>
            [EnumMember(Value = "Short Ton")]
            ShortTonEnum = 17,
            
            /// <summary>
            /// Enum LongTonEnum for Long Ton
            /// </summary>
            [EnumMember(Value = "Long Ton")]
            LongTonEnum = 18,
            
            /// <summary>
            /// Enum TonEnum for Ton
            /// </summary>
            [EnumMember(Value = "Ton")]
            TonEnum = 19,
            
            /// <summary>
            /// Enum MegatonEnum for Megaton
            /// </summary>
            [EnumMember(Value = "Megaton")]
            MegatonEnum = 20,
            
            /// <summary>
            /// Enum ShortHundredweightEnum for Short Hundredweight
            /// </summary>
            [EnumMember(Value = "Short Hundredweight")]
            ShortHundredweightEnum = 21,
            
            /// <summary>
            /// Enum LongHundredweightEnum for Long Hundredweight
            /// </summary>
            [EnumMember(Value = "Long Hundredweight")]
            LongHundredweightEnum = 22
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [Required]
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum Source { get; set; }


        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TargetEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TargetEnum
        {
            
            /// <summary>
            /// Enum CentigramEnum for Centigram
            /// </summary>
            [EnumMember(Value = "Centigram")]
            CentigramEnum = 1,
            
            /// <summary>
            /// Enum DecagramEnum for Decagram
            /// </summary>
            [EnumMember(Value = "Decagram")]
            DecagramEnum = 2,
            
            /// <summary>
            /// Enum DecigramEnum for Decigram
            /// </summary>
            [EnumMember(Value = "Decigram")]
            DecigramEnum = 3,
            
            /// <summary>
            /// Enum GrainEnum for Grain
            /// </summary>
            [EnumMember(Value = "Grain")]
            GrainEnum = 4,
            
            /// <summary>
            /// Enum GramEnum for Gram
            /// </summary>
            [EnumMember(Value = "Gram")]
            GramEnum = 5,
            
            /// <summary>
            /// Enum HectogramEnum for Hectogram
            /// </summary>
            [EnumMember(Value = "Hectogram")]
            HectogramEnum = 6,
            
            /// <summary>
            /// Enum KilogramEnum for Kilogram
            /// </summary>
            [EnumMember(Value = "Kilogram")]
            KilogramEnum = 7,
            
            /// <summary>
            /// Enum MicrogramEnum for Microgram
            /// </summary>
            [EnumMember(Value = "Microgram")]
            MicrogramEnum = 8,
            
            /// <summary>
            /// Enum MilligramEnum for Milligram
            /// </summary>
            [EnumMember(Value = "Milligram")]
            MilligramEnum = 9,
            
            /// <summary>
            /// Enum NanogramEnum for Nanogram
            /// </summary>
            [EnumMember(Value = "Nanogram")]
            NanogramEnum = 10,
            
            /// <summary>
            /// Enum OunceEnum for Ounce
            /// </summary>
            [EnumMember(Value = "Ounce")]
            OunceEnum = 11,
            
            /// <summary>
            /// Enum PoundEnum for Pound
            /// </summary>
            [EnumMember(Value = "Pound")]
            PoundEnum = 12,
            
            /// <summary>
            /// Enum StoneEnum for Stone
            /// </summary>
            [EnumMember(Value = "Stone")]
            StoneEnum = 13,
            
            /// <summary>
            /// Enum TonEnum for Ton
            /// </summary>
            [EnumMember(Value = "Ton")]
            TonEnum = 14
        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [Required]
        [DataMember(Name="target", EmitDefaultValue=false)]
        public TargetEnum Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputConvertWeight {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputConvertWeight)obj);
        }

        /// <summary>
        /// Returns true if InputConvertWeight instances are equal
        /// </summary>
        /// <param name="other">Instance of InputConvertWeight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputConvertWeight other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    
                    Input.Equals(other.Input)
                ) && 
                (
                    Source == other.Source ||
                    
                    Source.Equals(other.Source)
                ) && 
                (
                    Target == other.Target ||
                    
                    Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + Target.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputConvertWeight left, InputConvertWeight right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputConvertWeight left, InputConvertWeight right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
