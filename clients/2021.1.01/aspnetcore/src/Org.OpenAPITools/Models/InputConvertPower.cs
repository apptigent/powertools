/*
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InputConvertPower : IEquatable<InputConvertPower>
    {
        /// <summary>
        /// Gets or Sets Input
        /// </summary>
        [Required]
        [DataMember(Name="input", EmitDefaultValue=false)]
        public decimal Input { get; set; }


        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<SourceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum BritishThermalUnitPerHourEnum for BritishThermalUnitPerHour
            /// </summary>
            [EnumMember(Value = "BritishThermalUnitPerHour")]
            BritishThermalUnitPerHourEnum = 1,
            
            /// <summary>
            /// Enum DecawattEnum for Decawatt
            /// </summary>
            [EnumMember(Value = "Decawatt")]
            DecawattEnum = 2,
            
            /// <summary>
            /// Enum DeciwattEnum for Deciwatt
            /// </summary>
            [EnumMember(Value = "Deciwatt")]
            DeciwattEnum = 3,
            
            /// <summary>
            /// Enum ElectricalHorsepowerEnum for ElectricalHorsepower
            /// </summary>
            [EnumMember(Value = "ElectricalHorsepower")]
            ElectricalHorsepowerEnum = 4,
            
            /// <summary>
            /// Enum FemtowattEnum for Femtowatt
            /// </summary>
            [EnumMember(Value = "Femtowatt")]
            FemtowattEnum = 5,
            
            /// <summary>
            /// Enum GigawattEnum for Gigawatt
            /// </summary>
            [EnumMember(Value = "Gigawatt")]
            GigawattEnum = 6,
            
            /// <summary>
            /// Enum HydraulicHorsepowerEnum for HydraulicHorsepower
            /// </summary>
            [EnumMember(Value = "HydraulicHorsepower")]
            HydraulicHorsepowerEnum = 7,
            
            /// <summary>
            /// Enum KilowattEnum for Kilowatt
            /// </summary>
            [EnumMember(Value = "Kilowatt")]
            KilowattEnum = 8,
            
            /// <summary>
            /// Enum MechanicalHorsepowerEnum for MechanicalHorsepower
            /// </summary>
            [EnumMember(Value = "MechanicalHorsepower")]
            MechanicalHorsepowerEnum = 9,
            
            /// <summary>
            /// Enum MegawattEnum for Megawatt
            /// </summary>
            [EnumMember(Value = "Megawatt")]
            MegawattEnum = 10,
            
            /// <summary>
            /// Enum MicrowattEnum for Microwatt
            /// </summary>
            [EnumMember(Value = "Microwatt")]
            MicrowattEnum = 11,
            
            /// <summary>
            /// Enum MilliwattEnum for Milliwatt
            /// </summary>
            [EnumMember(Value = "Milliwatt")]
            MilliwattEnum = 12,
            
            /// <summary>
            /// Enum NanowattEnum for Nanowatt
            /// </summary>
            [EnumMember(Value = "Nanowatt")]
            NanowattEnum = 13,
            
            /// <summary>
            /// Enum PetawattEnum for Petawatt
            /// </summary>
            [EnumMember(Value = "Petawatt")]
            PetawattEnum = 14,
            
            /// <summary>
            /// Enum PicowattEnum for Picowatt
            /// </summary>
            [EnumMember(Value = "Picowatt")]
            PicowattEnum = 15,
            
            /// <summary>
            /// Enum TerawattEnum for Terawatt
            /// </summary>
            [EnumMember(Value = "Terawatt")]
            TerawattEnum = 16,
            
            /// <summary>
            /// Enum WattEnum for Watt
            /// </summary>
            [EnumMember(Value = "Watt")]
            WattEnum = 17
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [Required]
        [DataMember(Name="source", EmitDefaultValue=false)]
        public SourceEnum Source { get; set; }


        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TargetEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TargetEnum
        {
            
            /// <summary>
            /// Enum BritishThermalUnitPerHourEnum for BritishThermalUnitPerHour
            /// </summary>
            [EnumMember(Value = "BritishThermalUnitPerHour")]
            BritishThermalUnitPerHourEnum = 1,
            
            /// <summary>
            /// Enum DecawattEnum for Decawatt
            /// </summary>
            [EnumMember(Value = "Decawatt")]
            DecawattEnum = 2,
            
            /// <summary>
            /// Enum DeciwattEnum for Deciwatt
            /// </summary>
            [EnumMember(Value = "Deciwatt")]
            DeciwattEnum = 3,
            
            /// <summary>
            /// Enum ElectricalHorsepowerEnum for ElectricalHorsepower
            /// </summary>
            [EnumMember(Value = "ElectricalHorsepower")]
            ElectricalHorsepowerEnum = 4,
            
            /// <summary>
            /// Enum FemtowattEnum for Femtowatt
            /// </summary>
            [EnumMember(Value = "Femtowatt")]
            FemtowattEnum = 5,
            
            /// <summary>
            /// Enum GigawattEnum for Gigawatt
            /// </summary>
            [EnumMember(Value = "Gigawatt")]
            GigawattEnum = 6,
            
            /// <summary>
            /// Enum HydraulicHorsepowerEnum for HydraulicHorsepower
            /// </summary>
            [EnumMember(Value = "HydraulicHorsepower")]
            HydraulicHorsepowerEnum = 7,
            
            /// <summary>
            /// Enum KilowattEnum for Kilowatt
            /// </summary>
            [EnumMember(Value = "Kilowatt")]
            KilowattEnum = 8,
            
            /// <summary>
            /// Enum MechanicalHorsepowerEnum for MechanicalHorsepower
            /// </summary>
            [EnumMember(Value = "MechanicalHorsepower")]
            MechanicalHorsepowerEnum = 9,
            
            /// <summary>
            /// Enum MegawattEnum for Megawatt
            /// </summary>
            [EnumMember(Value = "Megawatt")]
            MegawattEnum = 10,
            
            /// <summary>
            /// Enum MicrowattEnum for Microwatt
            /// </summary>
            [EnumMember(Value = "Microwatt")]
            MicrowattEnum = 11,
            
            /// <summary>
            /// Enum MilliwattEnum for Milliwatt
            /// </summary>
            [EnumMember(Value = "Milliwatt")]
            MilliwattEnum = 12,
            
            /// <summary>
            /// Enum NanowattEnum for Nanowatt
            /// </summary>
            [EnumMember(Value = "Nanowatt")]
            NanowattEnum = 13,
            
            /// <summary>
            /// Enum PetawattEnum for Petawatt
            /// </summary>
            [EnumMember(Value = "Petawatt")]
            PetawattEnum = 14,
            
            /// <summary>
            /// Enum PicowattEnum for Picowatt
            /// </summary>
            [EnumMember(Value = "Picowatt")]
            PicowattEnum = 15,
            
            /// <summary>
            /// Enum TerawattEnum for Terawatt
            /// </summary>
            [EnumMember(Value = "Terawatt")]
            TerawattEnum = 16,
            
            /// <summary>
            /// Enum WattEnum for Watt
            /// </summary>
            [EnumMember(Value = "Watt")]
            WattEnum = 17
        }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [Required]
        [DataMember(Name="target", EmitDefaultValue=false)]
        public TargetEnum Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputConvertPower {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InputConvertPower)obj);
        }

        /// <summary>
        /// Returns true if InputConvertPower instances are equal
        /// </summary>
        /// <param name="other">Instance of InputConvertPower to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputConvertPower other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Input == other.Input ||
                    
                    Input.Equals(other.Input)
                ) && 
                (
                    Source == other.Source ||
                    
                    Source.Equals(other.Source)
                ) && 
                (
                    Target == other.Target ||
                    
                    Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Input.GetHashCode();
                    
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    
                    hashCode = hashCode * 59 + Target.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InputConvertPower left, InputConvertPower right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InputConvertPower left, InputConvertPower right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
