/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputCaseConversion
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputCaseConversion {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  /**
   * Case of conversion result
   */
  @JsonAdapter(AlphacaseEnum.Adapter.class)
  public enum AlphacaseEnum {
    UPPER("Upper"),
    
    LOWER("Lower"),
    
    TITLE("Title");

    private String value;

    AlphacaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlphacaseEnum fromValue(String value) {
      for (AlphacaseEnum b : AlphacaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlphacaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlphacaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlphacaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlphacaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ALPHACASE = "alphacase";
  @SerializedName(SERIALIZED_NAME_ALPHACASE)
  private AlphacaseEnum alphacase;


  public InputCaseConversion input(String input) {
    
    this.input = input;
    return this;
  }

   /**
   * String containing the text to convert
   * @return input
  **/
  @ApiModelProperty(required = true, value = "String containing the text to convert")

  public String getInput() {
    return input;
  }


  public void setInput(String input) {
    this.input = input;
  }


  public InputCaseConversion alphacase(AlphacaseEnum alphacase) {
    
    this.alphacase = alphacase;
    return this;
  }

   /**
   * Case of conversion result
   * @return alphacase
  **/
  @ApiModelProperty(required = true, value = "Case of conversion result")

  public AlphacaseEnum getAlphacase() {
    return alphacase;
  }


  public void setAlphacase(AlphacaseEnum alphacase) {
    this.alphacase = alphacase;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputCaseConversion inputCaseConversion = (InputCaseConversion) o;
    return Objects.equals(this.input, inputCaseConversion.input) &&
        Objects.equals(this.alphacase, inputCaseConversion.alphacase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, alphacase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputCaseConversion {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    alphacase: ").append(toIndentedString(alphacase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

