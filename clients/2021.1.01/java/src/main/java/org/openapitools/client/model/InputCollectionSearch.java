/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InputCollectionSearch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputCollectionSearch {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private List<String> input = new ArrayList<String>();

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private String match;

  /**
   * Trim white space from comparison string
   */
  @JsonAdapter(TrimEnum.Adapter.class)
  public enum TrimEnum {
    TRUE("True"),
    
    FALSE("False");

    private String value;

    TrimEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrimEnum fromValue(String value) {
      for (TrimEnum b : TrimEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrimEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrimEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrimEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrimEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRIM = "trim";
  @SerializedName(SERIALIZED_NAME_TRIM)
  private TrimEnum trim;

  /**
   * Ignore case when performing comparison
   */
  @JsonAdapter(IgnorecaseEnum.Adapter.class)
  public enum IgnorecaseEnum {
    TRUE("True"),
    
    FALSE("False");

    private String value;

    IgnorecaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IgnorecaseEnum fromValue(String value) {
      for (IgnorecaseEnum b : IgnorecaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IgnorecaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IgnorecaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IgnorecaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IgnorecaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IGNORECASE = "ignorecase";
  @SerializedName(SERIALIZED_NAME_IGNORECASE)
  private IgnorecaseEnum ignorecase;


  public InputCollectionSearch input(List<String> input) {
    
    this.input = input;
    return this;
  }

  public InputCollectionSearch addInputItem(String inputItem) {
    this.input.add(inputItem);
    return this;
  }

   /**
   * Collection of strings to search
   * @return input
  **/
  @ApiModelProperty(required = true, value = "Collection of strings to search")

  public List<String> getInput() {
    return input;
  }


  public void setInput(List<String> input) {
    this.input = input;
  }


  public InputCollectionSearch match(String match) {
    
    this.match = match;
    return this;
  }

   /**
   * Text to match
   * @return match
  **/
  @ApiModelProperty(required = true, value = "Text to match")

  public String getMatch() {
    return match;
  }


  public void setMatch(String match) {
    this.match = match;
  }


  public InputCollectionSearch trim(TrimEnum trim) {
    
    this.trim = trim;
    return this;
  }

   /**
   * Trim white space from comparison string
   * @return trim
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Trim white space from comparison string")

  public TrimEnum getTrim() {
    return trim;
  }


  public void setTrim(TrimEnum trim) {
    this.trim = trim;
  }


  public InputCollectionSearch ignorecase(IgnorecaseEnum ignorecase) {
    
    this.ignorecase = ignorecase;
    return this;
  }

   /**
   * Ignore case when performing comparison
   * @return ignorecase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ignore case when performing comparison")

  public IgnorecaseEnum getIgnorecase() {
    return ignorecase;
  }


  public void setIgnorecase(IgnorecaseEnum ignorecase) {
    this.ignorecase = ignorecase;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputCollectionSearch inputCollectionSearch = (InputCollectionSearch) o;
    return Objects.equals(this.input, inputCollectionSearch.input) &&
        Objects.equals(this.match, inputCollectionSearch.match) &&
        Objects.equals(this.trim, inputCollectionSearch.trim) &&
        Objects.equals(this.ignorecase, inputCollectionSearch.ignorecase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, match, trim, ignorecase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputCollectionSearch {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    ignorecase: ").append(toIndentedString(ignorecase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

