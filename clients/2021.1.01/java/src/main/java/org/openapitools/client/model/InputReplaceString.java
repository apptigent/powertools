/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputReplaceString
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputReplaceString {
  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_REPLACEMENT = "replacement";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT)
  private String replacement;


  public InputReplaceString source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * String containing the text to be replaced
   * @return source
  **/
  @ApiModelProperty(required = true, value = "String containing the text to be replaced")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public InputReplaceString value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Text to replace
   * @return value
  **/
  @ApiModelProperty(required = true, value = "Text to replace")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public InputReplaceString replacement(String replacement) {
    
    this.replacement = replacement;
    return this;
  }

   /**
   * Replacement text
   * @return replacement
  **/
  @ApiModelProperty(required = true, value = "Replacement text")

  public String getReplacement() {
    return replacement;
  }


  public void setReplacement(String replacement) {
    this.replacement = replacement;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputReplaceString inputReplaceString = (InputReplaceString) o;
    return Objects.equals(this.source, inputReplaceString.source) &&
        Objects.equals(this.value, inputReplaceString.value) &&
        Objects.equals(this.replacement, inputReplaceString.replacement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(source, value, replacement);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputReplaceString {\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    replacement: ").append(toIndentedString(replacement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

