/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InputCollectionSplit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputCollectionSplit {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private List<String> input = new ArrayList<String>();

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  private String match;

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private String index;


  public InputCollectionSplit input(List<String> input) {
    
    this.input = input;
    return this;
  }

  public InputCollectionSplit addInputItem(String inputItem) {
    this.input.add(inputItem);
    return this;
  }

   /**
   * Collection of items to split
   * @return input
  **/
  @ApiModelProperty(required = true, value = "Collection of items to split")

  public List<String> getInput() {
    return input;
  }


  public void setInput(List<String> input) {
    this.input = input;
  }


  public InputCollectionSplit match(String match) {
    
    this.match = match;
    return this;
  }

   /**
   * String to match (explicit, case-insensitive, leave empty to use Index)
   * @return match
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String to match (explicit, case-insensitive, leave empty to use Index)")

  public String getMatch() {
    return match;
  }


  public void setMatch(String match) {
    this.match = match;
  }


  public InputCollectionSplit index(String index) {
    
    this.index = index;
    return this;
  }

   /**
   * Index location to split (leave empty to use Match value)
   * @return index
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Index location to split (leave empty to use Match value)")

  public String getIndex() {
    return index;
  }


  public void setIndex(String index) {
    this.index = index;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputCollectionSplit inputCollectionSplit = (InputCollectionSplit) o;
    return Objects.equals(this.input, inputCollectionSplit.input) &&
        Objects.equals(this.match, inputCollectionSplit.match) &&
        Objects.equals(this.index, inputCollectionSplit.index);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, match, index);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputCollectionSplit {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

