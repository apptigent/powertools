/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputStringContains
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputStringContains {
  public static final String SERIALIZED_NAME_FIND = "find";
  @SerializedName(SERIALIZED_NAME_FIND)
  private String find;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  /**
   * Convert strings to lowercase
   */
  @JsonAdapter(LowerEnum.Adapter.class)
  public enum LowerEnum {
    TRUE("True"),
    
    FALSE("False");

    private String value;

    LowerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LowerEnum fromValue(String value) {
      for (LowerEnum b : LowerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LowerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LowerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LowerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LowerEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOWER = "lower";
  @SerializedName(SERIALIZED_NAME_LOWER)
  private LowerEnum lower;


  public InputStringContains find(String find) {
    
    this.find = find;
    return this;
  }

   /**
   * Text to match
   * @return find
  **/
  @ApiModelProperty(required = true, value = "Text to match")

  public String getFind() {
    return find;
  }


  public void setFind(String find) {
    this.find = find;
  }


  public InputStringContains input(String input) {
    
    this.input = input;
    return this;
  }

   /**
   * Text to search
   * @return input
  **/
  @ApiModelProperty(required = true, value = "Text to search")

  public String getInput() {
    return input;
  }


  public void setInput(String input) {
    this.input = input;
  }


  public InputStringContains lower(LowerEnum lower) {
    
    this.lower = lower;
    return this;
  }

   /**
   * Convert strings to lowercase
   * @return lower
  **/
  @ApiModelProperty(required = true, value = "Convert strings to lowercase")

  public LowerEnum getLower() {
    return lower;
  }


  public void setLower(LowerEnum lower) {
    this.lower = lower;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputStringContains inputStringContains = (InputStringContains) o;
    return Objects.equals(this.find, inputStringContains.find) &&
        Objects.equals(this.input, inputStringContains.input) &&
        Objects.equals(this.lower, inputStringContains.lower);
  }

  @Override
  public int hashCode() {
    return Objects.hash(find, input, lower);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputStringContains {\n");
    sb.append("    find: ").append(toIndentedString(find)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    lower: ").append(toIndentedString(lower)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

