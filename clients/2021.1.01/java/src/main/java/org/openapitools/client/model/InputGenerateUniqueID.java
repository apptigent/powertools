/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputGenerateUniqueID
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputGenerateUniqueID {
  /**
   * All uppercase alpha characters
   */
  @JsonAdapter(UppercaseEnum.Adapter.class)
  public enum UppercaseEnum {
    TRUE("True"),
    
    FALSE("False");

    private String value;

    UppercaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UppercaseEnum fromValue(String value) {
      for (UppercaseEnum b : UppercaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UppercaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UppercaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UppercaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UppercaseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UPPERCASE = "uppercase";
  @SerializedName(SERIALIZED_NAME_UPPERCASE)
  private UppercaseEnum uppercase;


  public InputGenerateUniqueID uppercase(UppercaseEnum uppercase) {
    
    this.uppercase = uppercase;
    return this;
  }

   /**
   * All uppercase alpha characters
   * @return uppercase
  **/
  @ApiModelProperty(required = true, value = "All uppercase alpha characters")

  public UppercaseEnum getUppercase() {
    return uppercase;
  }


  public void setUppercase(UppercaseEnum uppercase) {
    this.uppercase = uppercase;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputGenerateUniqueID inputGenerateUniqueID = (InputGenerateUniqueID) o;
    return Objects.equals(this.uppercase, inputGenerateUniqueID.uppercase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uppercase);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputGenerateUniqueID {\n");
    sb.append("    uppercase: ").append(toIndentedString(uppercase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

