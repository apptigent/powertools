/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InputCollectionConversion;
import org.openapitools.client.model.InputCollectionConversionXML;
import org.openapitools.client.model.InputCollectionCount;
import org.openapitools.client.model.InputCollectionFilter;
import org.openapitools.client.model.InputCollectionModify;
import org.openapitools.client.model.InputCollectionReplace;
import org.openapitools.client.model.InputCollectionSearch;
import org.openapitools.client.model.InputCollectionSearchNumeric;
import org.openapitools.client.model.InputCollectionSort;
import org.openapitools.client.model.InputCollectionSplit;
import org.openapitools.client.model.OutputCollectionNumber;
import org.openapitools.client.model.OutputCollectionResult;
import org.openapitools.client.model.OutputCollectionString;
import org.openapitools.client.model.OutputMultiCollection;
import org.openapitools.client.model.OutputNumber;
import org.openapitools.client.model.OutputString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollectionsApi {
    private ApiClient localVarApiClient;

    public CollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addToCollection
     * @param collectionModify Collection modification parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addToCollectionCall(InputCollectionModify collectionModify, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionModify;

        // create path and map variables
        String localVarPath = "/AddToCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCollectionValidateBeforeCall(InputCollectionModify collectionModify, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addToCollectionCall(collectionModify, _callback);
        return localVarCall;

    }

    /**
     * Collections - Add to collection
     * Add an item to a collection
     * @param collectionModify Collection modification parameters (optional)
     * @return OutputCollectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionResult addToCollection(InputCollectionModify collectionModify) throws ApiException {
        ApiResponse<OutputCollectionResult> localVarResp = addToCollectionWithHttpInfo(collectionModify);
        return localVarResp.getData();
    }

    /**
     * Collections - Add to collection
     * Add an item to a collection
     * @param collectionModify Collection modification parameters (optional)
     * @return ApiResponse&lt;OutputCollectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionResult> addToCollectionWithHttpInfo(InputCollectionModify collectionModify) throws ApiException {
        okhttp3.Call localVarCall = addToCollectionValidateBeforeCall(collectionModify, null);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Add to collection (asynchronously)
     * Add an item to a collection
     * @param collectionModify Collection modification parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addToCollectionAsync(InputCollectionModify collectionModify, final ApiCallback<OutputCollectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCollectionValidateBeforeCall(collectionModify, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionContainsNumber
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionContainsNumberCall(InputCollectionSearchNumeric collectionSearch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionSearch;

        // create path and map variables
        String localVarPath = "/CollectionContainsNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionContainsNumberValidateBeforeCall(InputCollectionSearchNumeric collectionSearch, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = collectionContainsNumberCall(collectionSearch, _callback);
        return localVarCall;

    }

    /**
     * Collections - Contains number
     * Determine if a collection contains a specific number
     * @param collectionSearch Collection search parameters (optional)
     * @return OutputCollectionNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionNumber collectionContainsNumber(InputCollectionSearchNumeric collectionSearch) throws ApiException {
        ApiResponse<OutputCollectionNumber> localVarResp = collectionContainsNumberWithHttpInfo(collectionSearch);
        return localVarResp.getData();
    }

    /**
     * Collections - Contains number
     * Determine if a collection contains a specific number
     * @param collectionSearch Collection search parameters (optional)
     * @return ApiResponse&lt;OutputCollectionNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionNumber> collectionContainsNumberWithHttpInfo(InputCollectionSearchNumeric collectionSearch) throws ApiException {
        okhttp3.Call localVarCall = collectionContainsNumberValidateBeforeCall(collectionSearch, null);
        Type localVarReturnType = new TypeToken<OutputCollectionNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Contains number (asynchronously)
     * Determine if a collection contains a specific number
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionContainsNumberAsync(InputCollectionSearchNumeric collectionSearch, final ApiCallback<OutputCollectionNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionContainsNumberValidateBeforeCall(collectionSearch, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionContainsString
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionContainsStringCall(InputCollectionSearch collectionSearch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionSearch;

        // create path and map variables
        String localVarPath = "/CollectionContainsString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionContainsStringValidateBeforeCall(InputCollectionSearch collectionSearch, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = collectionContainsStringCall(collectionSearch, _callback);
        return localVarCall;

    }

    /**
     * Collections - Contains string
     * Determine if any items in a collection contain a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @return OutputCollectionString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionString collectionContainsString(InputCollectionSearch collectionSearch) throws ApiException {
        ApiResponse<OutputCollectionString> localVarResp = collectionContainsStringWithHttpInfo(collectionSearch);
        return localVarResp.getData();
    }

    /**
     * Collections - Contains string
     * Determine if any items in a collection contain a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @return ApiResponse&lt;OutputCollectionString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionString> collectionContainsStringWithHttpInfo(InputCollectionSearch collectionSearch) throws ApiException {
        okhttp3.Call localVarCall = collectionContainsStringValidateBeforeCall(collectionSearch, null);
        Type localVarReturnType = new TypeToken<OutputCollectionString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Contains string (asynchronously)
     * Determine if any items in a collection contain a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionContainsStringAsync(InputCollectionSearch collectionSearch, final ApiCallback<OutputCollectionString> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionContainsStringValidateBeforeCall(collectionSearch, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionEndsWithString
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionEndsWithStringCall(InputCollectionSearch collectionSearch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionSearch;

        // create path and map variables
        String localVarPath = "/CollectionEndsWithString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionEndsWithStringValidateBeforeCall(InputCollectionSearch collectionSearch, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = collectionEndsWithStringCall(collectionSearch, _callback);
        return localVarCall;

    }

    /**
     * Collections - Ends with string
     * Determine if any items in a collection end with a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @return OutputCollectionString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionString collectionEndsWithString(InputCollectionSearch collectionSearch) throws ApiException {
        ApiResponse<OutputCollectionString> localVarResp = collectionEndsWithStringWithHttpInfo(collectionSearch);
        return localVarResp.getData();
    }

    /**
     * Collections - Ends with string
     * Determine if any items in a collection end with a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @return ApiResponse&lt;OutputCollectionString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionString> collectionEndsWithStringWithHttpInfo(InputCollectionSearch collectionSearch) throws ApiException {
        okhttp3.Call localVarCall = collectionEndsWithStringValidateBeforeCall(collectionSearch, null);
        Type localVarReturnType = new TypeToken<OutputCollectionString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Ends with string (asynchronously)
     * Determine if any items in a collection end with a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionEndsWithStringAsync(InputCollectionSearch collectionSearch, final ApiCallback<OutputCollectionString> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionEndsWithStringValidateBeforeCall(collectionSearch, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionStartsWithString
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionStartsWithStringCall(InputCollectionSearch collectionSearch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionSearch;

        // create path and map variables
        String localVarPath = "/CollectionStartsWithString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionStartsWithStringValidateBeforeCall(InputCollectionSearch collectionSearch, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = collectionStartsWithStringCall(collectionSearch, _callback);
        return localVarCall;

    }

    /**
     * Collections - Starts with string
     * Determine if any items in a collection start with a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @return OutputCollectionString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionString collectionStartsWithString(InputCollectionSearch collectionSearch) throws ApiException {
        ApiResponse<OutputCollectionString> localVarResp = collectionStartsWithStringWithHttpInfo(collectionSearch);
        return localVarResp.getData();
    }

    /**
     * Collections - Starts with string
     * Determine if any items in a collection start with a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @return ApiResponse&lt;OutputCollectionString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionString> collectionStartsWithStringWithHttpInfo(InputCollectionSearch collectionSearch) throws ApiException {
        okhttp3.Call localVarCall = collectionStartsWithStringValidateBeforeCall(collectionSearch, null);
        Type localVarReturnType = new TypeToken<OutputCollectionString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Starts with string (asynchronously)
     * Determine if any items in a collection start with a specific string
     * @param collectionSearch Collection search parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionStartsWithStringAsync(InputCollectionSearch collectionSearch, final ApiCallback<OutputCollectionString> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionStartsWithStringValidateBeforeCall(collectionSearch, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionToJSON
     * @param collectionConversion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionToJSONCall(InputCollectionConversion collectionConversion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionConversion;

        // create path and map variables
        String localVarPath = "/CollectionToJSON";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionToJSONValidateBeforeCall(InputCollectionConversion collectionConversion, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = collectionToJSONCall(collectionConversion, _callback);
        return localVarCall;

    }

    /**
     * Collections - Collection to JSON
     * Convert a collection to a named JSON object
     * @param collectionConversion  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString collectionToJSON(InputCollectionConversion collectionConversion) throws ApiException {
        ApiResponse<OutputString> localVarResp = collectionToJSONWithHttpInfo(collectionConversion);
        return localVarResp.getData();
    }

    /**
     * Collections - Collection to JSON
     * Convert a collection to a named JSON object
     * @param collectionConversion  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> collectionToJSONWithHttpInfo(InputCollectionConversion collectionConversion) throws ApiException {
        okhttp3.Call localVarCall = collectionToJSONValidateBeforeCall(collectionConversion, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Collection to JSON (asynchronously)
     * Convert a collection to a named JSON object
     * @param collectionConversion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionToJSONAsync(InputCollectionConversion collectionConversion, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionToJSONValidateBeforeCall(collectionConversion, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for collectionToXml
     * @param collectionConversionXML  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionToXmlCall(InputCollectionConversionXML collectionConversionXML, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionConversionXML;

        // create path and map variables
        String localVarPath = "/CollectionToXML";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call collectionToXmlValidateBeforeCall(InputCollectionConversionXML collectionConversionXML, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = collectionToXmlCall(collectionConversionXML, _callback);
        return localVarCall;

    }

    /**
     * Collections - Collection to XML
     * Convert a collection to an XML string
     * @param collectionConversionXML  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString collectionToXml(InputCollectionConversionXML collectionConversionXML) throws ApiException {
        ApiResponse<OutputString> localVarResp = collectionToXmlWithHttpInfo(collectionConversionXML);
        return localVarResp.getData();
    }

    /**
     * Collections - Collection to XML
     * Convert a collection to an XML string
     * @param collectionConversionXML  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> collectionToXmlWithHttpInfo(InputCollectionConversionXML collectionConversionXML) throws ApiException {
        okhttp3.Call localVarCall = collectionToXmlValidateBeforeCall(collectionConversionXML, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Collection to XML (asynchronously)
     * Convert a collection to an XML string
     * @param collectionConversionXML  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call collectionToXmlAsync(InputCollectionConversionXML collectionConversionXML, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = collectionToXmlValidateBeforeCall(collectionConversionXML, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countCollection
     * @param collectionCount Count collection parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countCollectionCall(InputCollectionCount collectionCount, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionCount;

        // create path and map variables
        String localVarPath = "/CountCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countCollectionValidateBeforeCall(InputCollectionCount collectionCount, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = countCollectionCall(collectionCount, _callback);
        return localVarCall;

    }

    /**
     * Collections - Count collection
     * Count a collection of items
     * @param collectionCount Count collection parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber countCollection(InputCollectionCount collectionCount) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = countCollectionWithHttpInfo(collectionCount);
        return localVarResp.getData();
    }

    /**
     * Collections - Count collection
     * Count a collection of items
     * @param collectionCount Count collection parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> countCollectionWithHttpInfo(InputCollectionCount collectionCount) throws ApiException {
        okhttp3.Call localVarCall = countCollectionValidateBeforeCall(collectionCount, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Count collection (asynchronously)
     * Count a collection of items
     * @param collectionCount Count collection parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countCollectionAsync(InputCollectionCount collectionCount, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = countCollectionValidateBeforeCall(collectionCount, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filterCollection
     * @param collectionFilter Filter collection parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterCollectionCall(InputCollectionFilter collectionFilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionFilter;

        // create path and map variables
        String localVarPath = "/FilterCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filterCollectionValidateBeforeCall(InputCollectionFilter collectionFilter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = filterCollectionCall(collectionFilter, _callback);
        return localVarCall;

    }

    /**
     * Collections - Filter collection
     * Filter a collection of strings by keyword
     * @param collectionFilter Filter collection parameters (optional)
     * @return OutputCollectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionResult filterCollection(InputCollectionFilter collectionFilter) throws ApiException {
        ApiResponse<OutputCollectionResult> localVarResp = filterCollectionWithHttpInfo(collectionFilter);
        return localVarResp.getData();
    }

    /**
     * Collections - Filter collection
     * Filter a collection of strings by keyword
     * @param collectionFilter Filter collection parameters (optional)
     * @return ApiResponse&lt;OutputCollectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionResult> filterCollectionWithHttpInfo(InputCollectionFilter collectionFilter) throws ApiException {
        okhttp3.Call localVarCall = filterCollectionValidateBeforeCall(collectionFilter, null);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Filter collection (asynchronously)
     * Filter a collection of strings by keyword
     * @param collectionFilter Filter collection parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filterCollectionAsync(InputCollectionFilter collectionFilter, final ApiCallback<OutputCollectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = filterCollectionValidateBeforeCall(collectionFilter, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFromCollection
     * @param collectionModify Collection modification parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFromCollectionCall(InputCollectionModify collectionModify, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionModify;

        // create path and map variables
        String localVarPath = "/RemoveFromCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromCollectionValidateBeforeCall(InputCollectionModify collectionModify, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = removeFromCollectionCall(collectionModify, _callback);
        return localVarCall;

    }

    /**
     * Collections - Remove from collection
     * Remove an item from a collection
     * @param collectionModify Collection modification parameters (optional)
     * @return OutputCollectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionResult removeFromCollection(InputCollectionModify collectionModify) throws ApiException {
        ApiResponse<OutputCollectionResult> localVarResp = removeFromCollectionWithHttpInfo(collectionModify);
        return localVarResp.getData();
    }

    /**
     * Collections - Remove from collection
     * Remove an item from a collection
     * @param collectionModify Collection modification parameters (optional)
     * @return ApiResponse&lt;OutputCollectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionResult> removeFromCollectionWithHttpInfo(InputCollectionModify collectionModify) throws ApiException {
        okhttp3.Call localVarCall = removeFromCollectionValidateBeforeCall(collectionModify, null);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Remove from collection (asynchronously)
     * Remove an item from a collection
     * @param collectionModify Collection modification parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFromCollectionAsync(InputCollectionModify collectionModify, final ApiCallback<OutputCollectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromCollectionValidateBeforeCall(collectionModify, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceValuesInCollection
     * @param collectionReplace Replace values in collection parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceValuesInCollectionCall(InputCollectionReplace collectionReplace, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionReplace;

        // create path and map variables
        String localVarPath = "/ReplaceValuesInCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceValuesInCollectionValidateBeforeCall(InputCollectionReplace collectionReplace, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = replaceValuesInCollectionCall(collectionReplace, _callback);
        return localVarCall;

    }

    /**
     * Collections - Replace values in collection
     * Replace whole or partial strings in a collection
     * @param collectionReplace Replace values in collection parameters (optional)
     * @return OutputCollectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionResult replaceValuesInCollection(InputCollectionReplace collectionReplace) throws ApiException {
        ApiResponse<OutputCollectionResult> localVarResp = replaceValuesInCollectionWithHttpInfo(collectionReplace);
        return localVarResp.getData();
    }

    /**
     * Collections - Replace values in collection
     * Replace whole or partial strings in a collection
     * @param collectionReplace Replace values in collection parameters (optional)
     * @return ApiResponse&lt;OutputCollectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionResult> replaceValuesInCollectionWithHttpInfo(InputCollectionReplace collectionReplace) throws ApiException {
        okhttp3.Call localVarCall = replaceValuesInCollectionValidateBeforeCall(collectionReplace, null);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Replace values in collection (asynchronously)
     * Replace whole or partial strings in a collection
     * @param collectionReplace Replace values in collection parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceValuesInCollectionAsync(InputCollectionReplace collectionReplace, final ApiCallback<OutputCollectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceValuesInCollectionValidateBeforeCall(collectionReplace, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sortCollection
     * @param collectionSort Sort collection parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sortCollectionCall(InputCollectionSort collectionSort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionSort;

        // create path and map variables
        String localVarPath = "/SortCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sortCollectionValidateBeforeCall(InputCollectionSort collectionSort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sortCollectionCall(collectionSort, _callback);
        return localVarCall;

    }

    /**
     * Collections - Sort collection
     * Sort a collection of strings
     * @param collectionSort Sort collection parameters (optional)
     * @return OutputCollectionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputCollectionResult sortCollection(InputCollectionSort collectionSort) throws ApiException {
        ApiResponse<OutputCollectionResult> localVarResp = sortCollectionWithHttpInfo(collectionSort);
        return localVarResp.getData();
    }

    /**
     * Collections - Sort collection
     * Sort a collection of strings
     * @param collectionSort Sort collection parameters (optional)
     * @return ApiResponse&lt;OutputCollectionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputCollectionResult> sortCollectionWithHttpInfo(InputCollectionSort collectionSort) throws ApiException {
        okhttp3.Call localVarCall = sortCollectionValidateBeforeCall(collectionSort, null);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Sort collection (asynchronously)
     * Sort a collection of strings
     * @param collectionSort Sort collection parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sortCollectionAsync(InputCollectionSort collectionSort, final ApiCallback<OutputCollectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sortCollectionValidateBeforeCall(collectionSort, _callback);
        Type localVarReturnType = new TypeToken<OutputCollectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitCollection
     * @param collectionSplit Split collection parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitCollectionCall(InputCollectionSplit collectionSplit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = collectionSplit;

        // create path and map variables
        String localVarPath = "/SplitCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitCollectionValidateBeforeCall(InputCollectionSplit collectionSplit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = splitCollectionCall(collectionSplit, _callback);
        return localVarCall;

    }

    /**
     * Collections - Split collection
     * Split a collection of items by matching value or index
     * @param collectionSplit Split collection parameters (optional)
     * @return OutputMultiCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputMultiCollection splitCollection(InputCollectionSplit collectionSplit) throws ApiException {
        ApiResponse<OutputMultiCollection> localVarResp = splitCollectionWithHttpInfo(collectionSplit);
        return localVarResp.getData();
    }

    /**
     * Collections - Split collection
     * Split a collection of items by matching value or index
     * @param collectionSplit Split collection parameters (optional)
     * @return ApiResponse&lt;OutputMultiCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputMultiCollection> splitCollectionWithHttpInfo(InputCollectionSplit collectionSplit) throws ApiException {
        okhttp3.Call localVarCall = splitCollectionValidateBeforeCall(collectionSplit, null);
        Type localVarReturnType = new TypeToken<OutputMultiCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections - Split collection (asynchronously)
     * Split a collection of items by matching value or index
     * @param collectionSplit Split collection parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitCollectionAsync(InputCollectionSplit collectionSplit, final ApiCallback<OutputMultiCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitCollectionValidateBeforeCall(collectionSplit, _callback);
        Type localVarReturnType = new TypeToken<OutputMultiCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
