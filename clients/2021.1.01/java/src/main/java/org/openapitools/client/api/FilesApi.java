/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import java.io.File;
import org.openapitools.client.model.InputQRCode;
import org.openapitools.client.model.OutputString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for convertImage
     * @param format Output file format (required)
     * @param file Source image file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertImageCall(String format, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ConvertImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarFormParams.put("format", format);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "image/png", "image/gif", "image/jpeg", "image/bmp"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertImageValidateBeforeCall(String format, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling convertImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling convertImage(Async)");
        }
        

        okhttp3.Call localVarCall = convertImageCall(format, file, _callback);
        return localVarCall;

    }

    /**
     * Files - Convert Image
     * Convert an image from one format to another
     * @param format Output file format (required)
     * @param file Source image file (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File convertImage(String format, File file) throws ApiException {
        ApiResponse<File> localVarResp = convertImageWithHttpInfo(format, file);
        return localVarResp.getData();
    }

    /**
     * Files - Convert Image
     * Convert an image from one format to another
     * @param format Output file format (required)
     * @param file Source image file (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> convertImageWithHttpInfo(String format, File file) throws ApiException {
        okhttp3.Call localVarCall = convertImageValidateBeforeCall(format, file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Convert Image (asynchronously)
     * Convert an image from one format to another
     * @param format Output file format (required)
     * @param file Source image file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertImageAsync(String format, File file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertImageValidateBeforeCall(format, file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cropImage
     * @param position Crop start position (use negative values to reverse crop area) (required)
     * @param width Width (X-axis right, negative to reverse) (required)
     * @param height Height (Y-axis down, negative to reverse) (required)
     * @param file Source image file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cropImageCall(String position, BigDecimal width, BigDecimal height, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CropImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (position != null) {
            localVarFormParams.put("position", position);
        }

        if (width != null) {
            localVarFormParams.put("Width", width);
        }

        if (height != null) {
            localVarFormParams.put("Height", height);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "image/png", "image/gif", "image/jpeg", "image/bmp"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cropImageValidateBeforeCall(String position, BigDecimal width, BigDecimal height, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling cropImage(Async)");
        }
        
        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling cropImage(Async)");
        }
        
        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling cropImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling cropImage(Async)");
        }
        

        okhttp3.Call localVarCall = cropImageCall(position, width, height, file, _callback);
        return localVarCall;

    }

    /**
     * Files - Crop Image
     * Crop an image
     * @param position Crop start position (use negative values to reverse crop area) (required)
     * @param width Width (X-axis right, negative to reverse) (required)
     * @param height Height (Y-axis down, negative to reverse) (required)
     * @param file Source image file (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File cropImage(String position, BigDecimal width, BigDecimal height, File file) throws ApiException {
        ApiResponse<File> localVarResp = cropImageWithHttpInfo(position, width, height, file);
        return localVarResp.getData();
    }

    /**
     * Files - Crop Image
     * Crop an image
     * @param position Crop start position (use negative values to reverse crop area) (required)
     * @param width Width (X-axis right, negative to reverse) (required)
     * @param height Height (Y-axis down, negative to reverse) (required)
     * @param file Source image file (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> cropImageWithHttpInfo(String position, BigDecimal width, BigDecimal height, File file) throws ApiException {
        okhttp3.Call localVarCall = cropImageValidateBeforeCall(position, width, height, file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Crop Image (asynchronously)
     * Crop an image
     * @param position Crop start position (use negative values to reverse crop area) (required)
     * @param width Width (X-axis right, negative to reverse) (required)
     * @param height Height (Y-axis down, negative to reverse) (required)
     * @param file Source image file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cropImageAsync(String position, BigDecimal width, BigDecimal height, File file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = cropImageValidateBeforeCall(position, width, height, file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileToString
     * @param file Source file (10MB limit) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileToStringCall(File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/FileToString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileToStringValidateBeforeCall(File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling fileToString(Async)");
        }
        

        okhttp3.Call localVarCall = fileToStringCall(file, _callback);
        return localVarCall;

    }

    /**
     * Files - File to string
     * Convert a file to a Base64 string
     * @param file Source file (10MB limit) (required)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString fileToString(File file) throws ApiException {
        ApiResponse<OutputString> localVarResp = fileToStringWithHttpInfo(file);
        return localVarResp.getData();
    }

    /**
     * Files - File to string
     * Convert a file to a Base64 string
     * @param file Source file (10MB limit) (required)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> fileToStringWithHttpInfo(File file) throws ApiException {
        okhttp3.Call localVarCall = fileToStringValidateBeforeCall(file, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - File to string (asynchronously)
     * Convert a file to a Base64 string
     * @param file Source file (10MB limit) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileToStringAsync(File file, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileToStringValidateBeforeCall(file, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flipImage
     * @param orientation Horizontal or Vertical (required)
     * @param file Source image file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flipImageCall(String orientation, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/FlipImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orientation != null) {
            localVarFormParams.put("orientation", orientation);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flipImageValidateBeforeCall(String orientation, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orientation' is set
        if (orientation == null) {
            throw new ApiException("Missing the required parameter 'orientation' when calling flipImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling flipImage(Async)");
        }
        

        okhttp3.Call localVarCall = flipImageCall(orientation, file, _callback);
        return localVarCall;

    }

    /**
     * Files - Flip Image
     * Flip an image (horizontal or vertical)
     * @param orientation Horizontal or Vertical (required)
     * @param file Source image file (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File flipImage(String orientation, File file) throws ApiException {
        ApiResponse<File> localVarResp = flipImageWithHttpInfo(orientation, file);
        return localVarResp.getData();
    }

    /**
     * Files - Flip Image
     * Flip an image (horizontal or vertical)
     * @param orientation Horizontal or Vertical (required)
     * @param file Source image file (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> flipImageWithHttpInfo(String orientation, File file) throws ApiException {
        okhttp3.Call localVarCall = flipImageValidateBeforeCall(orientation, file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Flip Image (asynchronously)
     * Flip an image (horizontal or vertical)
     * @param orientation Horizontal or Vertical (required)
     * @param file Source image file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flipImageAsync(String orientation, File file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = flipImageValidateBeforeCall(orientation, file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateQRCode
     * @param inputQRCode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateQRCodeCall(InputQRCode inputQRCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inputQRCode;

        // create path and map variables
        String localVarPath = "/GenerateQRCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateQRCodeValidateBeforeCall(InputQRCode inputQRCode, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateQRCodeCall(inputQRCode, _callback);
        return localVarCall;

    }

    /**
     * Files - Generate QR code
     * Generate a QR code image
     * @param inputQRCode  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File generateQRCode(InputQRCode inputQRCode) throws ApiException {
        ApiResponse<File> localVarResp = generateQRCodeWithHttpInfo(inputQRCode);
        return localVarResp.getData();
    }

    /**
     * Files - Generate QR code
     * Generate a QR code image
     * @param inputQRCode  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> generateQRCodeWithHttpInfo(InputQRCode inputQRCode) throws ApiException {
        okhttp3.Call localVarCall = generateQRCodeValidateBeforeCall(inputQRCode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Generate QR code (asynchronously)
     * Generate a QR code image
     * @param inputQRCode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateQRCodeAsync(InputQRCode inputQRCode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateQRCodeValidateBeforeCall(inputQRCode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resizeImage
     * @param algorithm Optimize output quality of the target image (required)
     * @param units Image adjustment units (required)
     * @param file Source image file (required)
     * @param height Image height (pixels or percent) (optional)
     * @param width Image width (pixels or percent) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resizeImageCall(String algorithm, String units, File file, BigDecimal height, BigDecimal width, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ResizeImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algorithm != null) {
            localVarFormParams.put("algorithm", algorithm);
        }

        if (units != null) {
            localVarFormParams.put("units", units);
        }

        if (height != null) {
            localVarFormParams.put("height", height);
        }

        if (width != null) {
            localVarFormParams.put("width", width);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "image/png", "image/gif", "image/jpeg", "image/bmp"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resizeImageValidateBeforeCall(String algorithm, String units, File file, BigDecimal height, BigDecimal width, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'algorithm' is set
        if (algorithm == null) {
            throw new ApiException("Missing the required parameter 'algorithm' when calling resizeImage(Async)");
        }
        
        // verify the required parameter 'units' is set
        if (units == null) {
            throw new ApiException("Missing the required parameter 'units' when calling resizeImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling resizeImage(Async)");
        }
        

        okhttp3.Call localVarCall = resizeImageCall(algorithm, units, file, height, width, _callback);
        return localVarCall;

    }

    /**
     * Files - Resize Image
     * Resize an image
     * @param algorithm Optimize output quality of the target image (required)
     * @param units Image adjustment units (required)
     * @param file Source image file (required)
     * @param height Image height (pixels or percent) (optional)
     * @param width Image width (pixels or percent) (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File resizeImage(String algorithm, String units, File file, BigDecimal height, BigDecimal width) throws ApiException {
        ApiResponse<File> localVarResp = resizeImageWithHttpInfo(algorithm, units, file, height, width);
        return localVarResp.getData();
    }

    /**
     * Files - Resize Image
     * Resize an image
     * @param algorithm Optimize output quality of the target image (required)
     * @param units Image adjustment units (required)
     * @param file Source image file (required)
     * @param height Image height (pixels or percent) (optional)
     * @param width Image width (pixels or percent) (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> resizeImageWithHttpInfo(String algorithm, String units, File file, BigDecimal height, BigDecimal width) throws ApiException {
        okhttp3.Call localVarCall = resizeImageValidateBeforeCall(algorithm, units, file, height, width, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Resize Image (asynchronously)
     * Resize an image
     * @param algorithm Optimize output quality of the target image (required)
     * @param units Image adjustment units (required)
     * @param file Source image file (required)
     * @param height Image height (pixels or percent) (optional)
     * @param width Image width (pixels or percent) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resizeImageAsync(String algorithm, String units, File file, BigDecimal height, BigDecimal width, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = resizeImageValidateBeforeCall(algorithm, units, file, height, width, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateImage
     * @param degrees Number of degrees (required)
     * @param file Source image file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateImageCall(String degrees, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/RotateImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (degrees != null) {
            localVarFormParams.put("degrees", degrees);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateImageValidateBeforeCall(String degrees, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'degrees' is set
        if (degrees == null) {
            throw new ApiException("Missing the required parameter 'degrees' when calling rotateImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling rotateImage(Async)");
        }
        

        okhttp3.Call localVarCall = rotateImageCall(degrees, file, _callback);
        return localVarCall;

    }

    /**
     * Files - Rotate Image
     * Rotate an image by specified number of degrees
     * @param degrees Number of degrees (required)
     * @param file Source image file (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File rotateImage(String degrees, File file) throws ApiException {
        ApiResponse<File> localVarResp = rotateImageWithHttpInfo(degrees, file);
        return localVarResp.getData();
    }

    /**
     * Files - Rotate Image
     * Rotate an image by specified number of degrees
     * @param degrees Number of degrees (required)
     * @param file Source image file (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> rotateImageWithHttpInfo(String degrees, File file) throws ApiException {
        okhttp3.Call localVarCall = rotateImageValidateBeforeCall(degrees, file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Rotate Image (asynchronously)
     * Rotate an image by specified number of degrees
     * @param degrees Number of degrees (required)
     * @param file Source image file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateImageAsync(String degrees, File file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateImageValidateBeforeCall(degrees, file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for watermarkImage
     * @param text Watermark text (required)
     * @param font Text font (required)
     * @param size Font size (points) (required)
     * @param color Text color hex value (required)
     * @param horizontal Horizontal alignment (required)
     * @param vertical Vertical alignment (required)
     * @param file Source image file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call watermarkImageCall(String text, String font, BigDecimal size, String color, String horizontal, String vertical, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/WatermarkImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (font != null) {
            localVarFormParams.put("font", font);
        }

        if (size != null) {
            localVarFormParams.put("size", size);
        }

        if (color != null) {
            localVarFormParams.put("color", color);
        }

        if (horizontal != null) {
            localVarFormParams.put("horizontal", horizontal);
        }

        if (vertical != null) {
            localVarFormParams.put("vertical", vertical);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call watermarkImageValidateBeforeCall(String text, String font, BigDecimal size, String color, String horizontal, String vertical, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling watermarkImage(Async)");
        }
        
        // verify the required parameter 'font' is set
        if (font == null) {
            throw new ApiException("Missing the required parameter 'font' when calling watermarkImage(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling watermarkImage(Async)");
        }
        
        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling watermarkImage(Async)");
        }
        
        // verify the required parameter 'horizontal' is set
        if (horizontal == null) {
            throw new ApiException("Missing the required parameter 'horizontal' when calling watermarkImage(Async)");
        }
        
        // verify the required parameter 'vertical' is set
        if (vertical == null) {
            throw new ApiException("Missing the required parameter 'vertical' when calling watermarkImage(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling watermarkImage(Async)");
        }
        

        okhttp3.Call localVarCall = watermarkImageCall(text, font, size, color, horizontal, vertical, file, _callback);
        return localVarCall;

    }

    /**
     * Files - Watermark Image
     * Add watermark text to an image
     * @param text Watermark text (required)
     * @param font Text font (required)
     * @param size Font size (points) (required)
     * @param color Text color hex value (required)
     * @param horizontal Horizontal alignment (required)
     * @param vertical Vertical alignment (required)
     * @param file Source image file (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File watermarkImage(String text, String font, BigDecimal size, String color, String horizontal, String vertical, File file) throws ApiException {
        ApiResponse<File> localVarResp = watermarkImageWithHttpInfo(text, font, size, color, horizontal, vertical, file);
        return localVarResp.getData();
    }

    /**
     * Files - Watermark Image
     * Add watermark text to an image
     * @param text Watermark text (required)
     * @param font Text font (required)
     * @param size Font size (points) (required)
     * @param color Text color hex value (required)
     * @param horizontal Horizontal alignment (required)
     * @param vertical Vertical alignment (required)
     * @param file Source image file (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> watermarkImageWithHttpInfo(String text, String font, BigDecimal size, String color, String horizontal, String vertical, File file) throws ApiException {
        okhttp3.Call localVarCall = watermarkImageValidateBeforeCall(text, font, size, color, horizontal, vertical, file, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Files - Watermark Image (asynchronously)
     * Add watermark text to an image
     * @param text Watermark text (required)
     * @param font Text font (required)
     * @param size Font size (points) (required)
     * @param color Text color hex value (required)
     * @param horizontal Horizontal alignment (required)
     * @param vertical Vertical alignment (required)
     * @param file Source image file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call watermarkImageAsync(String text, String font, BigDecimal size, String color, String horizontal, String vertical, File file, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = watermarkImageValidateBeforeCall(text, font, size, color, horizontal, vertical, file, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
