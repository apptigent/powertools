/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InputCaseConversion;
import org.openapitools.client.model.InputGenerateHash;
import org.openapitools.client.model.InputGenerateUniqueID;
import org.openapitools.client.model.InputJoinStrings;
import org.openapitools.client.model.InputRedactString;
import org.openapitools.client.model.InputReplaceString;
import org.openapitools.client.model.InputSplitString;
import org.openapitools.client.model.InputString;
import org.openapitools.client.model.InputStringComparison;
import org.openapitools.client.model.InputStringContains;
import org.openapitools.client.model.InputStringToFile;
import org.openapitools.client.model.InputTextToSpeech;
import org.openapitools.client.model.InputTranslateString;
import org.openapitools.client.model.InputTrimString;
import org.openapitools.client.model.InputVerifyHash;
import org.openapitools.client.model.OutputBoolean;
import org.openapitools.client.model.OutputString;
import org.openapitools.client.model.OutputStringArray;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TextApi {
    private ApiClient localVarApiClient;

    public TextApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TextApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for compareStrings
     * @param stringComparison  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareStringsCall(InputStringComparison stringComparison, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringComparison;

        // create path and map variables
        String localVarPath = "/CompareStrings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compareStringsValidateBeforeCall(InputStringComparison stringComparison, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = compareStringsCall(stringComparison, _callback);
        return localVarCall;

    }

    /**
     * Text - Compare strings
     * Perform a comparison of two strings
     * @param stringComparison  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString compareStrings(InputStringComparison stringComparison) throws ApiException {
        ApiResponse<OutputString> localVarResp = compareStringsWithHttpInfo(stringComparison);
        return localVarResp.getData();
    }

    /**
     * Text - Compare strings
     * Perform a comparison of two strings
     * @param stringComparison  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> compareStringsWithHttpInfo(InputStringComparison stringComparison) throws ApiException {
        okhttp3.Call localVarCall = compareStringsValidateBeforeCall(stringComparison, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Compare strings (asynchronously)
     * Perform a comparison of two strings
     * @param stringComparison  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareStringsAsync(InputStringComparison stringComparison, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = compareStringsValidateBeforeCall(stringComparison, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containsString
     * @param stringContains  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containsStringCall(InputStringContains stringContains, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringContains;

        // create path and map variables
        String localVarPath = "/ContainsString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containsStringValidateBeforeCall(InputStringContains stringContains, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = containsStringCall(stringContains, _callback);
        return localVarCall;

    }

    /**
     * Text - Contains string
     * Determine if a string contains another string
     * @param stringContains  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString containsString(InputStringContains stringContains) throws ApiException {
        ApiResponse<OutputString> localVarResp = containsStringWithHttpInfo(stringContains);
        return localVarResp.getData();
    }

    /**
     * Text - Contains string
     * Determine if a string contains another string
     * @param stringContains  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> containsStringWithHttpInfo(InputStringContains stringContains) throws ApiException {
        okhttp3.Call localVarCall = containsStringValidateBeforeCall(stringContains, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Contains string (asynchronously)
     * Determine if a string contains another string
     * @param stringContains  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containsStringAsync(InputStringContains stringContains, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = containsStringValidateBeforeCall(stringContains, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertCase
     * @param caseConversion  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertCaseCall(InputCaseConversion caseConversion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = caseConversion;

        // create path and map variables
        String localVarPath = "/ConvertCase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertCaseValidateBeforeCall(InputCaseConversion caseConversion, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertCaseCall(caseConversion, _callback);
        return localVarCall;

    }

    /**
     * Text - Convert case
     * Convert string to upper, lower or title case
     * @param caseConversion  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString convertCase(InputCaseConversion caseConversion) throws ApiException {
        ApiResponse<OutputString> localVarResp = convertCaseWithHttpInfo(caseConversion);
        return localVarResp.getData();
    }

    /**
     * Text - Convert case
     * Convert string to upper, lower or title case
     * @param caseConversion  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> convertCaseWithHttpInfo(InputCaseConversion caseConversion) throws ApiException {
        okhttp3.Call localVarCall = convertCaseValidateBeforeCall(caseConversion, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Convert case (asynchronously)
     * Convert string to upper, lower or title case
     * @param caseConversion  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertCaseAsync(InputCaseConversion caseConversion, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertCaseValidateBeforeCall(caseConversion, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decodeString
     * @param stringInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeStringCall(InlineObject stringInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringInput;

        // create path and map variables
        String localVarPath = "/DecodeString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decodeStringValidateBeforeCall(InlineObject stringInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = decodeStringCall(stringInput, _callback);
        return localVarCall;

    }

    /**
     * Text - Decode string
     * Decode a string encoded with Base64 encoding
     * @param stringInput  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString decodeString(InlineObject stringInput) throws ApiException {
        ApiResponse<OutputString> localVarResp = decodeStringWithHttpInfo(stringInput);
        return localVarResp.getData();
    }

    /**
     * Text - Decode string
     * Decode a string encoded with Base64 encoding
     * @param stringInput  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> decodeStringWithHttpInfo(InlineObject stringInput) throws ApiException {
        okhttp3.Call localVarCall = decodeStringValidateBeforeCall(stringInput, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Decode string (asynchronously)
     * Decode a string encoded with Base64 encoding
     * @param stringInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decodeStringAsync(InlineObject stringInput, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = decodeStringValidateBeforeCall(stringInput, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encodeString
     * @param stringInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encodeStringCall(InputString stringInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringInput;

        // create path and map variables
        String localVarPath = "/EncodeString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encodeStringValidateBeforeCall(InputString stringInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = encodeStringCall(stringInput, _callback);
        return localVarCall;

    }

    /**
     * Text - Encode string
     * Encode a string using Base64 encoding
     * @param stringInput  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString encodeString(InputString stringInput) throws ApiException {
        ApiResponse<OutputString> localVarResp = encodeStringWithHttpInfo(stringInput);
        return localVarResp.getData();
    }

    /**
     * Text - Encode string
     * Encode a string using Base64 encoding
     * @param stringInput  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> encodeStringWithHttpInfo(InputString stringInput) throws ApiException {
        okhttp3.Call localVarCall = encodeStringValidateBeforeCall(stringInput, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Encode string (asynchronously)
     * Encode a string using Base64 encoding
     * @param stringInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encodeStringAsync(InputString stringInput, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = encodeStringValidateBeforeCall(stringInput, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateGuid
     * @param generateUniqueID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateGuidCall(InputGenerateUniqueID generateUniqueID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = generateUniqueID;

        // create path and map variables
        String localVarPath = "/GenerateGuid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateGuidValidateBeforeCall(InputGenerateUniqueID generateUniqueID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateGuidCall(generateUniqueID, _callback);
        return localVarCall;

    }

    /**
     * Text - Generate GUID
     * Generate a globally unique identifier
     * @param generateUniqueID  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString generateGuid(InputGenerateUniqueID generateUniqueID) throws ApiException {
        ApiResponse<OutputString> localVarResp = generateGuidWithHttpInfo(generateUniqueID);
        return localVarResp.getData();
    }

    /**
     * Text - Generate GUID
     * Generate a globally unique identifier
     * @param generateUniqueID  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> generateGuidWithHttpInfo(InputGenerateUniqueID generateUniqueID) throws ApiException {
        okhttp3.Call localVarCall = generateGuidValidateBeforeCall(generateUniqueID, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Generate GUID (asynchronously)
     * Generate a globally unique identifier
     * @param generateUniqueID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateGuidAsync(InputGenerateUniqueID generateUniqueID, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateGuidValidateBeforeCall(generateUniqueID, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateHash
     * @param generateHash  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateHashCall(InputGenerateHash generateHash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = generateHash;

        // create path and map variables
        String localVarPath = "/GenerateHash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateHashValidateBeforeCall(InputGenerateHash generateHash, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateHashCall(generateHash, _callback);
        return localVarCall;

    }

    /**
     * Text - Generate hash
     * Generate a hash value from a string
     * @param generateHash  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString generateHash(InputGenerateHash generateHash) throws ApiException {
        ApiResponse<OutputString> localVarResp = generateHashWithHttpInfo(generateHash);
        return localVarResp.getData();
    }

    /**
     * Text - Generate hash
     * Generate a hash value from a string
     * @param generateHash  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> generateHashWithHttpInfo(InputGenerateHash generateHash) throws ApiException {
        okhttp3.Call localVarCall = generateHashValidateBeforeCall(generateHash, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Generate hash (asynchronously)
     * Generate a hash value from a string
     * @param generateHash  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateHashAsync(InputGenerateHash generateHash, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateHashValidateBeforeCall(generateHash, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinStrings
     * @param joinStrings  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinStringsCall(InputJoinStrings joinStrings, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = joinStrings;

        // create path and map variables
        String localVarPath = "/JoinStrings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinStringsValidateBeforeCall(InputJoinStrings joinStrings, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = joinStringsCall(joinStrings, _callback);
        return localVarCall;

    }

    /**
     * Text - Join strings
     * Join a collection of strings
     * @param joinStrings  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString joinStrings(InputJoinStrings joinStrings) throws ApiException {
        ApiResponse<OutputString> localVarResp = joinStringsWithHttpInfo(joinStrings);
        return localVarResp.getData();
    }

    /**
     * Text - Join strings
     * Join a collection of strings
     * @param joinStrings  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> joinStringsWithHttpInfo(InputJoinStrings joinStrings) throws ApiException {
        okhttp3.Call localVarCall = joinStringsValidateBeforeCall(joinStrings, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Join strings (asynchronously)
     * Join a collection of strings
     * @param joinStrings  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinStringsAsync(InputJoinStrings joinStrings, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinStringsValidateBeforeCall(joinStrings, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactString
     * @param redactString  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactStringCall(InputRedactString redactString, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = redactString;

        // create path and map variables
        String localVarPath = "/RedactString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactStringValidateBeforeCall(InputRedactString redactString, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = redactStringCall(redactString, _callback);
        return localVarCall;

    }

    /**
     * Text - Redact string
     * Redact a strng containing sensitive content
     * @param redactString  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString redactString(InputRedactString redactString) throws ApiException {
        ApiResponse<OutputString> localVarResp = redactStringWithHttpInfo(redactString);
        return localVarResp.getData();
    }

    /**
     * Text - Redact string
     * Redact a strng containing sensitive content
     * @param redactString  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> redactStringWithHttpInfo(InputRedactString redactString) throws ApiException {
        okhttp3.Call localVarCall = redactStringValidateBeforeCall(redactString, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Redact string (asynchronously)
     * Redact a strng containing sensitive content
     * @param redactString  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactStringAsync(InputRedactString redactString, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactStringValidateBeforeCall(redactString, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceString
     * @param replaceString  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceStringCall(InputReplaceString replaceString, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = replaceString;

        // create path and map variables
        String localVarPath = "/ReplaceString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceStringValidateBeforeCall(InputReplaceString replaceString, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = replaceStringCall(replaceString, _callback);
        return localVarCall;

    }

    /**
     * Text - Replace string
     * Replace one value with another in a string
     * @param replaceString  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString replaceString(InputReplaceString replaceString) throws ApiException {
        ApiResponse<OutputString> localVarResp = replaceStringWithHttpInfo(replaceString);
        return localVarResp.getData();
    }

    /**
     * Text - Replace string
     * Replace one value with another in a string
     * @param replaceString  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> replaceStringWithHttpInfo(InputReplaceString replaceString) throws ApiException {
        okhttp3.Call localVarCall = replaceStringValidateBeforeCall(replaceString, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Replace string (asynchronously)
     * Replace one value with another in a string
     * @param replaceString  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceStringAsync(InputReplaceString replaceString, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceStringValidateBeforeCall(replaceString, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shortenLink
     * @param stringInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortenLinkCall(InlineObject1 stringInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringInput;

        // create path and map variables
        String localVarPath = "/ShortenLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shortenLinkValidateBeforeCall(InlineObject1 stringInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = shortenLinkCall(stringInput, _callback);
        return localVarCall;

    }

    /**
     * Text - Shorten hyperlink
     * Generate a simple, short URL from a complex URL
     * @param stringInput  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString shortenLink(InlineObject1 stringInput) throws ApiException {
        ApiResponse<OutputString> localVarResp = shortenLinkWithHttpInfo(stringInput);
        return localVarResp.getData();
    }

    /**
     * Text - Shorten hyperlink
     * Generate a simple, short URL from a complex URL
     * @param stringInput  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> shortenLinkWithHttpInfo(InlineObject1 stringInput) throws ApiException {
        okhttp3.Call localVarCall = shortenLinkValidateBeforeCall(stringInput, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Shorten hyperlink (asynchronously)
     * Generate a simple, short URL from a complex URL
     * @param stringInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shortenLinkAsync(InlineObject1 stringInput, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = shortenLinkValidateBeforeCall(stringInput, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for speechToText
     * @param language Language of audio input (required)
     * @param file Source audio file (WAV, MP3, AAC, M4A) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speechToTextCall(String language, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/SpeechToText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarFormParams.put("language", language);
        }

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call speechToTextValidateBeforeCall(String language, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling speechToText(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling speechToText(Async)");
        }
        

        okhttp3.Call localVarCall = speechToTextCall(language, file, _callback);
        return localVarCall;

    }

    /**
     * Text - Speech to Text
     * Convert audio file to text (10MB limit)
     * @param language Language of audio input (required)
     * @param file Source audio file (WAV, MP3, AAC, M4A) (required)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString speechToText(String language, File file) throws ApiException {
        ApiResponse<OutputString> localVarResp = speechToTextWithHttpInfo(language, file);
        return localVarResp.getData();
    }

    /**
     * Text - Speech to Text
     * Convert audio file to text (10MB limit)
     * @param language Language of audio input (required)
     * @param file Source audio file (WAV, MP3, AAC, M4A) (required)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> speechToTextWithHttpInfo(String language, File file) throws ApiException {
        okhttp3.Call localVarCall = speechToTextValidateBeforeCall(language, file, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Speech to Text (asynchronously)
     * Convert audio file to text (10MB limit)
     * @param language Language of audio input (required)
     * @param file Source audio file (WAV, MP3, AAC, M4A) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call speechToTextAsync(String language, File file, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = speechToTextValidateBeforeCall(language, file, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for splitString
     * @param splitString  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitStringCall(InputSplitString splitString, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = splitString;

        // create path and map variables
        String localVarPath = "/SplitString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitStringValidateBeforeCall(InputSplitString splitString, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = splitStringCall(splitString, _callback);
        return localVarCall;

    }

    /**
     * Text - Split string
     * Split a string based upon one or more characters
     * @param splitString  (optional)
     * @return OutputStringArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputStringArray splitString(InputSplitString splitString) throws ApiException {
        ApiResponse<OutputStringArray> localVarResp = splitStringWithHttpInfo(splitString);
        return localVarResp.getData();
    }

    /**
     * Text - Split string
     * Split a string based upon one or more characters
     * @param splitString  (optional)
     * @return ApiResponse&lt;OutputStringArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputStringArray> splitStringWithHttpInfo(InputSplitString splitString) throws ApiException {
        okhttp3.Call localVarCall = splitStringValidateBeforeCall(splitString, null);
        Type localVarReturnType = new TypeToken<OutputStringArray>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Split string (asynchronously)
     * Split a string based upon one or more characters
     * @param splitString  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitStringAsync(InputSplitString splitString, final ApiCallback<OutputStringArray> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitStringValidateBeforeCall(splitString, _callback);
        Type localVarReturnType = new TypeToken<OutputStringArray>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stringToFile
     * @param inputStringToFile  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stringToFileCall(InputStringToFile inputStringToFile, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inputStringToFile;

        // create path and map variables
        String localVarPath = "/StringToFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "text/html", "text/csv", "text/javascript", "text/css", "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stringToFileValidateBeforeCall(InputStringToFile inputStringToFile, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = stringToFileCall(inputStringToFile, _callback);
        return localVarCall;

    }

    /**
     * Text - String to File
     * Convert text string to file
     * @param inputStringToFile  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File stringToFile(InputStringToFile inputStringToFile) throws ApiException {
        ApiResponse<File> localVarResp = stringToFileWithHttpInfo(inputStringToFile);
        return localVarResp.getData();
    }

    /**
     * Text - String to File
     * Convert text string to file
     * @param inputStringToFile  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> stringToFileWithHttpInfo(InputStringToFile inputStringToFile) throws ApiException {
        okhttp3.Call localVarCall = stringToFileValidateBeforeCall(inputStringToFile, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - String to File (asynchronously)
     * Convert text string to file
     * @param inputStringToFile  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stringToFileAsync(InputStringToFile inputStringToFile, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = stringToFileValidateBeforeCall(inputStringToFile, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for textToSpeech
     * @param textToSpeech  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textToSpeechCall(InputTextToSpeech textToSpeech, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = textToSpeech;

        // create path and map variables
        String localVarPath = "/TextToSpeech";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "audio/mp3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textToSpeechValidateBeforeCall(InputTextToSpeech textToSpeech, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = textToSpeechCall(textToSpeech, _callback);
        return localVarCall;

    }

    /**
     * Text - Text to Speech
     * Convert text to an audio file using AI-driven speech synthesis.
     * @param textToSpeech  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public File textToSpeech(InputTextToSpeech textToSpeech) throws ApiException {
        ApiResponse<File> localVarResp = textToSpeechWithHttpInfo(textToSpeech);
        return localVarResp.getData();
    }

    /**
     * Text - Text to Speech
     * Convert text to an audio file using AI-driven speech synthesis.
     * @param textToSpeech  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> textToSpeechWithHttpInfo(InputTextToSpeech textToSpeech) throws ApiException {
        okhttp3.Call localVarCall = textToSpeechValidateBeforeCall(textToSpeech, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Text to Speech (asynchronously)
     * Convert text to an audio file using AI-driven speech synthesis.
     * @param textToSpeech  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textToSpeechAsync(InputTextToSpeech textToSpeech, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = textToSpeechValidateBeforeCall(textToSpeech, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for translateString
     * @param translateString  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateStringCall(InputTranslateString translateString, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = translateString;

        // create path and map variables
        String localVarPath = "/TranslateString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateStringValidateBeforeCall(InputTranslateString translateString, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = translateStringCall(translateString, _callback);
        return localVarCall;

    }

    /**
     * Text - Translate string
     * Translate a string into a different language
     * @param translateString  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString translateString(InputTranslateString translateString) throws ApiException {
        ApiResponse<OutputString> localVarResp = translateStringWithHttpInfo(translateString);
        return localVarResp.getData();
    }

    /**
     * Text - Translate string
     * Translate a string into a different language
     * @param translateString  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> translateStringWithHttpInfo(InputTranslateString translateString) throws ApiException {
        okhttp3.Call localVarCall = translateStringValidateBeforeCall(translateString, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Translate string (asynchronously)
     * Translate a string into a different language
     * @param translateString  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call translateStringAsync(InputTranslateString translateString, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateStringValidateBeforeCall(translateString, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trimString
     * @param trimString  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trimStringCall(InputTrimString trimString, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = trimString;

        // create path and map variables
        String localVarPath = "/TrimString";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trimStringValidateBeforeCall(InputTrimString trimString, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = trimStringCall(trimString, _callback);
        return localVarCall;

    }

    /**
     * Text - Trim string
     * Trim leading or trailing whitespace from a string
     * @param trimString  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString trimString(InputTrimString trimString) throws ApiException {
        ApiResponse<OutputString> localVarResp = trimStringWithHttpInfo(trimString);
        return localVarResp.getData();
    }

    /**
     * Text - Trim string
     * Trim leading or trailing whitespace from a string
     * @param trimString  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> trimStringWithHttpInfo(InputTrimString trimString) throws ApiException {
        okhttp3.Call localVarCall = trimStringValidateBeforeCall(trimString, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Trim string (asynchronously)
     * Trim leading or trailing whitespace from a string
     * @param trimString  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trimStringAsync(InputTrimString trimString, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = trimStringValidateBeforeCall(trimString, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlDecode
     * @param stringInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlDecodeCall(InlineObject2 stringInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringInput;

        // create path and map variables
        String localVarPath = "/URLDecode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlDecodeValidateBeforeCall(InlineObject2 stringInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = urlDecodeCall(stringInput, _callback);
        return localVarCall;

    }

    /**
     * Text - Decode URL
     * Decode an encoded URL
     * @param stringInput  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString urlDecode(InlineObject2 stringInput) throws ApiException {
        ApiResponse<OutputString> localVarResp = urlDecodeWithHttpInfo(stringInput);
        return localVarResp.getData();
    }

    /**
     * Text - Decode URL
     * Decode an encoded URL
     * @param stringInput  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> urlDecodeWithHttpInfo(InlineObject2 stringInput) throws ApiException {
        okhttp3.Call localVarCall = urlDecodeValidateBeforeCall(stringInput, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Decode URL (asynchronously)
     * Decode an encoded URL
     * @param stringInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlDecodeAsync(InlineObject2 stringInput, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlDecodeValidateBeforeCall(stringInput, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for urlEncode
     * @param stringInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlEncodeCall(InputString stringInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringInput;

        // create path and map variables
        String localVarPath = "/URLEncode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call urlEncodeValidateBeforeCall(InputString stringInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = urlEncodeCall(stringInput, _callback);
        return localVarCall;

    }

    /**
     * Text - Encode URL
     * Generate an encoded string from a complex hyperlink
     * @param stringInput  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString urlEncode(InputString stringInput) throws ApiException {
        ApiResponse<OutputString> localVarResp = urlEncodeWithHttpInfo(stringInput);
        return localVarResp.getData();
    }

    /**
     * Text - Encode URL
     * Generate an encoded string from a complex hyperlink
     * @param stringInput  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> urlEncodeWithHttpInfo(InputString stringInput) throws ApiException {
        okhttp3.Call localVarCall = urlEncodeValidateBeforeCall(stringInput, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Encode URL (asynchronously)
     * Generate an encoded string from a complex hyperlink
     * @param stringInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call urlEncodeAsync(InputString stringInput, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = urlEncodeValidateBeforeCall(stringInput, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateEmail
     * @param stringInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateEmailCall(InlineObject3 stringInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = stringInput;

        // create path and map variables
        String localVarPath = "/ValidateEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateEmailValidateBeforeCall(InlineObject3 stringInput, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = validateEmailCall(stringInput, _callback);
        return localVarCall;

    }

    /**
     * Text - Validate email
     * Determine if an email address is valid
     * @param stringInput  (optional)
     * @return OutputString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputString validateEmail(InlineObject3 stringInput) throws ApiException {
        ApiResponse<OutputString> localVarResp = validateEmailWithHttpInfo(stringInput);
        return localVarResp.getData();
    }

    /**
     * Text - Validate email
     * Determine if an email address is valid
     * @param stringInput  (optional)
     * @return ApiResponse&lt;OutputString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputString> validateEmailWithHttpInfo(InlineObject3 stringInput) throws ApiException {
        okhttp3.Call localVarCall = validateEmailValidateBeforeCall(stringInput, null);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Validate email (asynchronously)
     * Determine if an email address is valid
     * @param stringInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateEmailAsync(InlineObject3 stringInput, final ApiCallback<OutputString> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateEmailValidateBeforeCall(stringInput, _callback);
        Type localVarReturnType = new TypeToken<OutputString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyHash
     * @param verifyHash  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyHashCall(InputVerifyHash verifyHash, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verifyHash;

        // create path and map variables
        String localVarPath = "/VerifyHash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyHashValidateBeforeCall(InputVerifyHash verifyHash, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = verifyHashCall(verifyHash, _callback);
        return localVarCall;

    }

    /**
     * Text - Verify hash
     * Verify a hashed value against the original source string
     * @param verifyHash  (optional)
     * @return OutputBoolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputBoolean verifyHash(InputVerifyHash verifyHash) throws ApiException {
        ApiResponse<OutputBoolean> localVarResp = verifyHashWithHttpInfo(verifyHash);
        return localVarResp.getData();
    }

    /**
     * Text - Verify hash
     * Verify a hashed value against the original source string
     * @param verifyHash  (optional)
     * @return ApiResponse&lt;OutputBoolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputBoolean> verifyHashWithHttpInfo(InputVerifyHash verifyHash) throws ApiException {
        okhttp3.Call localVarCall = verifyHashValidateBeforeCall(verifyHash, null);
        Type localVarReturnType = new TypeToken<OutputBoolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Text - Verify hash (asynchronously)
     * Verify a hashed value against the original source string
     * @param verifyHash  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyHashAsync(InputVerifyHash verifyHash, final ApiCallback<OutputBoolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyHashValidateBeforeCall(verifyHash, _callback);
        Type localVarReturnType = new TypeToken<OutputBoolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
