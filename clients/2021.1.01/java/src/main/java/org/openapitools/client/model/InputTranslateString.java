/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputTranslateString
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputTranslateString {
  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  /**
   * Translation language
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    ARABIC("Arabic"),
    
    CHINESE_SIMPLIFIED_("Chinese (Simplified)"),
    
    CZECH("Czech"),
    
    DANISH("Danish"),
    
    DUTCH("Dutch"),
    
    ENGLISH("English"),
    
    FINNISH("Finnish"),
    
    FRENCH("French"),
    
    GERMAN("German"),
    
    GREEK("Greek"),
    
    HINDI("Hindi"),
    
    HUNGARIAN("Hungarian"),
    
    ITALIAN("Italian"),
    
    JAPANESE("Japanese"),
    
    KLINGON("Klingon"),
    
    KOREAN("Korean"),
    
    NORWEIGAN("Norweigan"),
    
    POLISH("Polish"),
    
    PORTUGUESE("Portuguese"),
    
    RUSSIAN("Russian"),
    
    SPANISH("Spanish"),
    
    SWEDISH("Swedish"),
    
    TURKISH("Turkish"),
    
    VIETNAMESE("Vietnamese"),
    
    WELSH("Welsh");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;


  public InputTranslateString input(String input) {
    
    this.input = input;
    return this;
  }

   /**
   * String containing the text to be translated
   * @return input
  **/
  @ApiModelProperty(required = true, value = "String containing the text to be translated")

  public String getInput() {
    return input;
  }


  public void setInput(String input) {
    this.input = input;
  }


  public InputTranslateString language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

   /**
   * Translation language
   * @return language
  **/
  @ApiModelProperty(required = true, value = "Translation language")

  public LanguageEnum getLanguage() {
    return language;
  }


  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputTranslateString inputTranslateString = (InputTranslateString) o;
    return Objects.equals(this.input, inputTranslateString.input) &&
        Objects.equals(this.language, inputTranslateString.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(input, language);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputTranslateString {\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

