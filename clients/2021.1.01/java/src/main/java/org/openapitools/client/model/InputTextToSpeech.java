/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InputTextToSpeech
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-01-21T09:13:09.005-06:00[America/Chicago]")
public class InputTextToSpeech {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  /**
   * Text or file type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PLAINTEXT("PlainText"),
    
    SSML("SSML");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.PLAINTEXT;

  /**
   * Voice locale (must match language of input text)
   */
  @JsonAdapter(VoiceEnum.Adapter.class)
  public enum VoiceEnum {
    AR_EG_HODA_FEMALE_("ar-EG, Hoda (Female)"),
    
    AR_SA_NAAYF_MALE_("ar-SA, Naayf (Male)"),
    
    BG_BG_IVAN_MALE_("bg-BG, Ivan (Male)"),
    
    CA_ES_HERENA_FEMALE_("ca-ES, Herena (Female)"),
    
    CS_CZ_JAKUB_MALE_("cs-CZ, Jakub (Male)"),
    
    DA_DK_HELLE_FEMALE_("da-DK, Helle (Female)"),
    
    DE_AT_MICHAEL_MALE_("de-AT, Michael (Male)"),
    
    DE_CH_KARSTEN_MALE_("de-CH, Karsten (Male)"),
    
    DE_DE_HEDDA_FEMALE_("de-DE, Hedda (Female)"),
    
    DE_DE_STEFAN_MALE_("de-DE, Stefan (Male)"),
    
    EL_GR_STEFANOS_MALE_("el-GR, Stefanos (Male)"),
    
    EN_AU_CATHERINE_FEMALE_("en-AU, Catherine (Female)"),
    
    EN_AU_HAYLEY_FEMALE_("en-AU, Hayley (Female)"),
    
    EN_CA_HEATHER_FEMALE_("en-CA, Heather (Female)"),
    
    EN_CA_LINDA_FEMALE_("en-CA, Linda (Female)"),
    
    EN_GB_GEORGE_MALE_("en-GB, George (Male)"),
    
    EN_GB_HAZEL_FEMALE_("en-GB, Hazel (Female)"),
    
    EN_GB_SUSAN_FEMALE_("en-GB, Susan (Female)"),
    
    EN_IE_SEAN_MALE_("en-IE, Sean (Male)"),
    
    EN_IN_HEERA_FEMALE_("en-IN, Heera (Female)"),
    
    EN_IN_PRIYA_FEMALE_("en-IN, Priya (Female)"),
    
    EN_IN_RAVI_MALE_("en-IN, Ravi (Male)"),
    
    EN_US_ARIA_FEMALE_("en-US, Aria (Female)"),
    
    EN_US_BENJAMIN_MALE_("en-US, Benjamin (Male)"),
    
    EN_US_GUY_MALE_("en-US, Guy (Male)"),
    
    EN_US_ZIRA_FEMALE_("en-US, Zira (Female)"),
    
    ES_ES_HELENA_FEMALE_("es-ES, Helena (Female)"),
    
    ES_ES_LAURA_FEMALE_("es-ES, Laura (Female)"),
    
    ES_ES_PABLO_MALE_("es-ES, Pablo (Male)"),
    
    ES_MX_HILDA_FEMALE_("es-MX, Hilda (Female)"),
    
    ES_MX_RAUL_MALE_("es-MX, Raul (Male)"),
    
    FI_FI_HEIDI_FEMALE_("fi-FI, Heidi (Female)"),
    
    FR_CA_CAROLINE_FEMALE_("fr-CA, Caroline (Female)"),
    
    FR_CA_HARMONIE_FEMALE_("fr-CA, Harmonie (Female)"),
    
    FR_CH_GUILLAUME_MALE_("fr-CH, Guillaume (Male)"),
    
    FR_FR_HORTENSE_FEMALE_("fr-FR, Hortense (Female)"),
    
    FR_FR_JULIE_FEMALE_("fr-FR, Julie (Female)"),
    
    FR_FR_PAUL_MALE_("fr-FR, Paul (Male)"),
    
    HE_IL_ASAF_MALE_("he-IL, Asaf (Male)"),
    
    HI_IN_HEMANT_MALE_("hi-IN, Hemant (Male)"),
    
    HI_IN_KALPANA_FEMALE_("hi-IN, Kalpana (Female)"),
    
    HR_HR_MATEJ_MALE_("hr-HR, Matej (Male)"),
    
    HU_HU_SZABOLCS_MALE_("hu-HU, Szabolcs (Male)"),
    
    ID_ID_ANDIKA_MALE_("id-ID, Andika (Male)"),
    
    IT_IT_COSIMO_MALE_("it-IT, Cosimo (Male)"),
    
    IT_IT_LUCIA_FEMALE_("it-IT, Lucia (Female)"),
    
    JA_JP_AYUMI_FEMALE_("ja-JP, Ayumi (Female)"),
    
    JA_JP_HARUKA_FEMALE_("ja-JP, Haruka (Female)"),
    
    JA_JP_ICHIRO_MALE_("ja-JP, Ichiro (Male)"),
    
    KO_KR_HEAMI_FEMALE_("ko-KR, Heami (Female)"),
    
    MS_MY_RIZWAN_MALE_("ms-MY, Rizwan (Male)"),
    
    NB_NO_HULDA_FEMALE_("nb-NO, Hulda (Female)"),
    
    NL_NL_HANNA_FEMALE_("nl-NL, Hanna (Female)"),
    
    PL_PL_PAULINA_FEMALE_("pl-PL, Paulina (Female)"),
    
    PT_BR_DANIEL_MALE_("pt-BR, Daniel (Male)"),
    
    PT_BR_HELOISA_FEMALE_("pt-BR, Heloisa (Female)"),
    
    PT_PT_HELIA_FEMALE_("pt-PT, Helia (Female)"),
    
    RO_RO_ANDREI_MALE_("ro-RO, Andrei (Male)"),
    
    RU_RU_EKATERINA_FEMALE_("ru-RU, Ekaterina (Female)"),
    
    RU_RU_IRINA_FEMALE_("ru-RU, Irina (Female)"),
    
    RU_RU_PAVEL_MALE_("ru-RU, Pavel (Male)"),
    
    SK_SK_FILIP_MALE_("sk-SK, Filip (Male)"),
    
    SL_SI_LADO_MALE_("sl-SI, Lado (Male)"),
    
    SV_SE_HEDVIG_FEMALE_("sv-SE, Hedvig (Female)"),
    
    TA_IN_VALLUVAR_MALE_("ta-IN, Valluvar (Male)"),
    
    TE_IN_CHITRA_FEMALE_("te-IN, Chitra (Female)"),
    
    TH_TH_PATTARA_MALE_("th-TH, Pattara (Male)"),
    
    TR_TR_SEDA_FEMALE_("tr-TR, Seda (Female)"),
    
    VI_VN_AN_MALE_("vi-VN, An (Male)"),
    
    ZH_CN_HUIHUI_FEMALE_("zh-CN, Huihui (Female)"),
    
    ZH_CN_KANGKANG_MALE_("zh-CN, Kangkang (Male)"),
    
    ZH_CN_YAOYAO_FEMALE_("zh-CN, Yaoyao (Female)"),
    
    ZH_HK_DANNY_MALE_("zh-HK, Danny (Male)"),
    
    ZH_HK_TRACY_FEMALE_("zh-HK, Tracy (Female)"),
    
    ZH_TW_HANHAN_FEMALE_("zh-TW, HanHan (Female)"),
    
    ZH_TW_YATING_FEMALE_("zh-TW, Yating (Female)"),
    
    ZH_TW_ZHIWEI_MALE_("zh-TW, Zhiwei (Male)");

    private String value;

    VoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceEnum fromValue(String value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoiceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private VoiceEnum voice = VoiceEnum.EN_US_ARIA_FEMALE_;


  public InputTextToSpeech text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Text to convert (10,000 characters max)
   * @return text
  **/
  @ApiModelProperty(required = true, value = "Text to convert (10,000 characters max)")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public InputTextToSpeech type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Text or file type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Text or file type")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public InputTextToSpeech voice(VoiceEnum voice) {
    
    this.voice = voice;
    return this;
  }

   /**
   * Voice locale (must match language of input text)
   * @return voice
  **/
  @ApiModelProperty(required = true, value = "Voice locale (must match language of input text)")

  public VoiceEnum getVoice() {
    return voice;
  }


  public void setVoice(VoiceEnum voice) {
    this.voice = voice;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputTextToSpeech inputTextToSpeech = (InputTextToSpeech) o;
    return Objects.equals(this.text, inputTextToSpeech.text) &&
        Objects.equals(this.type, inputTextToSpeech.type) &&
        Objects.equals(this.voice, inputTextToSpeech.voice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, type, voice);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputTextToSpeech {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

