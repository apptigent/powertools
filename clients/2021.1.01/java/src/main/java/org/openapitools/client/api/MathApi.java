/*
 * PowerTools Developer
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InputCalculateMinMax;
import org.openapitools.client.model.InputCalculateNumber;
import org.openapitools.client.model.InputCalculateNumbers;
import org.openapitools.client.model.InputCalculatePower;
import org.openapitools.client.model.InputCalculateSeries;
import org.openapitools.client.model.InputConvertAngle;
import org.openapitools.client.model.InputConvertArea;
import org.openapitools.client.model.InputConvertDistance;
import org.openapitools.client.model.InputConvertDuration;
import org.openapitools.client.model.InputConvertEnergy;
import org.openapitools.client.model.InputConvertPower;
import org.openapitools.client.model.InputConvertSpeed;
import org.openapitools.client.model.InputConvertTemperature;
import org.openapitools.client.model.InputConvertVolume;
import org.openapitools.client.model.InputConvertWeight;
import org.openapitools.client.model.InputNumberRange;
import org.openapitools.client.model.OutputNumber;
import org.openapitools.client.model.OutputString;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MathApi {
    private ApiClient localVarApiClient;

    public MathApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MathApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for calculateAbsolute
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateAbsoluteCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/CalculateAbsolute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateAbsoluteValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateAbsoluteCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Absolute
     * Calculate the absolute value of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateAbsolute(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateAbsoluteWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Absolute
     * Calculate the absolute value of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateAbsoluteWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = calculateAbsoluteValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Absolute (asynchronously)
     * Calculate the absolute value of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateAbsoluteAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateAbsoluteValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateAddition
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateAdditionCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumbers;

        // create path and map variables
        String localVarPath = "/CalculateAddition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateAdditionValidateBeforeCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateAdditionCall(calculateNumbers, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Addition
     * Calculate the sum of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateAddition(InputCalculateNumbers calculateNumbers) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateAdditionWithHttpInfo(calculateNumbers);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Addition
     * Calculate the sum of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateAdditionWithHttpInfo(InputCalculateNumbers calculateNumbers) throws ApiException {
        okhttp3.Call localVarCall = calculateAdditionValidateBeforeCall(calculateNumbers, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Addition (asynchronously)
     * Calculate the sum of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateAdditionAsync(InputCalculateNumbers calculateNumbers, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateAdditionValidateBeforeCall(calculateNumbers, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateAverage
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateAverageCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateSeries;

        // create path and map variables
        String localVarPath = "/CalculateAverage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateAverageValidateBeforeCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateAverageCall(calculateSeries, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate average
     * Calculate the average of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateAverage(InputCalculateSeries calculateSeries) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateAverageWithHttpInfo(calculateSeries);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate average
     * Calculate the average of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateAverageWithHttpInfo(InputCalculateSeries calculateSeries) throws ApiException {
        okhttp3.Call localVarCall = calculateAverageValidateBeforeCall(calculateSeries, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate average (asynchronously)
     * Calculate the average of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateAverageAsync(InputCalculateSeries calculateSeries, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateAverageValidateBeforeCall(calculateSeries, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateCosine
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateCosineCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/CalculateCosine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateCosineValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateCosineCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Cosine
     * Calculate the cosine value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateCosine(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateCosineWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Cosine
     * Calculate the cosine value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateCosineWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = calculateCosineValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Cosine (asynchronously)
     * Calculate the cosine value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateCosineAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateCosineValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateDivision
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateDivisionCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumbers;

        // create path and map variables
        String localVarPath = "/CalculateDivision";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateDivisionValidateBeforeCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateDivisionCall(calculateNumbers, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Division
     * Calculate the quotient of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateDivision(InputCalculateNumbers calculateNumbers) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateDivisionWithHttpInfo(calculateNumbers);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Division
     * Calculate the quotient of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateDivisionWithHttpInfo(InputCalculateNumbers calculateNumbers) throws ApiException {
        okhttp3.Call localVarCall = calculateDivisionValidateBeforeCall(calculateNumbers, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Division (asynchronously)
     * Calculate the quotient of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateDivisionAsync(InputCalculateNumbers calculateNumbers, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateDivisionValidateBeforeCall(calculateNumbers, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateLogarithm
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateLogarithmCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/CalculateLogarithm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateLogarithmValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateLogarithmCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Logarithm
     * Calculate the logarithm of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateLogarithm(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateLogarithmWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Logarithm
     * Calculate the logarithm of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateLogarithmWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = calculateLogarithmValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Logarithm (asynchronously)
     * Calculate the logarithm of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateLogarithmAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateLogarithmValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateMedian
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateMedianCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateSeries;

        // create path and map variables
        String localVarPath = "/CalculateMedian";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateMedianValidateBeforeCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateMedianCall(calculateSeries, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate median
     * Calculate the median of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateMedian(InputCalculateSeries calculateSeries) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateMedianWithHttpInfo(calculateSeries);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate median
     * Calculate the median of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateMedianWithHttpInfo(InputCalculateSeries calculateSeries) throws ApiException {
        okhttp3.Call localVarCall = calculateMedianValidateBeforeCall(calculateSeries, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate median (asynchronously)
     * Calculate the median of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateMedianAsync(InputCalculateSeries calculateSeries, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateMedianValidateBeforeCall(calculateSeries, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateMinMax
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateMinMaxCall(InputCalculateMinMax calculateSeries, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateSeries;

        // create path and map variables
        String localVarPath = "/CalculateMinMax";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateMinMaxValidateBeforeCall(InputCalculateMinMax calculateSeries, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateMinMaxCall(calculateSeries, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate minimum or maximum
     * Calculate the minimum or maximum value in a sequence of numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateMinMax(InputCalculateMinMax calculateSeries) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateMinMaxWithHttpInfo(calculateSeries);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate minimum or maximum
     * Calculate the minimum or maximum value in a sequence of numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateMinMaxWithHttpInfo(InputCalculateMinMax calculateSeries) throws ApiException {
        okhttp3.Call localVarCall = calculateMinMaxValidateBeforeCall(calculateSeries, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate minimum or maximum (asynchronously)
     * Calculate the minimum or maximum value in a sequence of numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateMinMaxAsync(InputCalculateMinMax calculateSeries, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateMinMaxValidateBeforeCall(calculateSeries, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateModulo
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateModuloCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumbers;

        // create path and map variables
        String localVarPath = "/CalculateModulo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateModuloValidateBeforeCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateModuloCall(calculateNumbers, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Modulo
     * Calculate the remainder of dividing two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateModulo(InputCalculateNumbers calculateNumbers) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateModuloWithHttpInfo(calculateNumbers);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Modulo
     * Calculate the remainder of dividing two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateModuloWithHttpInfo(InputCalculateNumbers calculateNumbers) throws ApiException {
        okhttp3.Call localVarCall = calculateModuloValidateBeforeCall(calculateNumbers, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Modulo (asynchronously)
     * Calculate the remainder of dividing two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateModuloAsync(InputCalculateNumbers calculateNumbers, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateModuloValidateBeforeCall(calculateNumbers, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateMultiplication
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateMultiplicationCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumbers;

        // create path and map variables
        String localVarPath = "/CalculateMultiplication";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateMultiplicationValidateBeforeCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateMultiplicationCall(calculateNumbers, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Multiplication
     * Calculate the product of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateMultiplication(InputCalculateNumbers calculateNumbers) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateMultiplicationWithHttpInfo(calculateNumbers);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Multiplication
     * Calculate the product of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateMultiplicationWithHttpInfo(InputCalculateNumbers calculateNumbers) throws ApiException {
        okhttp3.Call localVarCall = calculateMultiplicationValidateBeforeCall(calculateNumbers, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Multiplication (asynchronously)
     * Calculate the product of two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateMultiplicationAsync(InputCalculateNumbers calculateNumbers, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateMultiplicationValidateBeforeCall(calculateNumbers, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateNthRoot
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateNthRootCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumbers;

        // create path and map variables
        String localVarPath = "/CalculateNthRoot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateNthRootValidateBeforeCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateNthRootCall(calculateNumbers, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Nth Root
     * Calculate the n-th root of a number
     * @param calculateNumbers Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateNthRoot(InputCalculateNumbers calculateNumbers) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateNthRootWithHttpInfo(calculateNumbers);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Nth Root
     * Calculate the n-th root of a number
     * @param calculateNumbers Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateNthRootWithHttpInfo(InputCalculateNumbers calculateNumbers) throws ApiException {
        okhttp3.Call localVarCall = calculateNthRootValidateBeforeCall(calculateNumbers, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Nth Root (asynchronously)
     * Calculate the n-th root of a number
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateNthRootAsync(InputCalculateNumbers calculateNumbers, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateNthRootValidateBeforeCall(calculateNumbers, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculatePower
     * @param calculatePower Power calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculatePowerCall(InputCalculatePower calculatePower, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculatePower;

        // create path and map variables
        String localVarPath = "/CalculatePower";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculatePowerValidateBeforeCall(InputCalculatePower calculatePower, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculatePowerCall(calculatePower, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate power
     * Raise number to a specified power
     * @param calculatePower Power calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculatePower(InputCalculatePower calculatePower) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculatePowerWithHttpInfo(calculatePower);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate power
     * Raise number to a specified power
     * @param calculatePower Power calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculatePowerWithHttpInfo(InputCalculatePower calculatePower) throws ApiException {
        okhttp3.Call localVarCall = calculatePowerValidateBeforeCall(calculatePower, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate power (asynchronously)
     * Raise number to a specified power
     * @param calculatePower Power calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculatePowerAsync(InputCalculatePower calculatePower, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculatePowerValidateBeforeCall(calculatePower, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateSine
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSineCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/CalculateSine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateSineValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateSineCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Sine
     * Calculate the sine value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateSine(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateSineWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Sine
     * Calculate the sine value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateSineWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = calculateSineValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Sine (asynchronously)
     * Calculate the sine value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSineAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateSineValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateSquareRoot
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSquareRootCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/CalculateSquareRoot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateSquareRootValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateSquareRootCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Square Root
     * Calculate the square root of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateSquareRoot(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateSquareRootWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Square Root
     * Calculate the square root of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateSquareRootWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = calculateSquareRootValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Square Root (asynchronously)
     * Calculate the square root of a number
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSquareRootAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateSquareRootValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateSubtraction
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSubtractionCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumbers;

        // create path and map variables
        String localVarPath = "/CalculateSubtraction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateSubtractionValidateBeforeCall(InputCalculateNumbers calculateNumbers, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateSubtractionCall(calculateNumbers, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Subtraction
     * Calculate the difference between two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateSubtraction(InputCalculateNumbers calculateNumbers) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateSubtractionWithHttpInfo(calculateNumbers);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Subtraction
     * Calculate the difference between two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateSubtractionWithHttpInfo(InputCalculateNumbers calculateNumbers) throws ApiException {
        okhttp3.Call localVarCall = calculateSubtractionValidateBeforeCall(calculateNumbers, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Subtraction (asynchronously)
     * Calculate the difference between two numbers
     * @param calculateNumbers Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSubtractionAsync(InputCalculateNumbers calculateNumbers, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateSubtractionValidateBeforeCall(calculateNumbers, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateSum
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSumCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateSeries;

        // create path and map variables
        String localVarPath = "/CalculateSum";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateSumValidateBeforeCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateSumCall(calculateSeries, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate sum
     * Calculate the sum of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateSum(InputCalculateSeries calculateSeries) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateSumWithHttpInfo(calculateSeries);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate sum
     * Calculate the sum of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateSumWithHttpInfo(InputCalculateSeries calculateSeries) throws ApiException {
        okhttp3.Call localVarCall = calculateSumValidateBeforeCall(calculateSeries, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate sum (asynchronously)
     * Calculate the sum of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSumAsync(InputCalculateSeries calculateSeries, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateSumValidateBeforeCall(calculateSeries, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateTangent
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateTangentCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/CalculateTangent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateTangentValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateTangentCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate Tangent
     * Calculate the tangent value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateTangent(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateTangentWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate Tangent
     * Calculate the tangent value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateTangentWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = calculateTangentValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate Tangent (asynchronously)
     * Calculate the tangent value of an angle
     * @param calculateNumber Number calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateTangentAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateTangentValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateVariance
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateVarianceCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateSeries;

        // create path and map variables
        String localVarPath = "/CalculateVariance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateVarianceValidateBeforeCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calculateVarianceCall(calculateSeries, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate variance
     * Calculate the statistical variance of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber calculateVariance(InputCalculateSeries calculateSeries) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = calculateVarianceWithHttpInfo(calculateSeries);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate variance
     * Calculate the statistical variance of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> calculateVarianceWithHttpInfo(InputCalculateSeries calculateSeries) throws ApiException {
        okhttp3.Call localVarCall = calculateVarianceValidateBeforeCall(calculateSeries, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate variance (asynchronously)
     * Calculate the statistical variance of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateVarianceAsync(InputCalculateSeries calculateSeries, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateVarianceValidateBeforeCall(calculateSeries, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertAngle
     * @param convertAngle  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAngleCall(InputConvertAngle convertAngle, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertAngle;

        // create path and map variables
        String localVarPath = "/ConvertAngle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertAngleValidateBeforeCall(InputConvertAngle convertAngle, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertAngleCall(convertAngle, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert angle
     * Convert value from one angle measurement to another
     * @param convertAngle  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertAngle(InputConvertAngle convertAngle) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertAngleWithHttpInfo(convertAngle);
        return localVarResp.getData();
    }

    /**
     * Math - Convert angle
     * Convert value from one angle measurement to another
     * @param convertAngle  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertAngleWithHttpInfo(InputConvertAngle convertAngle) throws ApiException {
        okhttp3.Call localVarCall = convertAngleValidateBeforeCall(convertAngle, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert angle (asynchronously)
     * Convert value from one angle measurement to another
     * @param convertAngle  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAngleAsync(InputConvertAngle convertAngle, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertAngleValidateBeforeCall(convertAngle, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertArea
     * @param convertArea  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAreaCall(InputConvertArea convertArea, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertArea;

        // create path and map variables
        String localVarPath = "/ConvertArea";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertAreaValidateBeforeCall(InputConvertArea convertArea, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertAreaCall(convertArea, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert area
     * Convert value from one area measurement to another
     * @param convertArea  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertArea(InputConvertArea convertArea) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertAreaWithHttpInfo(convertArea);
        return localVarResp.getData();
    }

    /**
     * Math - Convert area
     * Convert value from one area measurement to another
     * @param convertArea  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertAreaWithHttpInfo(InputConvertArea convertArea) throws ApiException {
        okhttp3.Call localVarCall = convertAreaValidateBeforeCall(convertArea, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert area (asynchronously)
     * Convert value from one area measurement to another
     * @param convertArea  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAreaAsync(InputConvertArea convertArea, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertAreaValidateBeforeCall(convertArea, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertDistance
     * @param convertDistance  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertDistanceCall(InputConvertDistance convertDistance, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertDistance;

        // create path and map variables
        String localVarPath = "/ConvertDistance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertDistanceValidateBeforeCall(InputConvertDistance convertDistance, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertDistanceCall(convertDistance, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert distance
     * Convert value from one distance measurement to another
     * @param convertDistance  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertDistance(InputConvertDistance convertDistance) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertDistanceWithHttpInfo(convertDistance);
        return localVarResp.getData();
    }

    /**
     * Math - Convert distance
     * Convert value from one distance measurement to another
     * @param convertDistance  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertDistanceWithHttpInfo(InputConvertDistance convertDistance) throws ApiException {
        okhttp3.Call localVarCall = convertDistanceValidateBeforeCall(convertDistance, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert distance (asynchronously)
     * Convert value from one distance measurement to another
     * @param convertDistance  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertDistanceAsync(InputConvertDistance convertDistance, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertDistanceValidateBeforeCall(convertDistance, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertDuration
     * @param convertDuration  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertDurationCall(InputConvertDuration convertDuration, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertDuration;

        // create path and map variables
        String localVarPath = "/ConvertDuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertDurationValidateBeforeCall(InputConvertDuration convertDuration, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertDurationCall(convertDuration, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert duration
     * Convert value from one duration measurement to another
     * @param convertDuration  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertDuration(InputConvertDuration convertDuration) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertDurationWithHttpInfo(convertDuration);
        return localVarResp.getData();
    }

    /**
     * Math - Convert duration
     * Convert value from one duration measurement to another
     * @param convertDuration  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertDurationWithHttpInfo(InputConvertDuration convertDuration) throws ApiException {
        okhttp3.Call localVarCall = convertDurationValidateBeforeCall(convertDuration, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert duration (asynchronously)
     * Convert value from one duration measurement to another
     * @param convertDuration  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertDurationAsync(InputConvertDuration convertDuration, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertDurationValidateBeforeCall(convertDuration, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertEnergy
     * @param convertEnergy  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertEnergyCall(InputConvertEnergy convertEnergy, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertEnergy;

        // create path and map variables
        String localVarPath = "/ConvertEnergy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertEnergyValidateBeforeCall(InputConvertEnergy convertEnergy, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertEnergyCall(convertEnergy, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert energy
     * Convert value from one energy measurement to another
     * @param convertEnergy  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertEnergy(InputConvertEnergy convertEnergy) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertEnergyWithHttpInfo(convertEnergy);
        return localVarResp.getData();
    }

    /**
     * Math - Convert energy
     * Convert value from one energy measurement to another
     * @param convertEnergy  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertEnergyWithHttpInfo(InputConvertEnergy convertEnergy) throws ApiException {
        okhttp3.Call localVarCall = convertEnergyValidateBeforeCall(convertEnergy, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert energy (asynchronously)
     * Convert value from one energy measurement to another
     * @param convertEnergy  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertEnergyAsync(InputConvertEnergy convertEnergy, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertEnergyValidateBeforeCall(convertEnergy, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertPower
     * @param convertPower  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertPowerCall(InputConvertPower convertPower, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertPower;

        // create path and map variables
        String localVarPath = "/ConvertPower";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertPowerValidateBeforeCall(InputConvertPower convertPower, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertPowerCall(convertPower, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert power
     * Convert value from one power measurement to another
     * @param convertPower  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertPower(InputConvertPower convertPower) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertPowerWithHttpInfo(convertPower);
        return localVarResp.getData();
    }

    /**
     * Math - Convert power
     * Convert value from one power measurement to another
     * @param convertPower  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertPowerWithHttpInfo(InputConvertPower convertPower) throws ApiException {
        okhttp3.Call localVarCall = convertPowerValidateBeforeCall(convertPower, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert power (asynchronously)
     * Convert value from one power measurement to another
     * @param convertPower  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertPowerAsync(InputConvertPower convertPower, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertPowerValidateBeforeCall(convertPower, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertSpeed
     * @param convertSpeed  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertSpeedCall(InputConvertSpeed convertSpeed, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertSpeed;

        // create path and map variables
        String localVarPath = "/ConvertSpeed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertSpeedValidateBeforeCall(InputConvertSpeed convertSpeed, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertSpeedCall(convertSpeed, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert speed
     * Convert value from one speed measurement to another
     * @param convertSpeed  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertSpeed(InputConvertSpeed convertSpeed) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertSpeedWithHttpInfo(convertSpeed);
        return localVarResp.getData();
    }

    /**
     * Math - Convert speed
     * Convert value from one speed measurement to another
     * @param convertSpeed  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertSpeedWithHttpInfo(InputConvertSpeed convertSpeed) throws ApiException {
        okhttp3.Call localVarCall = convertSpeedValidateBeforeCall(convertSpeed, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert speed (asynchronously)
     * Convert value from one speed measurement to another
     * @param convertSpeed  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertSpeedAsync(InputConvertSpeed convertSpeed, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertSpeedValidateBeforeCall(convertSpeed, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertTemperature
     * @param convertTemperature  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertTemperatureCall(InputConvertTemperature convertTemperature, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertTemperature;

        // create path and map variables
        String localVarPath = "/ConvertTemperature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertTemperatureValidateBeforeCall(InputConvertTemperature convertTemperature, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertTemperatureCall(convertTemperature, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert temperature
     * Convert value from one temperature measurement to another
     * @param convertTemperature  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertTemperature(InputConvertTemperature convertTemperature) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertTemperatureWithHttpInfo(convertTemperature);
        return localVarResp.getData();
    }

    /**
     * Math - Convert temperature
     * Convert value from one temperature measurement to another
     * @param convertTemperature  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertTemperatureWithHttpInfo(InputConvertTemperature convertTemperature) throws ApiException {
        okhttp3.Call localVarCall = convertTemperatureValidateBeforeCall(convertTemperature, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert temperature (asynchronously)
     * Convert value from one temperature measurement to another
     * @param convertTemperature  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertTemperatureAsync(InputConvertTemperature convertTemperature, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertTemperatureValidateBeforeCall(convertTemperature, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertVolume
     * @param convertVolume  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVolumeCall(InputConvertVolume convertVolume, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertVolume;

        // create path and map variables
        String localVarPath = "/ConvertVolume";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertVolumeValidateBeforeCall(InputConvertVolume convertVolume, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertVolumeCall(convertVolume, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert volume
     * Convert value from one volume measurement to another
     * @param convertVolume  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertVolume(InputConvertVolume convertVolume) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertVolumeWithHttpInfo(convertVolume);
        return localVarResp.getData();
    }

    /**
     * Math - Convert volume
     * Convert value from one volume measurement to another
     * @param convertVolume  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertVolumeWithHttpInfo(InputConvertVolume convertVolume) throws ApiException {
        okhttp3.Call localVarCall = convertVolumeValidateBeforeCall(convertVolume, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert volume (asynchronously)
     * Convert value from one volume measurement to another
     * @param convertVolume  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertVolumeAsync(InputConvertVolume convertVolume, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertVolumeValidateBeforeCall(convertVolume, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertWeight
     * @param convertWeight  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertWeightCall(InputConvertWeight convertWeight, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = convertWeight;

        // create path and map variables
        String localVarPath = "/ConvertWeight";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertWeightValidateBeforeCall(InputConvertWeight convertWeight, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = convertWeightCall(convertWeight, _callback);
        return localVarCall;

    }

    /**
     * Math - Convert weight
     * Convert value from one weight measurement to another
     * @param convertWeight  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber convertWeight(InputConvertWeight convertWeight) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = convertWeightWithHttpInfo(convertWeight);
        return localVarResp.getData();
    }

    /**
     * Math - Convert weight
     * Convert value from one weight measurement to another
     * @param convertWeight  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> convertWeightWithHttpInfo(InputConvertWeight convertWeight) throws ApiException {
        okhttp3.Call localVarCall = convertWeightValidateBeforeCall(convertWeight, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Convert weight (asynchronously)
     * Convert value from one weight measurement to another
     * @param convertWeight  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertWeightAsync(InputConvertWeight convertWeight, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertWeightValidateBeforeCall(convertWeight, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for randomNumber
     * @param numberRange  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomNumberCall(InputNumberRange numberRange, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = numberRange;

        // create path and map variables
        String localVarPath = "/RandomNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomNumberValidateBeforeCall(InputNumberRange numberRange, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = randomNumberCall(numberRange, _callback);
        return localVarCall;

    }

    /**
     * Math - Random number
     * Generate a random number within a specified range
     * @param numberRange  (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber randomNumber(InputNumberRange numberRange) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = randomNumberWithHttpInfo(numberRange);
        return localVarResp.getData();
    }

    /**
     * Math - Random number
     * Generate a random number within a specified range
     * @param numberRange  (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> randomNumberWithHttpInfo(InputNumberRange numberRange) throws ApiException {
        okhttp3.Call localVarCall = randomNumberValidateBeforeCall(numberRange, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Random number (asynchronously)
     * Generate a random number within a specified range
     * @param numberRange  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call randomNumberAsync(InputNumberRange numberRange, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomNumberValidateBeforeCall(numberRange, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roundNumber
     * @param calculateNumber Numeric calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roundNumberCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateNumber;

        // create path and map variables
        String localVarPath = "/RoundNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roundNumberValidateBeforeCall(InputCalculateNumber calculateNumber, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = roundNumberCall(calculateNumber, _callback);
        return localVarCall;

    }

    /**
     * Math - Round number
     * Round a numeric value up or down
     * @param calculateNumber Numeric calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber roundNumber(InputCalculateNumber calculateNumber) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = roundNumberWithHttpInfo(calculateNumber);
        return localVarResp.getData();
    }

    /**
     * Math - Round number
     * Round a numeric value up or down
     * @param calculateNumber Numeric calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> roundNumberWithHttpInfo(InputCalculateNumber calculateNumber) throws ApiException {
        okhttp3.Call localVarCall = roundNumberValidateBeforeCall(calculateNumber, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Round number (asynchronously)
     * Round a numeric value up or down
     * @param calculateNumber Numeric calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roundNumberAsync(InputCalculateNumber calculateNumber, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = roundNumberValidateBeforeCall(calculateNumber, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for standardDeviation
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call standardDeviationCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = calculateSeries;

        // create path and map variables
        String localVarPath = "/StandardDeviation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call standardDeviationValidateBeforeCall(InputCalculateSeries calculateSeries, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = standardDeviationCall(calculateSeries, _callback);
        return localVarCall;

    }

    /**
     * Math - Calculate standard deviation
     * Calculate the standard deviation of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return OutputNumber
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public OutputNumber standardDeviation(InputCalculateSeries calculateSeries) throws ApiException {
        ApiResponse<OutputNumber> localVarResp = standardDeviationWithHttpInfo(calculateSeries);
        return localVarResp.getData();
    }

    /**
     * Math - Calculate standard deviation
     * Calculate the standard deviation of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @return ApiResponse&lt;OutputNumber&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OutputNumber> standardDeviationWithHttpInfo(InputCalculateSeries calculateSeries) throws ApiException {
        okhttp3.Call localVarCall = standardDeviationValidateBeforeCall(calculateSeries, null);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Math - Calculate standard deviation (asynchronously)
     * Calculate the standard deviation of two or more numbers
     * @param calculateSeries Series calculation parameters (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> ERROR </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call standardDeviationAsync(InputCalculateSeries calculateSeries, final ApiCallback<OutputNumber> _callback) throws ApiException {

        okhttp3.Call localVarCall = standardDeviationValidateBeforeCall(calculateSeries, _callback);
        Type localVarReturnType = new TypeToken<OutputNumber>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
