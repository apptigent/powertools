//
// DataAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DataAPI {
    /**
     Data - CSV to JSON
     
     - parameter csvConversionJSON: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func csvToJson(csvConversionJSON: InputCsvConversionJSON? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        csvToJsonWithRequestBuilder(csvConversionJSON: csvConversionJSON).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - CSV to JSON
     - POST /CSVtoJSON
     - Convert a CSV string to a JSON array
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter csvConversionJSON: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func csvToJsonWithRequestBuilder(csvConversionJSON: InputCsvConversionJSON? = nil) -> RequestBuilder<OutputString> {
        let path = "/CSVtoJSON"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: csvConversionJSON)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Data - JSON to CSV
     
     - parameter jsonConversionCSV: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jsonToCsv(jsonConversionCSV: InputJsonConversionCSV? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        jsonToCsvWithRequestBuilder(jsonConversionCSV: jsonConversionCSV).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - JSON to CSV
     - POST /JSONtoCSV
     - Convert a JSON array to CSV string
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter jsonConversionCSV: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func jsonToCsvWithRequestBuilder(jsonConversionCSV: InputJsonConversionCSV? = nil) -> RequestBuilder<OutputString> {
        let path = "/JSONtoCSV"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonConversionCSV)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Data - JSON to HTML Table
     
     - parameter jsonConversionHTML: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jsonToHtml(jsonConversionHTML: InputJsonConversionHTML? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        jsonToHtmlWithRequestBuilder(jsonConversionHTML: jsonConversionHTML).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - JSON to HTML Table
     - POST /JSONtoHTML
     - Convert a JSON array to an HTML table
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter jsonConversionHTML: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func jsonToHtmlWithRequestBuilder(jsonConversionHTML: InputJsonConversionHTML? = nil) -> RequestBuilder<OutputString> {
        let path = "/JSONtoHTML"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonConversionHTML)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Data - JSON to XML
     
     - parameter jsonConversionXML: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jsonToXml(jsonConversionXML: InputJsonConversionXML? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        jsonToXmlWithRequestBuilder(jsonConversionXML: jsonConversionXML).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - JSON to XML
     - POST /JSONtoXML
     - Convert a JSON object to an XML string
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter jsonConversionXML: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func jsonToXmlWithRequestBuilder(jsonConversionXML: InputJsonConversionXML? = nil) -> RequestBuilder<OutputString> {
        let path = "/JSONtoXML"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonConversionXML)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Data - Query JSON
     
     - parameter inputDataQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryJson(inputDataQuery: InputDataQuery? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        queryJsonWithRequestBuilder(inputDataQuery: inputDataQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - Query JSON
     - POST /QueryJSON
     - Query a JSON object using a JSONPath expression
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter inputDataQuery: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func queryJsonWithRequestBuilder(inputDataQuery: InputDataQuery? = nil) -> RequestBuilder<OutputString> {
        let path = "/QueryJSON"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inputDataQuery)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Data - Query XML
     
     - parameter inputDataQuery: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func queryXml(inputDataQuery: InputDataQuery? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        queryXmlWithRequestBuilder(inputDataQuery: inputDataQuery).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - Query XML
     - POST /QueryXML
     - Query an XML string using an XPath expression
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter inputDataQuery: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func queryXmlWithRequestBuilder(inputDataQuery: InputDataQuery? = nil) -> RequestBuilder<OutputString> {
        let path = "/QueryXML"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inputDataQuery)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Data - XML to JSON
     
     - parameter xmlConversionJSON: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func xmlToJson(xmlConversionJSON: InputXmlConversionJSON? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        xmlToJsonWithRequestBuilder(xmlConversionJSON: xmlConversionJSON).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Data - XML to JSON
     - POST /XMLtoJSON
     - Convert an XML string to a JSON object
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter xmlConversionJSON: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func xmlToJsonWithRequestBuilder(xmlConversionJSON: InputXmlConversionJSON? = nil) -> RequestBuilder<OutputString> {
        let path = "/XMLtoJSON"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: xmlConversionJSON)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
