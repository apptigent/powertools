//
// DateTimeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DateTimeAPI {
    /**
     DateTime - DateTime difference
     
     - parameter dateTimeDifference: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dateTimeDifference(dateTimeDifference: InputDateTimeDifference? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputDateDifference?,_ error: Error?) -> Void)) {
        dateTimeDifferenceWithRequestBuilder(dateTimeDifference: dateTimeDifference).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     DateTime - DateTime difference
     - POST /DateTimeDifference
     - Calculate the difference between two dates
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter dateTimeDifference: (body)  (optional)
     - returns: RequestBuilder<OutputDateDifference> 
     */
    open class func dateTimeDifferenceWithRequestBuilder(dateTimeDifference: InputDateTimeDifference? = nil) -> RequestBuilder<OutputDateDifference> {
        let path = "/DateTimeDifference"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dateTimeDifference)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputDateDifference>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     DateTime - Get date and time information
     
     - parameter dateTimeInfo: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dateTimeInfo(dateTimeInfo: InputDateTimeInfo? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputDateInfo?,_ error: Error?) -> Void)) {
        dateTimeInfoWithRequestBuilder(dateTimeInfo: dateTimeInfo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     DateTime - Get date and time information
     - POST /DateTimeInfo
     - Retrieve useful date and time information, such as day of year, total seconds and ticks
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter dateTimeInfo: (body)  (optional)
     - returns: RequestBuilder<OutputDateInfo> 
     */
    open class func dateTimeInfoWithRequestBuilder(dateTimeInfo: InputDateTimeInfo? = nil) -> RequestBuilder<OutputDateInfo> {
        let path = "/DateTimeInfo"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dateTimeInfo)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputDateInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     DateTime - Format date and time
     
     - parameter dateTimeFormat: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func formatDateTime(dateTimeFormat: InputDateTimeFormat? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        formatDateTimeWithRequestBuilder(dateTimeFormat: dateTimeFormat).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     DateTime - Format date and time
     - POST /FormatDateTime
     - Create a date/time string in a specific format
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter dateTimeFormat: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func formatDateTimeWithRequestBuilder(dateTimeFormat: InputDateTimeFormat? = nil) -> RequestBuilder<OutputString> {
        let path = "/FormatDateTime"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dateTimeFormat)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     DateTime - Get world time
     
     - parameter dateTimeConversion: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func worldTime(dateTimeConversion: InputDateTimeConversion? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        worldTimeWithRequestBuilder(dateTimeConversion: dateTimeConversion).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     DateTime - Get world time
     - POST /WorldTime
     - Convert date and time from one time zone to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter dateTimeConversion: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func worldTimeWithRequestBuilder(dateTimeConversion: InputDateTimeConversion? = nil) -> RequestBuilder<OutputString> {
        let path = "/WorldTime"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dateTimeConversion)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
