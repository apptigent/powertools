//
// MathAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class MathAPI {
    /**
     Math - Calculate Absolute
     
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateAbsolute(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateAbsoluteWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Absolute
     - POST /CalculateAbsolute
     - Calculate the absolute value of a number
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateAbsoluteWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateAbsolute"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Addition
     
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateAddition(calculateNumbers: InputCalculateNumbers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateAdditionWithRequestBuilder(calculateNumbers: calculateNumbers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Addition
     - POST /CalculateAddition
     - Calculate the sum of two numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateAdditionWithRequestBuilder(calculateNumbers: InputCalculateNumbers? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateAddition"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumbers)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate average
     
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateAverage(calculateSeries: InputCalculateSeries? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateAverageWithRequestBuilder(calculateSeries: calculateSeries).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate average
     - POST /CalculateAverage
     - Calculate the average of two or more numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateAverageWithRequestBuilder(calculateSeries: InputCalculateSeries? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateAverage"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateSeries)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Cosine
     
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateCosine(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateCosineWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Cosine
     - POST /CalculateCosine
     - Calculate the cosine value of an angle
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateCosineWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateCosine"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Division
     
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateDivision(calculateNumbers: InputCalculateNumbers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateDivisionWithRequestBuilder(calculateNumbers: calculateNumbers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Division
     - POST /CalculateDivision
     - Calculate the quotient of two numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateDivisionWithRequestBuilder(calculateNumbers: InputCalculateNumbers? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateDivision"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumbers)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Logarithm
     
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateLogarithm(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateLogarithmWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Logarithm
     - POST /CalculateLogarithm
     - Calculate the logarithm of a number
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateLogarithmWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateLogarithm"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate median
     
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateMedian(calculateSeries: InputCalculateSeries? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateMedianWithRequestBuilder(calculateSeries: calculateSeries).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate median
     - POST /CalculateMedian
     - Calculate the median of two or more numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateMedianWithRequestBuilder(calculateSeries: InputCalculateSeries? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateMedian"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateSeries)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate minimum or maximum
     
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateMinMax(calculateSeries: InputCalculateMinMax? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateMinMaxWithRequestBuilder(calculateSeries: calculateSeries).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate minimum or maximum
     - POST /CalculateMinMax
     - Calculate the minimum or maximum value in a sequence of numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateMinMaxWithRequestBuilder(calculateSeries: InputCalculateMinMax? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateMinMax"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateSeries)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Modulo
     
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateModulo(calculateNumbers: InputCalculateNumbers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateModuloWithRequestBuilder(calculateNumbers: calculateNumbers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Modulo
     - POST /CalculateModulo
     - Calculate the remainder of dividing two numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateModuloWithRequestBuilder(calculateNumbers: InputCalculateNumbers? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateModulo"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumbers)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Multiplication
     
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateMultiplication(calculateNumbers: InputCalculateNumbers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateMultiplicationWithRequestBuilder(calculateNumbers: calculateNumbers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Multiplication
     - POST /CalculateMultiplication
     - Calculate the product of two numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateMultiplicationWithRequestBuilder(calculateNumbers: InputCalculateNumbers? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateMultiplication"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumbers)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Nth Root
     
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateNthRoot(calculateNumbers: InputCalculateNumbers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateNthRootWithRequestBuilder(calculateNumbers: calculateNumbers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Nth Root
     - POST /CalculateNthRoot
     - Calculate the n-th root of a number
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateNthRootWithRequestBuilder(calculateNumbers: InputCalculateNumbers? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateNthRoot"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumbers)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate power
     
     - parameter calculatePower: (body) Power calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculatePower(calculatePower: InputCalculatePower? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculatePowerWithRequestBuilder(calculatePower: calculatePower).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate power
     - POST /CalculatePower
     - Raise number to a specified power
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculatePower: (body) Power calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculatePowerWithRequestBuilder(calculatePower: InputCalculatePower? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculatePower"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculatePower)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Sine
     
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateSine(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateSineWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Sine
     - POST /CalculateSine
     - Calculate the sine value of an angle
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateSineWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateSine"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Square Root
     
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateSquareRoot(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateSquareRootWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Square Root
     - POST /CalculateSquareRoot
     - Calculate the square root of a number
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateSquareRootWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateSquareRoot"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Subtraction
     
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateSubtraction(calculateNumbers: InputCalculateNumbers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateSubtractionWithRequestBuilder(calculateNumbers: calculateNumbers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Subtraction
     - POST /CalculateSubtraction
     - Calculate the difference between two numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumbers: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateSubtractionWithRequestBuilder(calculateNumbers: InputCalculateNumbers? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateSubtraction"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumbers)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate sum
     
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateSum(calculateSeries: InputCalculateSeries? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateSumWithRequestBuilder(calculateSeries: calculateSeries).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate sum
     - POST /CalculateSum
     - Calculate the sum of two or more numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateSumWithRequestBuilder(calculateSeries: InputCalculateSeries? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateSum"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateSeries)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate Tangent
     
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateTangent(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateTangentWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate Tangent
     - POST /CalculateTangent
     - Calculate the tangent value of an angle
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Number calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateTangentWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateTangent"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate variance
     
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func calculateVariance(calculateSeries: InputCalculateSeries? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        calculateVarianceWithRequestBuilder(calculateSeries: calculateSeries).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate variance
     - POST /CalculateVariance
     - Calculate the statistical variance of two or more numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func calculateVarianceWithRequestBuilder(calculateSeries: InputCalculateSeries? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CalculateVariance"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateSeries)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert angle
     
     - parameter convertAngle: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertAngle(convertAngle: InputConvertAngle? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertAngleWithRequestBuilder(convertAngle: convertAngle).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert angle
     - POST /ConvertAngle
     - Convert value from one angle measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertAngle: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertAngleWithRequestBuilder(convertAngle: InputConvertAngle? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertAngle"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertAngle)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert area
     
     - parameter convertArea: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertArea(convertArea: InputConvertArea? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertAreaWithRequestBuilder(convertArea: convertArea).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert area
     - POST /ConvertArea
     - Convert value from one area measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertArea: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertAreaWithRequestBuilder(convertArea: InputConvertArea? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertArea"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertArea)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert distance
     
     - parameter convertDistance: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertDistance(convertDistance: InputConvertDistance? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertDistanceWithRequestBuilder(convertDistance: convertDistance).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert distance
     - POST /ConvertDistance
     - Convert value from one distance measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertDistance: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertDistanceWithRequestBuilder(convertDistance: InputConvertDistance? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertDistance"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertDistance)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert duration
     
     - parameter convertDuration: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertDuration(convertDuration: InputConvertDuration? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertDurationWithRequestBuilder(convertDuration: convertDuration).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert duration
     - POST /ConvertDuration
     - Convert value from one duration measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertDuration: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertDurationWithRequestBuilder(convertDuration: InputConvertDuration? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertDuration"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertDuration)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert energy
     
     - parameter convertEnergy: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertEnergy(convertEnergy: InputConvertEnergy? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertEnergyWithRequestBuilder(convertEnergy: convertEnergy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert energy
     - POST /ConvertEnergy
     - Convert value from one energy measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertEnergy: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertEnergyWithRequestBuilder(convertEnergy: InputConvertEnergy? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertEnergy"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertEnergy)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert power
     
     - parameter convertPower: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertPower(convertPower: InputConvertPower? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertPowerWithRequestBuilder(convertPower: convertPower).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert power
     - POST /ConvertPower
     - Convert value from one power measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertPower: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertPowerWithRequestBuilder(convertPower: InputConvertPower? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertPower"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertPower)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert speed
     
     - parameter convertSpeed: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertSpeed(convertSpeed: InputConvertSpeed? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertSpeedWithRequestBuilder(convertSpeed: convertSpeed).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert speed
     - POST /ConvertSpeed
     - Convert value from one speed measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertSpeed: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertSpeedWithRequestBuilder(convertSpeed: InputConvertSpeed? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertSpeed"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertSpeed)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert temperature
     
     - parameter convertTemperature: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertTemperature(convertTemperature: InputConvertTemperature? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertTemperatureWithRequestBuilder(convertTemperature: convertTemperature).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert temperature
     - POST /ConvertTemperature
     - Convert value from one temperature measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertTemperature: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertTemperatureWithRequestBuilder(convertTemperature: InputConvertTemperature? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertTemperature"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertTemperature)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert volume
     
     - parameter convertVolume: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertVolume(convertVolume: InputConvertVolume? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertVolumeWithRequestBuilder(convertVolume: convertVolume).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert volume
     - POST /ConvertVolume
     - Convert value from one volume measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertVolume: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertVolumeWithRequestBuilder(convertVolume: InputConvertVolume? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertVolume"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertVolume)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Convert weight
     
     - parameter convertWeight: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func convertWeight(convertWeight: InputConvertWeight? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        convertWeightWithRequestBuilder(convertWeight: convertWeight).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Convert weight
     - POST /ConvertWeight
     - Convert value from one weight measurement to another
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter convertWeight: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func convertWeightWithRequestBuilder(convertWeight: InputConvertWeight? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/ConvertWeight"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: convertWeight)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Random number
     
     - parameter numberRange: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func randomNumber(numberRange: InputNumberRange? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        randomNumberWithRequestBuilder(numberRange: numberRange).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Random number
     - POST /RandomNumber
     - Generate a random number within a specified range
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter numberRange: (body)  (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func randomNumberWithRequestBuilder(numberRange: InputNumberRange? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/RandomNumber"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: numberRange)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Round number
     
     - parameter calculateNumber: (body) Numeric calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func roundNumber(calculateNumber: InputCalculateNumber? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        roundNumberWithRequestBuilder(calculateNumber: calculateNumber).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Round number
     - POST /RoundNumber
     - Round a numeric value up or down
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateNumber: (body) Numeric calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func roundNumberWithRequestBuilder(calculateNumber: InputCalculateNumber? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/RoundNumber"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateNumber)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Math - Calculate standard deviation
     
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func standardDeviation(calculateSeries: InputCalculateSeries? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        standardDeviationWithRequestBuilder(calculateSeries: calculateSeries).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Math - Calculate standard deviation
     - POST /StandardDeviation
     - Calculate the standard deviation of two or more numbers
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter calculateSeries: (body) Series calculation parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func standardDeviationWithRequestBuilder(calculateSeries: InputCalculateSeries? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/StandardDeviation"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: calculateSeries)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
