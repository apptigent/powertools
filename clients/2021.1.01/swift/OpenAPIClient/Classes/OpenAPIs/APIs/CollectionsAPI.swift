//
// CollectionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CollectionsAPI {
    /**
     Collections - Add to collection
     
     - parameter collectionModify: (body) Collection modification parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addToCollection(collectionModify: InputCollectionModify? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionResult?,_ error: Error?) -> Void)) {
        addToCollectionWithRequestBuilder(collectionModify: collectionModify).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Add to collection
     - POST /AddToCollection
     - Add an item to a collection
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionModify: (body) Collection modification parameters (optional)
     - returns: RequestBuilder<OutputCollectionResult> 
     */
    open class func addToCollectionWithRequestBuilder(collectionModify: InputCollectionModify? = nil) -> RequestBuilder<OutputCollectionResult> {
        let path = "/AddToCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionModify)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Contains number
     
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func collectionContainsNumber(collectionSearch: InputCollectionSearchNumeric? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionNumber?,_ error: Error?) -> Void)) {
        collectionContainsNumberWithRequestBuilder(collectionSearch: collectionSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Contains number
     - POST /CollectionContainsNumber
     - Determine if a collection contains a specific number
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - returns: RequestBuilder<OutputCollectionNumber> 
     */
    open class func collectionContainsNumberWithRequestBuilder(collectionSearch: InputCollectionSearchNumeric? = nil) -> RequestBuilder<OutputCollectionNumber> {
        let path = "/CollectionContainsNumber"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSearch)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Contains string
     
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func collectionContainsString(collectionSearch: InputCollectionSearch? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionString?,_ error: Error?) -> Void)) {
        collectionContainsStringWithRequestBuilder(collectionSearch: collectionSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Contains string
     - POST /CollectionContainsString
     - Determine if any items in a collection contain a specific string
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - returns: RequestBuilder<OutputCollectionString> 
     */
    open class func collectionContainsStringWithRequestBuilder(collectionSearch: InputCollectionSearch? = nil) -> RequestBuilder<OutputCollectionString> {
        let path = "/CollectionContainsString"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSearch)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Ends with string
     
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func collectionEndsWithString(collectionSearch: InputCollectionSearch? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionString?,_ error: Error?) -> Void)) {
        collectionEndsWithStringWithRequestBuilder(collectionSearch: collectionSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Ends with string
     - POST /CollectionEndsWithString
     - Determine if any items in a collection end with a specific string
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - returns: RequestBuilder<OutputCollectionString> 
     */
    open class func collectionEndsWithStringWithRequestBuilder(collectionSearch: InputCollectionSearch? = nil) -> RequestBuilder<OutputCollectionString> {
        let path = "/CollectionEndsWithString"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSearch)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Starts with string
     
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func collectionStartsWithString(collectionSearch: InputCollectionSearch? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionString?,_ error: Error?) -> Void)) {
        collectionStartsWithStringWithRequestBuilder(collectionSearch: collectionSearch).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Starts with string
     - POST /CollectionStartsWithString
     - Determine if any items in a collection start with a specific string
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionSearch: (body) Collection search parameters (optional)
     - returns: RequestBuilder<OutputCollectionString> 
     */
    open class func collectionStartsWithStringWithRequestBuilder(collectionSearch: InputCollectionSearch? = nil) -> RequestBuilder<OutputCollectionString> {
        let path = "/CollectionStartsWithString"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSearch)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Collection to JSON
     
     - parameter collectionConversion: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func collectionToJSON(collectionConversion: InputCollectionConversion? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        collectionToJSONWithRequestBuilder(collectionConversion: collectionConversion).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Collection to JSON
     - POST /CollectionToJSON
     - Convert a collection to a named JSON object
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionConversion: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func collectionToJSONWithRequestBuilder(collectionConversion: InputCollectionConversion? = nil) -> RequestBuilder<OutputString> {
        let path = "/CollectionToJSON"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionConversion)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Collection to XML
     
     - parameter collectionConversionXML: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func collectionToXml(collectionConversionXML: InputCollectionConversionXML? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputString?,_ error: Error?) -> Void)) {
        collectionToXmlWithRequestBuilder(collectionConversionXML: collectionConversionXML).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Collection to XML
     - POST /CollectionToXML
     - Convert a collection to an XML string
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionConversionXML: (body)  (optional)
     - returns: RequestBuilder<OutputString> 
     */
    open class func collectionToXmlWithRequestBuilder(collectionConversionXML: InputCollectionConversionXML? = nil) -> RequestBuilder<OutputString> {
        let path = "/CollectionToXML"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionConversionXML)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputString>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Count collection
     
     - parameter collectionCount: (body) Count collection parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func countCollection(collectionCount: InputCollectionCount? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputNumber?,_ error: Error?) -> Void)) {
        countCollectionWithRequestBuilder(collectionCount: collectionCount).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Count collection
     - POST /CountCollection
     - Count a collection of items
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionCount: (body) Count collection parameters (optional)
     - returns: RequestBuilder<OutputNumber> 
     */
    open class func countCollectionWithRequestBuilder(collectionCount: InputCollectionCount? = nil) -> RequestBuilder<OutputNumber> {
        let path = "/CountCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionCount)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputNumber>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Filter collection
     
     - parameter collectionFilter: (body) Filter collection parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func filterCollection(collectionFilter: InputCollectionFilter? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionResult?,_ error: Error?) -> Void)) {
        filterCollectionWithRequestBuilder(collectionFilter: collectionFilter).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Filter collection
     - POST /FilterCollection
     - Filter a collection of strings by keyword
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionFilter: (body) Filter collection parameters (optional)
     - returns: RequestBuilder<OutputCollectionResult> 
     */
    open class func filterCollectionWithRequestBuilder(collectionFilter: InputCollectionFilter? = nil) -> RequestBuilder<OutputCollectionResult> {
        let path = "/FilterCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionFilter)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Remove from collection
     
     - parameter collectionModify: (body) Collection modification parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeFromCollection(collectionModify: InputCollectionModify? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionResult?,_ error: Error?) -> Void)) {
        removeFromCollectionWithRequestBuilder(collectionModify: collectionModify).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Remove from collection
     - POST /RemoveFromCollection
     - Remove an item from a collection
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionModify: (body) Collection modification parameters (optional)
     - returns: RequestBuilder<OutputCollectionResult> 
     */
    open class func removeFromCollectionWithRequestBuilder(collectionModify: InputCollectionModify? = nil) -> RequestBuilder<OutputCollectionResult> {
        let path = "/RemoveFromCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionModify)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Replace values in collection
     
     - parameter collectionReplace: (body) Replace values in collection parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceValuesInCollection(collectionReplace: InputCollectionReplace? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionResult?,_ error: Error?) -> Void)) {
        replaceValuesInCollectionWithRequestBuilder(collectionReplace: collectionReplace).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Replace values in collection
     - POST /ReplaceValuesInCollection
     - Replace whole or partial strings in a collection
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionReplace: (body) Replace values in collection parameters (optional)
     - returns: RequestBuilder<OutputCollectionResult> 
     */
    open class func replaceValuesInCollectionWithRequestBuilder(collectionReplace: InputCollectionReplace? = nil) -> RequestBuilder<OutputCollectionResult> {
        let path = "/ReplaceValuesInCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionReplace)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Sort collection
     
     - parameter collectionSort: (body) Sort collection parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sortCollection(collectionSort: InputCollectionSort? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputCollectionResult?,_ error: Error?) -> Void)) {
        sortCollectionWithRequestBuilder(collectionSort: collectionSort).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Sort collection
     - POST /SortCollection
     - Sort a collection of strings
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionSort: (body) Sort collection parameters (optional)
     - returns: RequestBuilder<OutputCollectionResult> 
     */
    open class func sortCollectionWithRequestBuilder(collectionSort: InputCollectionSort? = nil) -> RequestBuilder<OutputCollectionResult> {
        let path = "/SortCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSort)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputCollectionResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Collections - Split collection
     
     - parameter collectionSplit: (body) Split collection parameters (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func splitCollection(collectionSplit: InputCollectionSplit? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OutputMultiCollection?,_ error: Error?) -> Void)) {
        splitCollectionWithRequestBuilder(collectionSplit: collectionSplit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Collections - Split collection
     - POST /SplitCollection
     - Split a collection of items by matching value or index
     - API Key:
       - type: apiKey X-IBM-Client-Id 
       - name: apiKeyHeader
     - parameter collectionSplit: (body) Split collection parameters (optional)
     - returns: RequestBuilder<OutputMultiCollection> 
     */
    open class func splitCollectionWithRequestBuilder(collectionSplit: InputCollectionSplit? = nil) -> RequestBuilder<OutputMultiCollection> {
        let path = "/SplitCollection"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: collectionSplit)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OutputMultiCollection>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
