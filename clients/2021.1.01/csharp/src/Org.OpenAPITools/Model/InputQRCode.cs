/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputQRCode
    /// </summary>
    [DataContract]
    public partial class InputQRCode :  IEquatable<InputQRCode>, IValidatableObject
    {
        /// <summary>
        /// Payload type
        /// </summary>
        /// <value>Payload type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayloadEnum
        {
            /// <summary>
            /// Enum PlainTextstring for value: Plain Text (string)
            /// </summary>
            [EnumMember(Value = "Plain Text (string)")]
            PlainTextstring = 1,

            /// <summary>
            /// Enum BitcoinPaymentaddressamountlabelmessage for value: Bitcoin Payment (address|amount|label|message)
            /// </summary>
            [EnumMember(Value = "Bitcoin Payment (address|amount|label|message)")]
            BitcoinPaymentaddressamountlabelmessage = 2,

            /// <summary>
            /// Enum Bookmarkurltitle for value: Bookmark (url|title)
            /// </summary>
            [EnumMember(Value = "Bookmark (url|title)")]
            Bookmarkurltitle = 3,

            /// <summary>
            /// Enum CalendarEventsubjectdescriptionlocationstartendallDayEventtrueorfalseformatuniversaloriCal for value: Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])
            /// </summary>
            [EnumMember(Value = "Calendar Event (subject|description|location|start|end|allDayEvent['true' or 'false']|format ['universal' or 'iCal'])")]
            CalendarEventsubjectdescriptionlocationstartendallDayEventtrueorfalseformatuniversaloriCal = 4,

            /// <summary>
            /// Enum Geolocationlatitudelongitude for value: Geolocation (latitude|longitude)
            /// </summary>
            [EnumMember(Value = "Geolocation (latitude|longitude)")]
            Geolocationlatitudelongitude = 5,

            /// <summary>
            /// Enum Mailrecipientsubjectmessage for value: Mail (recipient|subject|message)
            /// </summary>
            [EnumMember(Value = "Mail (recipient|subject|message)")]
            Mailrecipientsubjectmessage = 6,

            /// <summary>
            /// Enum PhoneNumberstring for value: Phone Number (string)
            /// </summary>
            [EnumMember(Value = "Phone Number (string)")]
            PhoneNumberstring = 7,

            /// <summary>
            /// Enum SMSnumbermessage for value: SMS (number|message)
            /// </summary>
            [EnumMember(Value = "SMS (number|message)")]
            SMSnumbermessage = 8,

            /// <summary>
            /// Enum URLstring for value: URL (string)
            /// </summary>
            [EnumMember(Value = "URL (string)")]
            URLstring = 9,

            /// <summary>
            /// Enum WiFissidpasswordauthenticationModeWEPWPAorWPA2 for value: WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])
            /// </summary>
            [EnumMember(Value = "WiFi (ssid|password|authenticationMode ['WEP', 'WPA' or 'WPA2'])")]
            WiFissidpasswordauthenticationModeWEPWPAorWPA2 = 10

        }

        /// <summary>
        /// Payload type
        /// </summary>
        /// <value>Payload type</value>
        [DataMember(Name="payload", EmitDefaultValue=true)]
        public PayloadEnum Payload { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputQRCode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputQRCode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputQRCode" /> class.
        /// </summary>
        /// <param name="input">Text value(s) (vertical bar delimited by type) (required).</param>
        /// <param name="payload">Payload type (required) (default to PayloadEnum.PlainTextstring).</param>
        public InputQRCode(string input = default(string), PayloadEnum payload = PayloadEnum.PlainTextstring)
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputQRCode and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            // to ensure "payload" is required (not null)
            if (payload == null)
            {
                throw new InvalidDataException("payload is a required property for InputQRCode and cannot be null");
            }
            else
            {
                this.Payload = payload;
            }
            
        }
        
        /// <summary>
        /// Text value(s) (vertical bar delimited by type)
        /// </summary>
        /// <value>Text value(s) (vertical bar delimited by type)</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public string Input { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputQRCode {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputQRCode);
        }

        /// <summary>
        /// Returns true if InputQRCode instances are equal
        /// </summary>
        /// <param name="input">Instance of InputQRCode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputQRCode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Payload == input.Payload ||
                    (this.Payload != null &&
                    this.Payload.Equals(input.Payload))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Payload != null)
                    hashCode = hashCode * 59 + this.Payload.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
