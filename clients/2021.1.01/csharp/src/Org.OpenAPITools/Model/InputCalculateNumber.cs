/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputCalculateNumber
    /// </summary>
    [DataContract]
    public partial class InputCalculateNumber :  IEquatable<InputCalculateNumber>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCalculateNumber" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputCalculateNumber() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCalculateNumber" /> class.
        /// </summary>
        /// <param name="input">Numeric value to calculate (required).</param>
        /// <param name="decimals">Round to number of decimal places (required).</param>
        public InputCalculateNumber(decimal input = default(decimal), decimal decimals = default(decimal))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputCalculateNumber and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            // to ensure "decimals" is required (not null)
            if (decimals == null)
            {
                throw new InvalidDataException("decimals is a required property for InputCalculateNumber and cannot be null");
            }
            else
            {
                this.Decimals = decimals;
            }
            
        }
        
        /// <summary>
        /// Numeric value to calculate
        /// </summary>
        /// <value>Numeric value to calculate</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public decimal Input { get; set; }

        /// <summary>
        /// Round to number of decimal places
        /// </summary>
        /// <value>Round to number of decimal places</value>
        [DataMember(Name="decimals", EmitDefaultValue=true)]
        public decimal Decimals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCalculateNumber {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputCalculateNumber);
        }

        /// <summary>
        /// Returns true if InputCalculateNumber instances are equal
        /// </summary>
        /// <param name="input">Instance of InputCalculateNumber to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCalculateNumber input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Decimals != null)
                    hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Decimals (decimal) minimum
            if(this.Decimals < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Decimals, must be a value greater than or equal to 0.", new [] { "Decimals" });
            }

            yield break;
        }
    }

}
