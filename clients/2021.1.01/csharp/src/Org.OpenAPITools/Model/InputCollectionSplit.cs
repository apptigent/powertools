/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputCollectionSplit
    /// </summary>
    [DataContract]
    public partial class InputCollectionSplit :  IEquatable<InputCollectionSplit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionSplit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputCollectionSplit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionSplit" /> class.
        /// </summary>
        /// <param name="input">Collection of items to split (required).</param>
        /// <param name="match">String to match (explicit, case-insensitive, leave empty to use Index).</param>
        /// <param name="index">Index location to split (leave empty to use Match value).</param>
        public InputCollectionSplit(List<string> input = default(List<string>), string match = default(string), string index = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputCollectionSplit and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            this.Match = match;
            this.Index = index;
        }
        
        /// <summary>
        /// Collection of items to split
        /// </summary>
        /// <value>Collection of items to split</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public List<string> Input { get; set; }

        /// <summary>
        /// String to match (explicit, case-insensitive, leave empty to use Index)
        /// </summary>
        /// <value>String to match (explicit, case-insensitive, leave empty to use Index)</value>
        [DataMember(Name="match", EmitDefaultValue=false)]
        public string Match { get; set; }

        /// <summary>
        /// Index location to split (leave empty to use Match value)
        /// </summary>
        /// <value>Index location to split (leave empty to use Match value)</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public string Index { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCollectionSplit {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputCollectionSplit);
        }

        /// <summary>
        /// Returns true if InputCollectionSplit instances are equal
        /// </summary>
        /// <param name="input">Instance of InputCollectionSplit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCollectionSplit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
