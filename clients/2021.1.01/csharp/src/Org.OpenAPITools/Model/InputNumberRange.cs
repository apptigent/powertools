/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputNumberRange
    /// </summary>
    [DataContract]
    public partial class InputNumberRange :  IEquatable<InputNumberRange>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputNumberRange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputNumberRange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputNumberRange" /> class.
        /// </summary>
        /// <param name="start">Start of range (required).</param>
        /// <param name="end">End of range (required).</param>
        public InputNumberRange(decimal start = default(decimal), decimal end = default(decimal))
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new InvalidDataException("start is a required property for InputNumberRange and cannot be null");
            }
            else
            {
                this.Start = start;
            }
            
            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new InvalidDataException("end is a required property for InputNumberRange and cannot be null");
            }
            else
            {
                this.End = end;
            }
            
        }
        
        /// <summary>
        /// Start of range
        /// </summary>
        /// <value>Start of range</value>
        [DataMember(Name="start", EmitDefaultValue=true)]
        public decimal Start { get; set; }

        /// <summary>
        /// End of range
        /// </summary>
        /// <value>End of range</value>
        [DataMember(Name="end", EmitDefaultValue=true)]
        public decimal End { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputNumberRange {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputNumberRange);
        }

        /// <summary>
        /// Returns true if InputNumberRange instances are equal
        /// </summary>
        /// <param name="input">Instance of InputNumberRange to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputNumberRange input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Start (decimal) minimum
            if(this.Start < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Start, must be a value greater than or equal to 0.", new [] { "Start" });
            }


            
            // End (decimal) minimum
            if(this.End < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for End, must be a value greater than or equal to 0.", new [] { "End" });
            }

            yield break;
        }
    }

}
