/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputCollectionFilter
    /// </summary>
    [DataContract]
    public partial class InputCollectionFilter :  IEquatable<InputCollectionFilter>, IValidatableObject
    {
        /// <summary>
        /// Match type
        /// </summary>
        /// <value>Match type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            [EnumMember(Value = "Any")]
            Any = 1,

            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 2,

            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 3

        }

        /// <summary>
        /// Match type
        /// </summary>
        /// <value>Match type</value>
        [DataMember(Name="match", EmitDefaultValue=true)]
        public MatchEnum Match { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputCollectionFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCollectionFilter" /> class.
        /// </summary>
        /// <param name="input">Collection of strings to filter (required).</param>
        /// <param name="match">Match type (required) (default to MatchEnum.Any).</param>
        /// <param name="keywords">Keywords (separate multiple values with commas) (required).</param>
        public InputCollectionFilter(List<string> input = default(List<string>), MatchEnum match = MatchEnum.Any, string keywords = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputCollectionFilter and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            // to ensure "match" is required (not null)
            if (match == null)
            {
                throw new InvalidDataException("match is a required property for InputCollectionFilter and cannot be null");
            }
            else
            {
                this.Match = match;
            }
            
            // to ensure "keywords" is required (not null)
            if (keywords == null)
            {
                throw new InvalidDataException("keywords is a required property for InputCollectionFilter and cannot be null");
            }
            else
            {
                this.Keywords = keywords;
            }
            
        }
        
        /// <summary>
        /// Collection of strings to filter
        /// </summary>
        /// <value>Collection of strings to filter</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public List<string> Input { get; set; }


        /// <summary>
        /// Keywords (separate multiple values with commas)
        /// </summary>
        /// <value>Keywords (separate multiple values with commas)</value>
        [DataMember(Name="keywords", EmitDefaultValue=true)]
        public string Keywords { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCollectionFilter {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputCollectionFilter);
        }

        /// <summary>
        /// Returns true if InputCollectionFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of InputCollectionFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCollectionFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.Match == input.Match ||
                    (this.Match != null &&
                    this.Match.Equals(input.Match))
                ) && 
                (
                    this.Keywords == input.Keywords ||
                    (this.Keywords != null &&
                    this.Keywords.Equals(input.Keywords))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Match != null)
                    hashCode = hashCode * 59 + this.Match.GetHashCode();
                if (this.Keywords != null)
                    hashCode = hashCode * 59 + this.Keywords.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
