/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputGenerateUniqueID
    /// </summary>
    [DataContract]
    public partial class InputGenerateUniqueID :  IEquatable<InputGenerateUniqueID>, IValidatableObject
    {
        /// <summary>
        /// All uppercase alpha characters
        /// </summary>
        /// <value>All uppercase alpha characters</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UppercaseEnum
        {
            /// <summary>
            /// Enum True for value: True
            /// </summary>
            [EnumMember(Value = "True")]
            True = 1,

            /// <summary>
            /// Enum False for value: False
            /// </summary>
            [EnumMember(Value = "False")]
            False = 2

        }

        /// <summary>
        /// All uppercase alpha characters
        /// </summary>
        /// <value>All uppercase alpha characters</value>
        [DataMember(Name="uppercase", EmitDefaultValue=true)]
        public UppercaseEnum Uppercase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputGenerateUniqueID" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputGenerateUniqueID() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputGenerateUniqueID" /> class.
        /// </summary>
        /// <param name="uppercase">All uppercase alpha characters (required).</param>
        public InputGenerateUniqueID(UppercaseEnum uppercase = default(UppercaseEnum))
        {
            // to ensure "uppercase" is required (not null)
            if (uppercase == null)
            {
                throw new InvalidDataException("uppercase is a required property for InputGenerateUniqueID and cannot be null");
            }
            else
            {
                this.Uppercase = uppercase;
            }
            
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputGenerateUniqueID {\n");
            sb.Append("  Uppercase: ").Append(Uppercase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputGenerateUniqueID);
        }

        /// <summary>
        /// Returns true if InputGenerateUniqueID instances are equal
        /// </summary>
        /// <param name="input">Instance of InputGenerateUniqueID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputGenerateUniqueID input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uppercase == input.Uppercase ||
                    (this.Uppercase != null &&
                    this.Uppercase.Equals(input.Uppercase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uppercase != null)
                    hashCode = hashCode * 59 + this.Uppercase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
