/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputCalculateMinMax
    /// </summary>
    [DataContract]
    public partial class InputCalculateMinMax :  IEquatable<InputCalculateMinMax>, IValidatableObject
    {
        /// <summary>
        /// Minimum or Maximum
        /// </summary>
        /// <value>Minimum or Maximum</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Minimum for value: Minimum
            /// </summary>
            [EnumMember(Value = "Minimum")]
            Minimum = 1,

            /// <summary>
            /// Enum Maximum for value: Maximum
            /// </summary>
            [EnumMember(Value = "Maximum")]
            Maximum = 2

        }

        /// <summary>
        /// Minimum or Maximum
        /// </summary>
        /// <value>Minimum or Maximum</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCalculateMinMax" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputCalculateMinMax() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputCalculateMinMax" /> class.
        /// </summary>
        /// <param name="input">Colllection of values to calculate (required).</param>
        /// <param name="type">Minimum or Maximum (required) (default to TypeEnum.Minimum).</param>
        public InputCalculateMinMax(List<decimal> input = default(List<decimal>), TypeEnum type = TypeEnum.Minimum)
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputCalculateMinMax and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InputCalculateMinMax and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            
        }
        
        /// <summary>
        /// Colllection of values to calculate
        /// </summary>
        /// <value>Colllection of values to calculate</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public List<decimal> Input { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputCalculateMinMax {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputCalculateMinMax);
        }

        /// <summary>
        /// Returns true if InputCalculateMinMax instances are equal
        /// </summary>
        /// <param name="input">Instance of InputCalculateMinMax to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputCalculateMinMax input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    this.Input != null &&
                    input.Input != null &&
                    this.Input.SequenceEqual(input.Input)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
