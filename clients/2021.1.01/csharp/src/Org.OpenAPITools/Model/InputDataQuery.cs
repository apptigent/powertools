/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputDataQuery
    /// </summary>
    [DataContract]
    public partial class InputDataQuery :  IEquatable<InputDataQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputDataQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputDataQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputDataQuery" /> class.
        /// </summary>
        /// <param name="input">XML or JSON string (required).</param>
        /// <param name="query">XPath or JSONPath query (required).</param>
        public InputDataQuery(string input = default(string), string query = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputDataQuery and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new InvalidDataException("query is a required property for InputDataQuery and cannot be null");
            }
            else
            {
                this.Query = query;
            }
            
        }
        
        /// <summary>
        /// XML or JSON string
        /// </summary>
        /// <value>XML or JSON string</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public string Input { get; set; }

        /// <summary>
        /// XPath or JSONPath query
        /// </summary>
        /// <value>XPath or JSONPath query</value>
        [DataMember(Name="query", EmitDefaultValue=true)]
        public string Query { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputDataQuery {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputDataQuery);
        }

        /// <summary>
        /// Returns true if InputDataQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of InputDataQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputDataQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Query != null)
                    hashCode = hashCode * 59 + this.Query.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
