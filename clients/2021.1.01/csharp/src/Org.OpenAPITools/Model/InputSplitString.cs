/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputSplitString
    /// </summary>
    [DataContract]
    public partial class InputSplitString :  IEquatable<InputSplitString>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputSplitString" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InputSplitString() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputSplitString" /> class.
        /// </summary>
        /// <param name="input">Text to split (required).</param>
        /// <param name="characters">One or more characters that will be used to split the text (required).</param>
        public InputSplitString(string input = default(string), string characters = default(string))
        {
            // to ensure "input" is required (not null)
            if (input == null)
            {
                throw new InvalidDataException("input is a required property for InputSplitString and cannot be null");
            }
            else
            {
                this.Input = input;
            }
            
            // to ensure "characters" is required (not null)
            if (characters == null)
            {
                throw new InvalidDataException("characters is a required property for InputSplitString and cannot be null");
            }
            else
            {
                this.Characters = characters;
            }
            
        }
        
        /// <summary>
        /// Text to split
        /// </summary>
        /// <value>Text to split</value>
        [DataMember(Name="input", EmitDefaultValue=true)]
        public string Input { get; set; }

        /// <summary>
        /// One or more characters that will be used to split the text
        /// </summary>
        /// <value>One or more characters that will be used to split the text</value>
        [DataMember(Name="characters", EmitDefaultValue=true)]
        public string Characters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputSplitString {\n");
            sb.Append("  Input: ").Append(Input).Append("\n");
            sb.Append("  Characters: ").Append(Characters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputSplitString);
        }

        /// <summary>
        /// Returns true if InputSplitString instances are equal
        /// </summary>
        /// <param name="input">Instance of InputSplitString to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputSplitString input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.Characters == input.Characters ||
                    (this.Characters != null &&
                    this.Characters.Equals(input.Characters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.Characters != null)
                    hashCode = hashCode * 59 + this.Characters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
