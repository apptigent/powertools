/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Data - CSV to JSON
        /// </summary>
        /// <remarks>
        /// Convert a CSV string to a JSON array
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString CsvToJson (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON));

        /// <summary>
        /// Data - CSV to JSON
        /// </summary>
        /// <remarks>
        /// Convert a CSV string to a JSON array
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> CsvToJsonWithHttpInfo (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON));
        /// <summary>
        /// Data - JSON to CSV
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to CSV string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString JsonToCsv (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV));

        /// <summary>
        /// Data - JSON to CSV
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to CSV string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> JsonToCsvWithHttpInfo (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV));
        /// <summary>
        /// Data - JSON to HTML Table
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to an HTML table
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString JsonToHtml (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML));

        /// <summary>
        /// Data - JSON to HTML Table
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to an HTML table
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> JsonToHtmlWithHttpInfo (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML));
        /// <summary>
        /// Data - JSON to XML
        /// </summary>
        /// <remarks>
        /// Convert a JSON object to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString JsonToXml (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML));

        /// <summary>
        /// Data - JSON to XML
        /// </summary>
        /// <remarks>
        /// Convert a JSON object to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> JsonToXmlWithHttpInfo (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML));
        /// <summary>
        /// Data - Query JSON
        /// </summary>
        /// <remarks>
        /// Query a JSON object using a JSONPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString QueryJson (InputDataQuery inputDataQuery = default(InputDataQuery));

        /// <summary>
        /// Data - Query JSON
        /// </summary>
        /// <remarks>
        /// Query a JSON object using a JSONPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> QueryJsonWithHttpInfo (InputDataQuery inputDataQuery = default(InputDataQuery));
        /// <summary>
        /// Data - Query XML
        /// </summary>
        /// <remarks>
        /// Query an XML string using an XPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString QueryXml (InputDataQuery inputDataQuery = default(InputDataQuery));

        /// <summary>
        /// Data - Query XML
        /// </summary>
        /// <remarks>
        /// Query an XML string using an XPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> QueryXmlWithHttpInfo (InputDataQuery inputDataQuery = default(InputDataQuery));
        /// <summary>
        /// Data - XML to JSON
        /// </summary>
        /// <remarks>
        /// Convert an XML string to a JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString XmlToJson (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON));

        /// <summary>
        /// Data - XML to JSON
        /// </summary>
        /// <remarks>
        /// Convert an XML string to a JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> XmlToJsonWithHttpInfo (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Data - CSV to JSON
        /// </summary>
        /// <remarks>
        /// Convert a CSV string to a JSON array
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> CsvToJsonAsync (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - CSV to JSON
        /// </summary>
        /// <remarks>
        /// Convert a CSV string to a JSON array
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> CsvToJsonWithHttpInfoAsync (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Data - JSON to CSV
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to CSV string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> JsonToCsvAsync (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - JSON to CSV
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to CSV string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> JsonToCsvWithHttpInfoAsync (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Data - JSON to HTML Table
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to an HTML table
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> JsonToHtmlAsync (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - JSON to HTML Table
        /// </summary>
        /// <remarks>
        /// Convert a JSON array to an HTML table
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> JsonToHtmlWithHttpInfoAsync (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Data - JSON to XML
        /// </summary>
        /// <remarks>
        /// Convert a JSON object to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> JsonToXmlAsync (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - JSON to XML
        /// </summary>
        /// <remarks>
        /// Convert a JSON object to an XML string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> JsonToXmlWithHttpInfoAsync (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Data - Query JSON
        /// </summary>
        /// <remarks>
        /// Query a JSON object using a JSONPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> QueryJsonAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - Query JSON
        /// </summary>
        /// <remarks>
        /// Query a JSON object using a JSONPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> QueryJsonWithHttpInfoAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Data - Query XML
        /// </summary>
        /// <remarks>
        /// Query an XML string using an XPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> QueryXmlAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - Query XML
        /// </summary>
        /// <remarks>
        /// Query an XML string using an XPath expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> QueryXmlWithHttpInfoAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Data - XML to JSON
        /// </summary>
        /// <remarks>
        /// Convert an XML string to a JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> XmlToJsonAsync (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Data - XML to JSON
        /// </summary>
        /// <remarks>
        /// Convert an XML string to a JSON object
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> XmlToJsonWithHttpInfoAsync (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataApi : IDataApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// </summary>
        /// <returns></returns>
        public DataApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Data - CSV to JSON Convert a CSV string to a JSON array
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString CsvToJson (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON))
        {
             ApiResponse<OutputString> localVarResponse = CsvToJsonWithHttpInfo(csvConversionJSON);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - CSV to JSON Convert a CSV string to a JSON array
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> CsvToJsonWithHttpInfo (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON))
        {

            var localVarPath = "/CSVtoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csvConversionJSON != null && csvConversionJSON.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(csvConversionJSON); // http body (model) parameter
            }
            else
            {
                localVarPostBody = csvConversionJSON; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CsvToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - CSV to JSON Convert a CSV string to a JSON array
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> CsvToJsonAsync (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await CsvToJsonWithHttpInfoAsync(csvConversionJSON, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - CSV to JSON Convert a CSV string to a JSON array
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csvConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> CsvToJsonWithHttpInfoAsync (InputCsvConversionJSON csvConversionJSON = default(InputCsvConversionJSON), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CSVtoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csvConversionJSON != null && csvConversionJSON.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(csvConversionJSON); // http body (model) parameter
            }
            else
            {
                localVarPostBody = csvConversionJSON; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CsvToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - JSON to CSV Convert a JSON array to CSV string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString JsonToCsv (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV))
        {
             ApiResponse<OutputString> localVarResponse = JsonToCsvWithHttpInfo(jsonConversionCSV);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - JSON to CSV Convert a JSON array to CSV string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> JsonToCsvWithHttpInfo (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV))
        {

            var localVarPath = "/JSONtoCSV";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonConversionCSV != null && jsonConversionCSV.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonConversionCSV); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonConversionCSV; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JsonToCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - JSON to CSV Convert a JSON array to CSV string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> JsonToCsvAsync (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await JsonToCsvWithHttpInfoAsync(jsonConversionCSV, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - JSON to CSV Convert a JSON array to CSV string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionCSV"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> JsonToCsvWithHttpInfoAsync (InputJsonConversionCSV jsonConversionCSV = default(InputJsonConversionCSV), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/JSONtoCSV";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonConversionCSV != null && jsonConversionCSV.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonConversionCSV); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonConversionCSV; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JsonToCsv", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - JSON to HTML Table Convert a JSON array to an HTML table
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString JsonToHtml (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML))
        {
             ApiResponse<OutputString> localVarResponse = JsonToHtmlWithHttpInfo(jsonConversionHTML);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - JSON to HTML Table Convert a JSON array to an HTML table
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> JsonToHtmlWithHttpInfo (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML))
        {

            var localVarPath = "/JSONtoHTML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonConversionHTML != null && jsonConversionHTML.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonConversionHTML); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonConversionHTML; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JsonToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - JSON to HTML Table Convert a JSON array to an HTML table
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> JsonToHtmlAsync (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await JsonToHtmlWithHttpInfoAsync(jsonConversionHTML, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - JSON to HTML Table Convert a JSON array to an HTML table
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionHTML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> JsonToHtmlWithHttpInfoAsync (InputJsonConversionHTML jsonConversionHTML = default(InputJsonConversionHTML), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/JSONtoHTML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonConversionHTML != null && jsonConversionHTML.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonConversionHTML); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonConversionHTML; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JsonToHtml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - JSON to XML Convert a JSON object to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString JsonToXml (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML))
        {
             ApiResponse<OutputString> localVarResponse = JsonToXmlWithHttpInfo(jsonConversionXML);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - JSON to XML Convert a JSON object to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> JsonToXmlWithHttpInfo (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML))
        {

            var localVarPath = "/JSONtoXML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonConversionXML != null && jsonConversionXML.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonConversionXML); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonConversionXML; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JsonToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - JSON to XML Convert a JSON object to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> JsonToXmlAsync (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await JsonToXmlWithHttpInfoAsync(jsonConversionXML, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - JSON to XML Convert a JSON object to an XML string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jsonConversionXML"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> JsonToXmlWithHttpInfoAsync (InputJsonConversionXML jsonConversionXML = default(InputJsonConversionXML), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/JSONtoXML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jsonConversionXML != null && jsonConversionXML.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(jsonConversionXML); // http body (model) parameter
            }
            else
            {
                localVarPostBody = jsonConversionXML; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JsonToXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - Query JSON Query a JSON object using a JSONPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString QueryJson (InputDataQuery inputDataQuery = default(InputDataQuery))
        {
             ApiResponse<OutputString> localVarResponse = QueryJsonWithHttpInfo(inputDataQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - Query JSON Query a JSON object using a JSONPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> QueryJsonWithHttpInfo (InputDataQuery inputDataQuery = default(InputDataQuery))
        {

            var localVarPath = "/QueryJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputDataQuery != null && inputDataQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputDataQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputDataQuery; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - Query JSON Query a JSON object using a JSONPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> QueryJsonAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await QueryJsonWithHttpInfoAsync(inputDataQuery, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - Query JSON Query a JSON object using a JSONPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> QueryJsonWithHttpInfoAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/QueryJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputDataQuery != null && inputDataQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputDataQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputDataQuery; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - Query XML Query an XML string using an XPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString QueryXml (InputDataQuery inputDataQuery = default(InputDataQuery))
        {
             ApiResponse<OutputString> localVarResponse = QueryXmlWithHttpInfo(inputDataQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - Query XML Query an XML string using an XPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> QueryXmlWithHttpInfo (InputDataQuery inputDataQuery = default(InputDataQuery))
        {

            var localVarPath = "/QueryXML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputDataQuery != null && inputDataQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputDataQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputDataQuery; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - Query XML Query an XML string using an XPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> QueryXmlAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await QueryXmlWithHttpInfoAsync(inputDataQuery, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - Query XML Query an XML string using an XPath expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputDataQuery"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> QueryXmlWithHttpInfoAsync (InputDataQuery inputDataQuery = default(InputDataQuery), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/QueryXML";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputDataQuery != null && inputDataQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputDataQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputDataQuery; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - XML to JSON Convert an XML string to a JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString XmlToJson (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON))
        {
             ApiResponse<OutputString> localVarResponse = XmlToJsonWithHttpInfo(xmlConversionJSON);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Data - XML to JSON Convert an XML string to a JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> XmlToJsonWithHttpInfo (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON))
        {

            var localVarPath = "/XMLtoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xmlConversionJSON != null && xmlConversionJSON.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xmlConversionJSON); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xmlConversionJSON; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XmlToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Data - XML to JSON Convert an XML string to a JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> XmlToJsonAsync (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await XmlToJsonWithHttpInfoAsync(xmlConversionJSON, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Data - XML to JSON Convert an XML string to a JSON object
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xmlConversionJSON"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> XmlToJsonWithHttpInfoAsync (InputXmlConversionJSON xmlConversionJSON = default(InputXmlConversionJSON), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/XMLtoJSON";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xmlConversionJSON != null && xmlConversionJSON.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(xmlConversionJSON); // http body (model) parameter
            }
            else
            {
                localVarPostBody = xmlConversionJSON; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("XmlToJson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

    }
}
