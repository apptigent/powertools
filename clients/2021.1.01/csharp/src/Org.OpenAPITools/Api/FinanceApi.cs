/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinanceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Currency - Convert currency
        /// </summary>
        /// <remarks>
        /// Calculate monetary value in a different currency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertCurrency (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion));

        /// <summary>
        /// Currency - Convert currency
        /// </summary>
        /// <remarks>
        /// Calculate monetary value in a different currency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertCurrencyWithHttpInfo (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion));
        /// <summary>
        /// Currency - Format currency
        /// </summary>
        /// <remarks>
        /// Apply currency symbol to a numeric value
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString FormatCurrency (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat));

        /// <summary>
        /// Currency - Format currency
        /// </summary>
        /// <remarks>
        /// Apply currency symbol to a numeric value
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> FormatCurrencyWithHttpInfo (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat));
        /// <summary>
        /// Finance - Market index
        /// </summary>
        /// <remarks>
        /// Get current and historical market index information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <returns>OutputMarketIndex</returns>
        OutputMarketIndex MarketIndex (InputMarketIndex marketIndex = default(InputMarketIndex));

        /// <summary>
        /// Finance - Market index
        /// </summary>
        /// <remarks>
        /// Get current and historical market index information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <returns>ApiResponse of OutputMarketIndex</returns>
        ApiResponse<OutputMarketIndex> MarketIndexWithHttpInfo (InputMarketIndex marketIndex = default(InputMarketIndex));
        /// <summary>
        /// Finance - Stock prices
        /// </summary>
        /// <remarks>
        /// Get current and historical stock price information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <returns>OutputStockPrice</returns>
        OutputStockPrice StockPrices (InputStockPrices stockPrices = default(InputStockPrices));

        /// <summary>
        /// Finance - Stock prices
        /// </summary>
        /// <remarks>
        /// Get current and historical stock price information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <returns>ApiResponse of OutputStockPrice</returns>
        ApiResponse<OutputStockPrice> StockPricesWithHttpInfo (InputStockPrices stockPrices = default(InputStockPrices));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Currency - Convert currency
        /// </summary>
        /// <remarks>
        /// Calculate monetary value in a different currency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertCurrencyAsync (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Currency - Convert currency
        /// </summary>
        /// <remarks>
        /// Calculate monetary value in a different currency
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertCurrencyWithHttpInfoAsync (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Currency - Format currency
        /// </summary>
        /// <remarks>
        /// Apply currency symbol to a numeric value
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> FormatCurrencyAsync (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Currency - Format currency
        /// </summary>
        /// <remarks>
        /// Apply currency symbol to a numeric value
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> FormatCurrencyWithHttpInfoAsync (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Finance - Market index
        /// </summary>
        /// <remarks>
        /// Get current and historical market index information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputMarketIndex</returns>
        System.Threading.Tasks.Task<OutputMarketIndex> MarketIndexAsync (InputMarketIndex marketIndex = default(InputMarketIndex), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finance - Market index
        /// </summary>
        /// <remarks>
        /// Get current and historical market index information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputMarketIndex)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputMarketIndex>> MarketIndexWithHttpInfoAsync (InputMarketIndex marketIndex = default(InputMarketIndex), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Finance - Stock prices
        /// </summary>
        /// <remarks>
        /// Get current and historical stock price information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputStockPrice</returns>
        System.Threading.Tasks.Task<OutputStockPrice> StockPricesAsync (InputStockPrices stockPrices = default(InputStockPrices), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Finance - Stock prices
        /// </summary>
        /// <remarks>
        /// Get current and historical stock price information
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputStockPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputStockPrice>> StockPricesWithHttpInfoAsync (InputStockPrices stockPrices = default(InputStockPrices), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinanceApi : IFinanceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinanceApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceApi"/> class
        /// </summary>
        /// <returns></returns>
        public FinanceApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinanceApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Currency - Convert currency Calculate monetary value in a different currency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertCurrency (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertCurrencyWithHttpInfo(currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Currency - Convert currency Calculate monetary value in a different currency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertCurrencyWithHttpInfo (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion))
        {

            var localVarPath = "/ConvertCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyConversion != null && currencyConversion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(currencyConversion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = currencyConversion; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Currency - Convert currency Calculate monetary value in a different currency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertCurrencyAsync (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertCurrencyWithHttpInfoAsync(currencyConversion, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Currency - Convert currency Calculate monetary value in a different currency
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertCurrencyWithHttpInfoAsync (InputCurrencyConversion currencyConversion = default(InputCurrencyConversion), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyConversion != null && currencyConversion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(currencyConversion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = currencyConversion; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Currency - Format currency Apply currency symbol to a numeric value
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString FormatCurrency (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat))
        {
             ApiResponse<OutputString> localVarResponse = FormatCurrencyWithHttpInfo(currencyFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Currency - Format currency Apply currency symbol to a numeric value
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> FormatCurrencyWithHttpInfo (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat))
        {

            var localVarPath = "/FormatCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyFormat != null && currencyFormat.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(currencyFormat); // http body (model) parameter
            }
            else
            {
                localVarPostBody = currencyFormat; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Currency - Format currency Apply currency symbol to a numeric value
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> FormatCurrencyAsync (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await FormatCurrencyWithHttpInfoAsync(currencyFormat, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Currency - Format currency Apply currency symbol to a numeric value
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currencyFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> FormatCurrencyWithHttpInfoAsync (InputCurrencyFormat currencyFormat = default(InputCurrencyFormat), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/FormatCurrency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currencyFormat != null && currencyFormat.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(currencyFormat); // http body (model) parameter
            }
            else
            {
                localVarPostBody = currencyFormat; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Finance - Market index Get current and historical market index information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <returns>OutputMarketIndex</returns>
        public OutputMarketIndex MarketIndex (InputMarketIndex marketIndex = default(InputMarketIndex))
        {
             ApiResponse<OutputMarketIndex> localVarResponse = MarketIndexWithHttpInfo(marketIndex);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finance - Market index Get current and historical market index information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <returns>ApiResponse of OutputMarketIndex</returns>
        public ApiResponse<OutputMarketIndex> MarketIndexWithHttpInfo (InputMarketIndex marketIndex = default(InputMarketIndex))
        {

            var localVarPath = "/MarketIndex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIndex != null && marketIndex.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(marketIndex); // http body (model) parameter
            }
            else
            {
                localVarPostBody = marketIndex; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputMarketIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputMarketIndex) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputMarketIndex)));
        }

        /// <summary>
        /// Finance - Market index Get current and historical market index information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputMarketIndex</returns>
        public async System.Threading.Tasks.Task<OutputMarketIndex> MarketIndexAsync (InputMarketIndex marketIndex = default(InputMarketIndex), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputMarketIndex> localVarResponse = await MarketIndexWithHttpInfoAsync(marketIndex, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finance - Market index Get current and historical market index information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketIndex"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputMarketIndex)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputMarketIndex>> MarketIndexWithHttpInfoAsync (InputMarketIndex marketIndex = default(InputMarketIndex), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/MarketIndex";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (marketIndex != null && marketIndex.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(marketIndex); // http body (model) parameter
            }
            else
            {
                localVarPostBody = marketIndex; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MarketIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputMarketIndex>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputMarketIndex) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputMarketIndex)));
        }

        /// <summary>
        /// Finance - Stock prices Get current and historical stock price information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <returns>OutputStockPrice</returns>
        public OutputStockPrice StockPrices (InputStockPrices stockPrices = default(InputStockPrices))
        {
             ApiResponse<OutputStockPrice> localVarResponse = StockPricesWithHttpInfo(stockPrices);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finance - Stock prices Get current and historical stock price information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <returns>ApiResponse of OutputStockPrice</returns>
        public ApiResponse<OutputStockPrice> StockPricesWithHttpInfo (InputStockPrices stockPrices = default(InputStockPrices))
        {

            var localVarPath = "/StockPrices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockPrices != null && stockPrices.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stockPrices); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stockPrices; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StockPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputStockPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputStockPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputStockPrice)));
        }

        /// <summary>
        /// Finance - Stock prices Get current and historical stock price information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputStockPrice</returns>
        public async System.Threading.Tasks.Task<OutputStockPrice> StockPricesAsync (InputStockPrices stockPrices = default(InputStockPrices), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputStockPrice> localVarResponse = await StockPricesWithHttpInfoAsync(stockPrices, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finance - Stock prices Get current and historical stock price information
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stockPrices"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputStockPrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputStockPrice>> StockPricesWithHttpInfoAsync (InputStockPrices stockPrices = default(InputStockPrices), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/StockPrices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stockPrices != null && stockPrices.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(stockPrices); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stockPrices; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StockPrices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputStockPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputStockPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputStockPrice)));
        }

    }
}
