/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMathApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Math - Calculate Absolute
        /// </summary>
        /// <remarks>
        /// Calculate the absolute value of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateAbsolute (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Calculate Absolute
        /// </summary>
        /// <remarks>
        /// Calculate the absolute value of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateAbsoluteWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate Addition
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateAddition (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));

        /// <summary>
        /// Math - Calculate Addition
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateAdditionWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));
        /// <summary>
        /// Math - Calculate average
        /// </summary>
        /// <remarks>
        /// Calculate the average of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateAverage (InputCalculateSeries calculateSeries = default(InputCalculateSeries));

        /// <summary>
        /// Math - Calculate average
        /// </summary>
        /// <remarks>
        /// Calculate the average of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateAverageWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries));
        /// <summary>
        /// Math - Calculate Cosine
        /// </summary>
        /// <remarks>
        /// Calculate the cosine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateCosine (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Calculate Cosine
        /// </summary>
        /// <remarks>
        /// Calculate the cosine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateCosineWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate Division
        /// </summary>
        /// <remarks>
        /// Calculate the quotient of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateDivision (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));

        /// <summary>
        /// Math - Calculate Division
        /// </summary>
        /// <remarks>
        /// Calculate the quotient of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateDivisionWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));
        /// <summary>
        /// Math - Calculate Logarithm
        /// </summary>
        /// <remarks>
        /// Calculate the logarithm of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateLogarithm (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Calculate Logarithm
        /// </summary>
        /// <remarks>
        /// Calculate the logarithm of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateLogarithmWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate median
        /// </summary>
        /// <remarks>
        /// Calculate the median of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateMedian (InputCalculateSeries calculateSeries = default(InputCalculateSeries));

        /// <summary>
        /// Math - Calculate median
        /// </summary>
        /// <remarks>
        /// Calculate the median of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateMedianWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries));
        /// <summary>
        /// Math - Calculate minimum or maximum
        /// </summary>
        /// <remarks>
        /// Calculate the minimum or maximum value in a sequence of numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateMinMax (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax));

        /// <summary>
        /// Math - Calculate minimum or maximum
        /// </summary>
        /// <remarks>
        /// Calculate the minimum or maximum value in a sequence of numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateMinMaxWithHttpInfo (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax));
        /// <summary>
        /// Math - Calculate Modulo
        /// </summary>
        /// <remarks>
        /// Calculate the remainder of dividing two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateModulo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));

        /// <summary>
        /// Math - Calculate Modulo
        /// </summary>
        /// <remarks>
        /// Calculate the remainder of dividing two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateModuloWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));
        /// <summary>
        /// Math - Calculate Multiplication
        /// </summary>
        /// <remarks>
        /// Calculate the product of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateMultiplication (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));

        /// <summary>
        /// Math - Calculate Multiplication
        /// </summary>
        /// <remarks>
        /// Calculate the product of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateMultiplicationWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));
        /// <summary>
        /// Math - Calculate Nth Root
        /// </summary>
        /// <remarks>
        /// Calculate the n-th root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateNthRoot (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));

        /// <summary>
        /// Math - Calculate Nth Root
        /// </summary>
        /// <remarks>
        /// Calculate the n-th root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateNthRootWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));
        /// <summary>
        /// Math - Calculate power
        /// </summary>
        /// <remarks>
        /// Raise number to a specified power
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculatePower (InputCalculatePower calculatePower = default(InputCalculatePower));

        /// <summary>
        /// Math - Calculate power
        /// </summary>
        /// <remarks>
        /// Raise number to a specified power
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculatePowerWithHttpInfo (InputCalculatePower calculatePower = default(InputCalculatePower));
        /// <summary>
        /// Math - Calculate Sine
        /// </summary>
        /// <remarks>
        /// Calculate the sine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateSine (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Calculate Sine
        /// </summary>
        /// <remarks>
        /// Calculate the sine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateSineWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate Square Root
        /// </summary>
        /// <remarks>
        /// Calculate the square root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateSquareRoot (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Calculate Square Root
        /// </summary>
        /// <remarks>
        /// Calculate the square root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateSquareRootWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate Subtraction
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateSubtraction (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));

        /// <summary>
        /// Math - Calculate Subtraction
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateSubtractionWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers));
        /// <summary>
        /// Math - Calculate sum
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateSum (InputCalculateSeries calculateSeries = default(InputCalculateSeries));

        /// <summary>
        /// Math - Calculate sum
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateSumWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries));
        /// <summary>
        /// Math - Calculate Tangent
        /// </summary>
        /// <remarks>
        /// Calculate the tangent value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateTangent (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Calculate Tangent
        /// </summary>
        /// <remarks>
        /// Calculate the tangent value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateTangentWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate variance
        /// </summary>
        /// <remarks>
        /// Calculate the statistical variance of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber CalculateVariance (InputCalculateSeries calculateSeries = default(InputCalculateSeries));

        /// <summary>
        /// Math - Calculate variance
        /// </summary>
        /// <remarks>
        /// Calculate the statistical variance of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> CalculateVarianceWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries));
        /// <summary>
        /// Math - Convert angle
        /// </summary>
        /// <remarks>
        /// Convert value from one angle measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertAngle (InputConvertAngle convertAngle = default(InputConvertAngle));

        /// <summary>
        /// Math - Convert angle
        /// </summary>
        /// <remarks>
        /// Convert value from one angle measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertAngleWithHttpInfo (InputConvertAngle convertAngle = default(InputConvertAngle));
        /// <summary>
        /// Math - Convert area
        /// </summary>
        /// <remarks>
        /// Convert value from one area measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertArea (InputConvertArea convertArea = default(InputConvertArea));

        /// <summary>
        /// Math - Convert area
        /// </summary>
        /// <remarks>
        /// Convert value from one area measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertAreaWithHttpInfo (InputConvertArea convertArea = default(InputConvertArea));
        /// <summary>
        /// Math - Convert distance
        /// </summary>
        /// <remarks>
        /// Convert value from one distance measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertDistance (InputConvertDistance convertDistance = default(InputConvertDistance));

        /// <summary>
        /// Math - Convert distance
        /// </summary>
        /// <remarks>
        /// Convert value from one distance measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertDistanceWithHttpInfo (InputConvertDistance convertDistance = default(InputConvertDistance));
        /// <summary>
        /// Math - Convert duration
        /// </summary>
        /// <remarks>
        /// Convert value from one duration measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertDuration (InputConvertDuration convertDuration = default(InputConvertDuration));

        /// <summary>
        /// Math - Convert duration
        /// </summary>
        /// <remarks>
        /// Convert value from one duration measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertDurationWithHttpInfo (InputConvertDuration convertDuration = default(InputConvertDuration));
        /// <summary>
        /// Math - Convert energy
        /// </summary>
        /// <remarks>
        /// Convert value from one energy measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertEnergy (InputConvertEnergy convertEnergy = default(InputConvertEnergy));

        /// <summary>
        /// Math - Convert energy
        /// </summary>
        /// <remarks>
        /// Convert value from one energy measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertEnergyWithHttpInfo (InputConvertEnergy convertEnergy = default(InputConvertEnergy));
        /// <summary>
        /// Math - Convert power
        /// </summary>
        /// <remarks>
        /// Convert value from one power measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertPower (InputConvertPower convertPower = default(InputConvertPower));

        /// <summary>
        /// Math - Convert power
        /// </summary>
        /// <remarks>
        /// Convert value from one power measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertPowerWithHttpInfo (InputConvertPower convertPower = default(InputConvertPower));
        /// <summary>
        /// Math - Convert speed
        /// </summary>
        /// <remarks>
        /// Convert value from one speed measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertSpeed (InputConvertSpeed convertSpeed = default(InputConvertSpeed));

        /// <summary>
        /// Math - Convert speed
        /// </summary>
        /// <remarks>
        /// Convert value from one speed measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertSpeedWithHttpInfo (InputConvertSpeed convertSpeed = default(InputConvertSpeed));
        /// <summary>
        /// Math - Convert temperature
        /// </summary>
        /// <remarks>
        /// Convert value from one temperature measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertTemperature (InputConvertTemperature convertTemperature = default(InputConvertTemperature));

        /// <summary>
        /// Math - Convert temperature
        /// </summary>
        /// <remarks>
        /// Convert value from one temperature measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertTemperatureWithHttpInfo (InputConvertTemperature convertTemperature = default(InputConvertTemperature));
        /// <summary>
        /// Math - Convert volume
        /// </summary>
        /// <remarks>
        /// Convert value from one volume measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertVolume (InputConvertVolume convertVolume = default(InputConvertVolume));

        /// <summary>
        /// Math - Convert volume
        /// </summary>
        /// <remarks>
        /// Convert value from one volume measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertVolumeWithHttpInfo (InputConvertVolume convertVolume = default(InputConvertVolume));
        /// <summary>
        /// Math - Convert weight
        /// </summary>
        /// <remarks>
        /// Convert value from one weight measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber ConvertWeight (InputConvertWeight convertWeight = default(InputConvertWeight));

        /// <summary>
        /// Math - Convert weight
        /// </summary>
        /// <remarks>
        /// Convert value from one weight measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> ConvertWeightWithHttpInfo (InputConvertWeight convertWeight = default(InputConvertWeight));
        /// <summary>
        /// Math - Random number
        /// </summary>
        /// <remarks>
        /// Generate a random number within a specified range
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber RandomNumber (InputNumberRange numberRange = default(InputNumberRange));

        /// <summary>
        /// Math - Random number
        /// </summary>
        /// <remarks>
        /// Generate a random number within a specified range
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> RandomNumberWithHttpInfo (InputNumberRange numberRange = default(InputNumberRange));
        /// <summary>
        /// Math - Round number
        /// </summary>
        /// <remarks>
        /// Round a numeric value up or down
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber RoundNumber (InputCalculateNumber calculateNumber = default(InputCalculateNumber));

        /// <summary>
        /// Math - Round number
        /// </summary>
        /// <remarks>
        /// Round a numeric value up or down
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> RoundNumberWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber));
        /// <summary>
        /// Math - Calculate standard deviation
        /// </summary>
        /// <remarks>
        /// Calculate the standard deviation of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        OutputNumber StandardDeviation (InputCalculateSeries calculateSeries = default(InputCalculateSeries));

        /// <summary>
        /// Math - Calculate standard deviation
        /// </summary>
        /// <remarks>
        /// Calculate the standard deviation of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        ApiResponse<OutputNumber> StandardDeviationWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Math - Calculate Absolute
        /// </summary>
        /// <remarks>
        /// Calculate the absolute value of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateAbsoluteAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Absolute
        /// </summary>
        /// <remarks>
        /// Calculate the absolute value of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateAbsoluteWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Addition
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateAdditionAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Addition
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateAdditionWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate average
        /// </summary>
        /// <remarks>
        /// Calculate the average of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateAverageAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate average
        /// </summary>
        /// <remarks>
        /// Calculate the average of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateAverageWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Cosine
        /// </summary>
        /// <remarks>
        /// Calculate the cosine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateCosineAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Cosine
        /// </summary>
        /// <remarks>
        /// Calculate the cosine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateCosineWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Division
        /// </summary>
        /// <remarks>
        /// Calculate the quotient of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateDivisionAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Division
        /// </summary>
        /// <remarks>
        /// Calculate the quotient of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateDivisionWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Logarithm
        /// </summary>
        /// <remarks>
        /// Calculate the logarithm of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateLogarithmAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Logarithm
        /// </summary>
        /// <remarks>
        /// Calculate the logarithm of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateLogarithmWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate median
        /// </summary>
        /// <remarks>
        /// Calculate the median of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateMedianAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate median
        /// </summary>
        /// <remarks>
        /// Calculate the median of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateMedianWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate minimum or maximum
        /// </summary>
        /// <remarks>
        /// Calculate the minimum or maximum value in a sequence of numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateMinMaxAsync (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate minimum or maximum
        /// </summary>
        /// <remarks>
        /// Calculate the minimum or maximum value in a sequence of numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateMinMaxWithHttpInfoAsync (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Modulo
        /// </summary>
        /// <remarks>
        /// Calculate the remainder of dividing two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateModuloAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Modulo
        /// </summary>
        /// <remarks>
        /// Calculate the remainder of dividing two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateModuloWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Multiplication
        /// </summary>
        /// <remarks>
        /// Calculate the product of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateMultiplicationAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Multiplication
        /// </summary>
        /// <remarks>
        /// Calculate the product of two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateMultiplicationWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Nth Root
        /// </summary>
        /// <remarks>
        /// Calculate the n-th root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateNthRootAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Nth Root
        /// </summary>
        /// <remarks>
        /// Calculate the n-th root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateNthRootWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate power
        /// </summary>
        /// <remarks>
        /// Raise number to a specified power
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculatePowerAsync (InputCalculatePower calculatePower = default(InputCalculatePower), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate power
        /// </summary>
        /// <remarks>
        /// Raise number to a specified power
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculatePowerWithHttpInfoAsync (InputCalculatePower calculatePower = default(InputCalculatePower), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Sine
        /// </summary>
        /// <remarks>
        /// Calculate the sine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateSineAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Sine
        /// </summary>
        /// <remarks>
        /// Calculate the sine value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSineWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Square Root
        /// </summary>
        /// <remarks>
        /// Calculate the square root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateSquareRootAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Square Root
        /// </summary>
        /// <remarks>
        /// Calculate the square root of a number
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSquareRootWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Subtraction
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateSubtractionAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Subtraction
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSubtractionWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate sum
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateSumAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate sum
        /// </summary>
        /// <remarks>
        /// Calculate the sum of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSumWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate Tangent
        /// </summary>
        /// <remarks>
        /// Calculate the tangent value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateTangentAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate Tangent
        /// </summary>
        /// <remarks>
        /// Calculate the tangent value of an angle
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateTangentWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate variance
        /// </summary>
        /// <remarks>
        /// Calculate the statistical variance of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> CalculateVarianceAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate variance
        /// </summary>
        /// <remarks>
        /// Calculate the statistical variance of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateVarianceWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert angle
        /// </summary>
        /// <remarks>
        /// Convert value from one angle measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertAngleAsync (InputConvertAngle convertAngle = default(InputConvertAngle), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert angle
        /// </summary>
        /// <remarks>
        /// Convert value from one angle measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertAngleWithHttpInfoAsync (InputConvertAngle convertAngle = default(InputConvertAngle), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert area
        /// </summary>
        /// <remarks>
        /// Convert value from one area measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertAreaAsync (InputConvertArea convertArea = default(InputConvertArea), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert area
        /// </summary>
        /// <remarks>
        /// Convert value from one area measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertAreaWithHttpInfoAsync (InputConvertArea convertArea = default(InputConvertArea), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert distance
        /// </summary>
        /// <remarks>
        /// Convert value from one distance measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertDistanceAsync (InputConvertDistance convertDistance = default(InputConvertDistance), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert distance
        /// </summary>
        /// <remarks>
        /// Convert value from one distance measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertDistanceWithHttpInfoAsync (InputConvertDistance convertDistance = default(InputConvertDistance), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert duration
        /// </summary>
        /// <remarks>
        /// Convert value from one duration measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertDurationAsync (InputConvertDuration convertDuration = default(InputConvertDuration), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert duration
        /// </summary>
        /// <remarks>
        /// Convert value from one duration measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertDurationWithHttpInfoAsync (InputConvertDuration convertDuration = default(InputConvertDuration), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert energy
        /// </summary>
        /// <remarks>
        /// Convert value from one energy measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertEnergyAsync (InputConvertEnergy convertEnergy = default(InputConvertEnergy), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert energy
        /// </summary>
        /// <remarks>
        /// Convert value from one energy measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertEnergyWithHttpInfoAsync (InputConvertEnergy convertEnergy = default(InputConvertEnergy), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert power
        /// </summary>
        /// <remarks>
        /// Convert value from one power measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertPowerAsync (InputConvertPower convertPower = default(InputConvertPower), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert power
        /// </summary>
        /// <remarks>
        /// Convert value from one power measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertPowerWithHttpInfoAsync (InputConvertPower convertPower = default(InputConvertPower), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert speed
        /// </summary>
        /// <remarks>
        /// Convert value from one speed measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertSpeedAsync (InputConvertSpeed convertSpeed = default(InputConvertSpeed), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert speed
        /// </summary>
        /// <remarks>
        /// Convert value from one speed measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertSpeedWithHttpInfoAsync (InputConvertSpeed convertSpeed = default(InputConvertSpeed), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert temperature
        /// </summary>
        /// <remarks>
        /// Convert value from one temperature measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertTemperatureAsync (InputConvertTemperature convertTemperature = default(InputConvertTemperature), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert temperature
        /// </summary>
        /// <remarks>
        /// Convert value from one temperature measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertTemperatureWithHttpInfoAsync (InputConvertTemperature convertTemperature = default(InputConvertTemperature), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert volume
        /// </summary>
        /// <remarks>
        /// Convert value from one volume measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertVolumeAsync (InputConvertVolume convertVolume = default(InputConvertVolume), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert volume
        /// </summary>
        /// <remarks>
        /// Convert value from one volume measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertVolumeWithHttpInfoAsync (InputConvertVolume convertVolume = default(InputConvertVolume), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Convert weight
        /// </summary>
        /// <remarks>
        /// Convert value from one weight measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> ConvertWeightAsync (InputConvertWeight convertWeight = default(InputConvertWeight), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Convert weight
        /// </summary>
        /// <remarks>
        /// Convert value from one weight measurement to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertWeightWithHttpInfoAsync (InputConvertWeight convertWeight = default(InputConvertWeight), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Random number
        /// </summary>
        /// <remarks>
        /// Generate a random number within a specified range
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> RandomNumberAsync (InputNumberRange numberRange = default(InputNumberRange), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Random number
        /// </summary>
        /// <remarks>
        /// Generate a random number within a specified range
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> RandomNumberWithHttpInfoAsync (InputNumberRange numberRange = default(InputNumberRange), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Round number
        /// </summary>
        /// <remarks>
        /// Round a numeric value up or down
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> RoundNumberAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Round number
        /// </summary>
        /// <remarks>
        /// Round a numeric value up or down
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> RoundNumberWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Math - Calculate standard deviation
        /// </summary>
        /// <remarks>
        /// Calculate the standard deviation of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        System.Threading.Tasks.Task<OutputNumber> StandardDeviationAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Math - Calculate standard deviation
        /// </summary>
        /// <remarks>
        /// Calculate the standard deviation of two or more numbers
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputNumber>> StandardDeviationWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MathApi : IMathApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MathApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MathApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MathApi"/> class
        /// </summary>
        /// <returns></returns>
        public MathApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MathApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MathApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Math - Calculate Absolute Calculate the absolute value of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateAbsolute (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateAbsoluteWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Absolute Calculate the absolute value of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateAbsoluteWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/CalculateAbsolute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAbsolute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Absolute Calculate the absolute value of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateAbsoluteAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateAbsoluteWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Absolute Calculate the absolute value of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateAbsoluteWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateAbsolute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAbsolute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Addition Calculate the sum of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateAddition (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateAdditionWithHttpInfo(calculateNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Addition Calculate the sum of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateAdditionWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {

            var localVarPath = "/CalculateAddition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAddition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Addition Calculate the sum of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateAdditionAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateAdditionWithHttpInfoAsync(calculateNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Addition Calculate the sum of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateAdditionWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateAddition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAddition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate average Calculate the average of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateAverage (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateAverageWithHttpInfo(calculateSeries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate average Calculate the average of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateAverageWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {

            var localVarPath = "/CalculateAverage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAverage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate average Calculate the average of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateAverageAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateAverageWithHttpInfoAsync(calculateSeries, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate average Calculate the average of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateAverageWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateAverage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateAverage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Cosine Calculate the cosine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateCosine (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateCosineWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Cosine Calculate the cosine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateCosineWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/CalculateCosine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateCosine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Cosine Calculate the cosine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateCosineAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateCosineWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Cosine Calculate the cosine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateCosineWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateCosine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateCosine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Division Calculate the quotient of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateDivision (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateDivisionWithHttpInfo(calculateNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Division Calculate the quotient of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateDivisionWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {

            var localVarPath = "/CalculateDivision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateDivision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Division Calculate the quotient of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateDivisionAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateDivisionWithHttpInfoAsync(calculateNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Division Calculate the quotient of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateDivisionWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateDivision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateDivision", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Logarithm Calculate the logarithm of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateLogarithm (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateLogarithmWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Logarithm Calculate the logarithm of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateLogarithmWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/CalculateLogarithm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateLogarithm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Logarithm Calculate the logarithm of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateLogarithmAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateLogarithmWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Logarithm Calculate the logarithm of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateLogarithmWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateLogarithm";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateLogarithm", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate median Calculate the median of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateMedian (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateMedianWithHttpInfo(calculateSeries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate median Calculate the median of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateMedianWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {

            var localVarPath = "/CalculateMedian";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateMedian", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate median Calculate the median of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateMedianAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateMedianWithHttpInfoAsync(calculateSeries, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate median Calculate the median of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateMedianWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateMedian";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateMedian", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate minimum or maximum Calculate the minimum or maximum value in a sequence of numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateMinMax (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateMinMaxWithHttpInfo(calculateSeries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate minimum or maximum Calculate the minimum or maximum value in a sequence of numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateMinMaxWithHttpInfo (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax))
        {

            var localVarPath = "/CalculateMinMax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateMinMax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate minimum or maximum Calculate the minimum or maximum value in a sequence of numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateMinMaxAsync (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateMinMaxWithHttpInfoAsync(calculateSeries, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate minimum or maximum Calculate the minimum or maximum value in a sequence of numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateMinMaxWithHttpInfoAsync (InputCalculateMinMax calculateSeries = default(InputCalculateMinMax), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateMinMax";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateMinMax", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Modulo Calculate the remainder of dividing two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateModulo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateModuloWithHttpInfo(calculateNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Modulo Calculate the remainder of dividing two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateModuloWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {

            var localVarPath = "/CalculateModulo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateModulo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Modulo Calculate the remainder of dividing two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateModuloAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateModuloWithHttpInfoAsync(calculateNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Modulo Calculate the remainder of dividing two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateModuloWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateModulo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateModulo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Multiplication Calculate the product of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateMultiplication (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateMultiplicationWithHttpInfo(calculateNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Multiplication Calculate the product of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateMultiplicationWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {

            var localVarPath = "/CalculateMultiplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateMultiplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Multiplication Calculate the product of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateMultiplicationAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateMultiplicationWithHttpInfoAsync(calculateNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Multiplication Calculate the product of two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateMultiplicationWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateMultiplication";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateMultiplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Nth Root Calculate the n-th root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateNthRoot (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateNthRootWithHttpInfo(calculateNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Nth Root Calculate the n-th root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateNthRootWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {

            var localVarPath = "/CalculateNthRoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateNthRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Nth Root Calculate the n-th root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateNthRootAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateNthRootWithHttpInfoAsync(calculateNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Nth Root Calculate the n-th root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateNthRootWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateNthRoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateNthRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate power Raise number to a specified power
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculatePower (InputCalculatePower calculatePower = default(InputCalculatePower))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculatePowerWithHttpInfo(calculatePower);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate power Raise number to a specified power
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculatePowerWithHttpInfo (InputCalculatePower calculatePower = default(InputCalculatePower))
        {

            var localVarPath = "/CalculatePower";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculatePower != null && calculatePower.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculatePower); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculatePower; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculatePower", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate power Raise number to a specified power
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculatePowerAsync (InputCalculatePower calculatePower = default(InputCalculatePower), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculatePowerWithHttpInfoAsync(calculatePower, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate power Raise number to a specified power
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculatePower">Power calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculatePowerWithHttpInfoAsync (InputCalculatePower calculatePower = default(InputCalculatePower), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculatePower";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculatePower != null && calculatePower.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculatePower); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculatePower; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculatePower", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Sine Calculate the sine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateSine (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateSineWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Sine Calculate the sine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateSineWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/CalculateSine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Sine Calculate the sine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateSineAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateSineWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Sine Calculate the sine value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSineWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateSine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Square Root Calculate the square root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateSquareRoot (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateSquareRootWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Square Root Calculate the square root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateSquareRootWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/CalculateSquareRoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSquareRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Square Root Calculate the square root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateSquareRootAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateSquareRootWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Square Root Calculate the square root of a number
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSquareRootWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateSquareRoot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSquareRoot", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Subtraction Calculate the difference between two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateSubtraction (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateSubtractionWithHttpInfo(calculateNumbers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Subtraction Calculate the difference between two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateSubtractionWithHttpInfo (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers))
        {

            var localVarPath = "/CalculateSubtraction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSubtraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Subtraction Calculate the difference between two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateSubtractionAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateSubtractionWithHttpInfoAsync(calculateNumbers, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Subtraction Calculate the difference between two numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumbers">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSubtractionWithHttpInfoAsync (InputCalculateNumbers calculateNumbers = default(InputCalculateNumbers), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateSubtraction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumbers != null && calculateNumbers.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumbers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumbers; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSubtraction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate sum Calculate the sum of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateSum (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateSumWithHttpInfo(calculateSeries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate sum Calculate the sum of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateSumWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {

            var localVarPath = "/CalculateSum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate sum Calculate the sum of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateSumAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateSumWithHttpInfoAsync(calculateSeries, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate sum Calculate the sum of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateSumWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateSum";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateSum", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Tangent Calculate the tangent value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateTangent (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateTangentWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate Tangent Calculate the tangent value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateTangentWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/CalculateTangent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateTangent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate Tangent Calculate the tangent value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateTangentAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateTangentWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate Tangent Calculate the tangent value of an angle
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Number calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateTangentWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateTangent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateTangent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate variance Calculate the statistical variance of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber CalculateVariance (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {
             ApiResponse<OutputNumber> localVarResponse = CalculateVarianceWithHttpInfo(calculateSeries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate variance Calculate the statistical variance of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> CalculateVarianceWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {

            var localVarPath = "/CalculateVariance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateVariance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate variance Calculate the statistical variance of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> CalculateVarianceAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await CalculateVarianceWithHttpInfoAsync(calculateSeries, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate variance Calculate the statistical variance of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> CalculateVarianceWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/CalculateVariance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CalculateVariance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert angle Convert value from one angle measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertAngle (InputConvertAngle convertAngle = default(InputConvertAngle))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertAngleWithHttpInfo(convertAngle);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert angle Convert value from one angle measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertAngleWithHttpInfo (InputConvertAngle convertAngle = default(InputConvertAngle))
        {

            var localVarPath = "/ConvertAngle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertAngle != null && convertAngle.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertAngle); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertAngle; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertAngle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert angle Convert value from one angle measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertAngleAsync (InputConvertAngle convertAngle = default(InputConvertAngle), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertAngleWithHttpInfoAsync(convertAngle, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert angle Convert value from one angle measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertAngle"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertAngleWithHttpInfoAsync (InputConvertAngle convertAngle = default(InputConvertAngle), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertAngle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertAngle != null && convertAngle.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertAngle); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertAngle; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertAngle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert area Convert value from one area measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertArea (InputConvertArea convertArea = default(InputConvertArea))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertAreaWithHttpInfo(convertArea);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert area Convert value from one area measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertAreaWithHttpInfo (InputConvertArea convertArea = default(InputConvertArea))
        {

            var localVarPath = "/ConvertArea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertArea != null && convertArea.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertArea); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertArea; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert area Convert value from one area measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertAreaAsync (InputConvertArea convertArea = default(InputConvertArea), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertAreaWithHttpInfoAsync(convertArea, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert area Convert value from one area measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertArea"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertAreaWithHttpInfoAsync (InputConvertArea convertArea = default(InputConvertArea), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertArea";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertArea != null && convertArea.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertArea); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertArea; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertArea", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert distance Convert value from one distance measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertDistance (InputConvertDistance convertDistance = default(InputConvertDistance))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertDistanceWithHttpInfo(convertDistance);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert distance Convert value from one distance measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertDistanceWithHttpInfo (InputConvertDistance convertDistance = default(InputConvertDistance))
        {

            var localVarPath = "/ConvertDistance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertDistance != null && convertDistance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertDistance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertDistance; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDistance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert distance Convert value from one distance measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertDistanceAsync (InputConvertDistance convertDistance = default(InputConvertDistance), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertDistanceWithHttpInfoAsync(convertDistance, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert distance Convert value from one distance measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDistance"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertDistanceWithHttpInfoAsync (InputConvertDistance convertDistance = default(InputConvertDistance), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertDistance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertDistance != null && convertDistance.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertDistance); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertDistance; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDistance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert duration Convert value from one duration measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertDuration (InputConvertDuration convertDuration = default(InputConvertDuration))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertDurationWithHttpInfo(convertDuration);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert duration Convert value from one duration measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertDurationWithHttpInfo (InputConvertDuration convertDuration = default(InputConvertDuration))
        {

            var localVarPath = "/ConvertDuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertDuration != null && convertDuration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertDuration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertDuration; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDuration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert duration Convert value from one duration measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertDurationAsync (InputConvertDuration convertDuration = default(InputConvertDuration), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertDurationWithHttpInfoAsync(convertDuration, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert duration Convert value from one duration measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertDuration"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertDurationWithHttpInfoAsync (InputConvertDuration convertDuration = default(InputConvertDuration), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertDuration";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertDuration != null && convertDuration.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertDuration); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertDuration; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertDuration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert energy Convert value from one energy measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertEnergy (InputConvertEnergy convertEnergy = default(InputConvertEnergy))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertEnergyWithHttpInfo(convertEnergy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert energy Convert value from one energy measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertEnergyWithHttpInfo (InputConvertEnergy convertEnergy = default(InputConvertEnergy))
        {

            var localVarPath = "/ConvertEnergy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertEnergy != null && convertEnergy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertEnergy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertEnergy; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertEnergy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert energy Convert value from one energy measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertEnergyAsync (InputConvertEnergy convertEnergy = default(InputConvertEnergy), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertEnergyWithHttpInfoAsync(convertEnergy, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert energy Convert value from one energy measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertEnergy"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertEnergyWithHttpInfoAsync (InputConvertEnergy convertEnergy = default(InputConvertEnergy), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertEnergy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertEnergy != null && convertEnergy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertEnergy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertEnergy; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertEnergy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert power Convert value from one power measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertPower (InputConvertPower convertPower = default(InputConvertPower))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertPowerWithHttpInfo(convertPower);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert power Convert value from one power measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertPowerWithHttpInfo (InputConvertPower convertPower = default(InputConvertPower))
        {

            var localVarPath = "/ConvertPower";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertPower != null && convertPower.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertPower); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertPower; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertPower", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert power Convert value from one power measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertPowerAsync (InputConvertPower convertPower = default(InputConvertPower), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertPowerWithHttpInfoAsync(convertPower, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert power Convert value from one power measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertPower"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertPowerWithHttpInfoAsync (InputConvertPower convertPower = default(InputConvertPower), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertPower";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertPower != null && convertPower.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertPower); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertPower; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertPower", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert speed Convert value from one speed measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertSpeed (InputConvertSpeed convertSpeed = default(InputConvertSpeed))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertSpeedWithHttpInfo(convertSpeed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert speed Convert value from one speed measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertSpeedWithHttpInfo (InputConvertSpeed convertSpeed = default(InputConvertSpeed))
        {

            var localVarPath = "/ConvertSpeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertSpeed != null && convertSpeed.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertSpeed); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertSpeed; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertSpeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert speed Convert value from one speed measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertSpeedAsync (InputConvertSpeed convertSpeed = default(InputConvertSpeed), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertSpeedWithHttpInfoAsync(convertSpeed, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert speed Convert value from one speed measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertSpeed"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertSpeedWithHttpInfoAsync (InputConvertSpeed convertSpeed = default(InputConvertSpeed), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertSpeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertSpeed != null && convertSpeed.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertSpeed); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertSpeed; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertSpeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert temperature Convert value from one temperature measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertTemperature (InputConvertTemperature convertTemperature = default(InputConvertTemperature))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertTemperatureWithHttpInfo(convertTemperature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert temperature Convert value from one temperature measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertTemperatureWithHttpInfo (InputConvertTemperature convertTemperature = default(InputConvertTemperature))
        {

            var localVarPath = "/ConvertTemperature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertTemperature != null && convertTemperature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertTemperature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertTemperature; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertTemperature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert temperature Convert value from one temperature measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertTemperatureAsync (InputConvertTemperature convertTemperature = default(InputConvertTemperature), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertTemperatureWithHttpInfoAsync(convertTemperature, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert temperature Convert value from one temperature measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertTemperature"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertTemperatureWithHttpInfoAsync (InputConvertTemperature convertTemperature = default(InputConvertTemperature), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertTemperature";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertTemperature != null && convertTemperature.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertTemperature); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertTemperature; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertTemperature", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert volume Convert value from one volume measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertVolume (InputConvertVolume convertVolume = default(InputConvertVolume))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertVolumeWithHttpInfo(convertVolume);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert volume Convert value from one volume measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertVolumeWithHttpInfo (InputConvertVolume convertVolume = default(InputConvertVolume))
        {

            var localVarPath = "/ConvertVolume";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertVolume != null && convertVolume.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertVolume); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertVolume; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertVolume", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert volume Convert value from one volume measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertVolumeAsync (InputConvertVolume convertVolume = default(InputConvertVolume), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertVolumeWithHttpInfoAsync(convertVolume, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert volume Convert value from one volume measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertVolume"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertVolumeWithHttpInfoAsync (InputConvertVolume convertVolume = default(InputConvertVolume), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertVolume";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertVolume != null && convertVolume.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertVolume); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertVolume; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertVolume", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert weight Convert value from one weight measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber ConvertWeight (InputConvertWeight convertWeight = default(InputConvertWeight))
        {
             ApiResponse<OutputNumber> localVarResponse = ConvertWeightWithHttpInfo(convertWeight);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Convert weight Convert value from one weight measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> ConvertWeightWithHttpInfo (InputConvertWeight convertWeight = default(InputConvertWeight))
        {

            var localVarPath = "/ConvertWeight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertWeight != null && convertWeight.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertWeight); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertWeight; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Convert weight Convert value from one weight measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> ConvertWeightAsync (InputConvertWeight convertWeight = default(InputConvertWeight), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await ConvertWeightWithHttpInfoAsync(convertWeight, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Convert weight Convert value from one weight measurement to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="convertWeight"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> ConvertWeightWithHttpInfoAsync (InputConvertWeight convertWeight = default(InputConvertWeight), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/ConvertWeight";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (convertWeight != null && convertWeight.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(convertWeight); // http body (model) parameter
            }
            else
            {
                localVarPostBody = convertWeight; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertWeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Random number Generate a random number within a specified range
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber RandomNumber (InputNumberRange numberRange = default(InputNumberRange))
        {
             ApiResponse<OutputNumber> localVarResponse = RandomNumberWithHttpInfo(numberRange);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Random number Generate a random number within a specified range
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> RandomNumberWithHttpInfo (InputNumberRange numberRange = default(InputNumberRange))
        {

            var localVarPath = "/RandomNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRange != null && numberRange.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(numberRange); // http body (model) parameter
            }
            else
            {
                localVarPostBody = numberRange; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RandomNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Random number Generate a random number within a specified range
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> RandomNumberAsync (InputNumberRange numberRange = default(InputNumberRange), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await RandomNumberWithHttpInfoAsync(numberRange, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Random number Generate a random number within a specified range
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberRange"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> RandomNumberWithHttpInfoAsync (InputNumberRange numberRange = default(InputNumberRange), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/RandomNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numberRange != null && numberRange.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(numberRange); // http body (model) parameter
            }
            else
            {
                localVarPostBody = numberRange; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RandomNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Round number Round a numeric value up or down
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber RoundNumber (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {
             ApiResponse<OutputNumber> localVarResponse = RoundNumberWithHttpInfo(calculateNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Round number Round a numeric value up or down
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> RoundNumberWithHttpInfo (InputCalculateNumber calculateNumber = default(InputCalculateNumber))
        {

            var localVarPath = "/RoundNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoundNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Round number Round a numeric value up or down
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> RoundNumberAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await RoundNumberWithHttpInfoAsync(calculateNumber, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Round number Round a numeric value up or down
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateNumber">Numeric calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> RoundNumberWithHttpInfoAsync (InputCalculateNumber calculateNumber = default(InputCalculateNumber), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/RoundNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateNumber != null && calculateNumber.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateNumber); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateNumber; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RoundNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate standard deviation Calculate the standard deviation of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>OutputNumber</returns>
        public OutputNumber StandardDeviation (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {
             ApiResponse<OutputNumber> localVarResponse = StandardDeviationWithHttpInfo(calculateSeries);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Math - Calculate standard deviation Calculate the standard deviation of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <returns>ApiResponse of OutputNumber</returns>
        public ApiResponse<OutputNumber> StandardDeviationWithHttpInfo (InputCalculateSeries calculateSeries = default(InputCalculateSeries))
        {

            var localVarPath = "/StandardDeviation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StandardDeviation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

        /// <summary>
        /// Math - Calculate standard deviation Calculate the standard deviation of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputNumber</returns>
        public async System.Threading.Tasks.Task<OutputNumber> StandardDeviationAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputNumber> localVarResponse = await StandardDeviationWithHttpInfoAsync(calculateSeries, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Math - Calculate standard deviation Calculate the standard deviation of two or more numbers
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="calculateSeries">Series calculation parameters (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputNumber)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputNumber>> StandardDeviationWithHttpInfoAsync (InputCalculateSeries calculateSeries = default(InputCalculateSeries), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/StandardDeviation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (calculateSeries != null && calculateSeries.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(calculateSeries); // http body (model) parameter
            }
            else
            {
                localVarPostBody = calculateSeries; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StandardDeviation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputNumber>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputNumber) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputNumber)));
        }

    }
}
