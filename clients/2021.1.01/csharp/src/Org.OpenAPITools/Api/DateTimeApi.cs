/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDateTimeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>OutputDateDifference</returns>
        OutputDateDifference DateTimeDifference (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference));

        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>ApiResponse of OutputDateDifference</returns>
        ApiResponse<OutputDateDifference> DateTimeDifferenceWithHttpInfo (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference));
        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>OutputDateInfo</returns>
        OutputDateInfo DateTimeInfo (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo));

        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>ApiResponse of OutputDateInfo</returns>
        ApiResponse<OutputDateInfo> DateTimeInfoWithHttpInfo (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo));
        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString FormatDateTime (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat));

        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> FormatDateTimeWithHttpInfo (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat));
        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>OutputString</returns>
        OutputString WorldTime (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion));

        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> WorldTimeWithHttpInfo (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputDateDifference</returns>
        System.Threading.Tasks.Task<OutputDateDifference> DateTimeDifferenceAsync (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DateTime - DateTime difference
        /// </summary>
        /// <remarks>
        /// Calculate the difference between two dates
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputDateDifference)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputDateDifference>> DateTimeDifferenceWithHttpInfoAsync (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputDateInfo</returns>
        System.Threading.Tasks.Task<OutputDateInfo> DateTimeInfoAsync (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DateTime - Get date and time information
        /// </summary>
        /// <remarks>
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputDateInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputDateInfo>> DateTimeInfoWithHttpInfoAsync (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> FormatDateTimeAsync (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DateTime - Format date and time
        /// </summary>
        /// <remarks>
        /// Create a date/time string in a specific format
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> FormatDateTimeWithHttpInfoAsync (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> WorldTimeAsync (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DateTime - Get world time
        /// </summary>
        /// <remarks>
        /// Convert date and time from one time zone to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> WorldTimeWithHttpInfoAsync (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DateTimeApi : IDateTimeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DateTimeApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class
        /// </summary>
        /// <returns></returns>
        public DateTimeApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DateTimeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DateTimeApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>OutputDateDifference</returns>
        public OutputDateDifference DateTimeDifference (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference))
        {
             ApiResponse<OutputDateDifference> localVarResponse = DateTimeDifferenceWithHttpInfo(dateTimeDifference);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <returns>ApiResponse of OutputDateDifference</returns>
        public ApiResponse<OutputDateDifference> DateTimeDifferenceWithHttpInfo (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference))
        {

            var localVarPath = "/DateTimeDifference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeDifference != null && dateTimeDifference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeDifference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeDifference; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeDifference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputDateDifference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputDateDifference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputDateDifference)));
        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputDateDifference</returns>
        public async System.Threading.Tasks.Task<OutputDateDifference> DateTimeDifferenceAsync (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputDateDifference> localVarResponse = await DateTimeDifferenceWithHttpInfoAsync(dateTimeDifference, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DateTime - DateTime difference Calculate the difference between two dates
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeDifference"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputDateDifference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputDateDifference>> DateTimeDifferenceWithHttpInfoAsync (InputDateTimeDifference dateTimeDifference = default(InputDateTimeDifference), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/DateTimeDifference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeDifference != null && dateTimeDifference.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeDifference); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeDifference; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeDifference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputDateDifference>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputDateDifference) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputDateDifference)));
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>OutputDateInfo</returns>
        public OutputDateInfo DateTimeInfo (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo))
        {
             ApiResponse<OutputDateInfo> localVarResponse = DateTimeInfoWithHttpInfo(dateTimeInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <returns>ApiResponse of OutputDateInfo</returns>
        public ApiResponse<OutputDateInfo> DateTimeInfoWithHttpInfo (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo))
        {

            var localVarPath = "/DateTimeInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeInfo != null && dateTimeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeInfo; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputDateInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputDateInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputDateInfo)));
        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputDateInfo</returns>
        public async System.Threading.Tasks.Task<OutputDateInfo> DateTimeInfoAsync (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputDateInfo> localVarResponse = await DateTimeInfoWithHttpInfoAsync(dateTimeInfo, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DateTime - Get date and time information Retrieve useful date and time information, such as day of year, total seconds and ticks
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeInfo"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputDateInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputDateInfo>> DateTimeInfoWithHttpInfoAsync (InputDateTimeInfo dateTimeInfo = default(InputDateTimeInfo), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/DateTimeInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeInfo != null && dateTimeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeInfo; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DateTimeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputDateInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputDateInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputDateInfo)));
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString FormatDateTime (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat))
        {
             ApiResponse<OutputString> localVarResponse = FormatDateTimeWithHttpInfo(dateTimeFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> FormatDateTimeWithHttpInfo (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat))
        {

            var localVarPath = "/FormatDateTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeFormat != null && dateTimeFormat.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeFormat); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeFormat; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> FormatDateTimeAsync (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await FormatDateTimeWithHttpInfoAsync(dateTimeFormat, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DateTime - Format date and time Create a date/time string in a specific format
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeFormat"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> FormatDateTimeWithHttpInfoAsync (InputDateTimeFormat dateTimeFormat = default(InputDateTimeFormat), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/FormatDateTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeFormat != null && dateTimeFormat.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeFormat); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeFormat; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FormatDateTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>OutputString</returns>
        public OutputString WorldTime (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion))
        {
             ApiResponse<OutputString> localVarResponse = WorldTimeWithHttpInfo(dateTimeConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> WorldTimeWithHttpInfo (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion))
        {

            var localVarPath = "/WorldTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeConversion != null && dateTimeConversion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeConversion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeConversion; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorldTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> WorldTimeAsync (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await WorldTimeWithHttpInfoAsync(dateTimeConversion, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DateTime - Get world time Convert date and time from one time zone to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateTimeConversion"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> WorldTimeWithHttpInfoAsync (InputDateTimeConversion dateTimeConversion = default(InputDateTimeConversion), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/WorldTime";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateTimeConversion != null && dateTimeConversion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(dateTimeConversion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dateTimeConversion; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorldTime", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

    }
}
