/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Files - Convert Image
        /// </summary>
        /// <remarks>
        /// Convert an image from one format to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ConvertImage (string format, System.IO.Stream file);

        /// <summary>
        /// Files - Convert Image
        /// </summary>
        /// <remarks>
        /// Convert an image from one format to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ConvertImageWithHttpInfo (string format, System.IO.Stream file);
        /// <summary>
        /// Files - Crop Image
        /// </summary>
        /// <remarks>
        /// Crop an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream CropImage (string position, decimal width, decimal height, System.IO.Stream file);

        /// <summary>
        /// Files - Crop Image
        /// </summary>
        /// <remarks>
        /// Crop an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> CropImageWithHttpInfo (string position, decimal width, decimal height, System.IO.Stream file);
        /// <summary>
        /// Files - File to string
        /// </summary>
        /// <remarks>
        /// Convert a file to a Base64 string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <returns>OutputString</returns>
        OutputString FileToString (System.IO.Stream file);

        /// <summary>
        /// Files - File to string
        /// </summary>
        /// <remarks>
        /// Convert a file to a Base64 string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <returns>ApiResponse of OutputString</returns>
        ApiResponse<OutputString> FileToStringWithHttpInfo (System.IO.Stream file);
        /// <summary>
        /// Files - Flip Image
        /// </summary>
        /// <remarks>
        /// Flip an image (horizontal or vertical)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream FlipImage (string orientation, System.IO.Stream file);

        /// <summary>
        /// Files - Flip Image
        /// </summary>
        /// <remarks>
        /// Flip an image (horizontal or vertical)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> FlipImageWithHttpInfo (string orientation, System.IO.Stream file);
        /// <summary>
        /// Files - Generate QR code
        /// </summary>
        /// <remarks>
        /// Generate a QR code image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GenerateQRCode (InputQRCode inputQRCode = default(InputQRCode));

        /// <summary>
        /// Files - Generate QR code
        /// </summary>
        /// <remarks>
        /// Generate a QR code image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GenerateQRCodeWithHttpInfo (InputQRCode inputQRCode = default(InputQRCode));
        /// <summary>
        /// Files - Resize Image
        /// </summary>
        /// <remarks>
        /// Resize an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream ResizeImage (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?));

        /// <summary>
        /// Files - Resize Image
        /// </summary>
        /// <remarks>
        /// Resize an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> ResizeImageWithHttpInfo (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?));
        /// <summary>
        /// Files - Rotate Image
        /// </summary>
        /// <remarks>
        /// Rotate an image by specified number of degrees
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream RotateImage (string degrees, System.IO.Stream file);

        /// <summary>
        /// Files - Rotate Image
        /// </summary>
        /// <remarks>
        /// Rotate an image by specified number of degrees
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> RotateImageWithHttpInfo (string degrees, System.IO.Stream file);
        /// <summary>
        /// Files - Watermark Image
        /// </summary>
        /// <remarks>
        /// Add watermark text to an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream WatermarkImage (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file);

        /// <summary>
        /// Files - Watermark Image
        /// </summary>
        /// <remarks>
        /// Add watermark text to an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> WatermarkImageWithHttpInfo (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Files - Convert Image
        /// </summary>
        /// <remarks>
        /// Convert an image from one format to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ConvertImageAsync (string format, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Convert Image
        /// </summary>
        /// <remarks>
        /// Convert an image from one format to another
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ConvertImageWithHttpInfoAsync (string format, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - Crop Image
        /// </summary>
        /// <remarks>
        /// Crop an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> CropImageAsync (string position, decimal width, decimal height, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Crop Image
        /// </summary>
        /// <remarks>
        /// Crop an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CropImageWithHttpInfoAsync (string position, decimal width, decimal height, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - File to string
        /// </summary>
        /// <remarks>
        /// Convert a file to a Base64 string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        System.Threading.Tasks.Task<OutputString> FileToStringAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - File to string
        /// </summary>
        /// <remarks>
        /// Convert a file to a Base64 string
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputString>> FileToStringWithHttpInfoAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - Flip Image
        /// </summary>
        /// <remarks>
        /// Flip an image (horizontal or vertical)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> FlipImageAsync (string orientation, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Flip Image
        /// </summary>
        /// <remarks>
        /// Flip an image (horizontal or vertical)
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> FlipImageWithHttpInfoAsync (string orientation, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - Generate QR code
        /// </summary>
        /// <remarks>
        /// Generate a QR code image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GenerateQRCodeAsync (InputQRCode inputQRCode = default(InputQRCode), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Generate QR code
        /// </summary>
        /// <remarks>
        /// Generate a QR code image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GenerateQRCodeWithHttpInfoAsync (InputQRCode inputQRCode = default(InputQRCode), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - Resize Image
        /// </summary>
        /// <remarks>
        /// Resize an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> ResizeImageAsync (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Resize Image
        /// </summary>
        /// <remarks>
        /// Resize an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ResizeImageWithHttpInfoAsync (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - Rotate Image
        /// </summary>
        /// <remarks>
        /// Rotate an image by specified number of degrees
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> RotateImageAsync (string degrees, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Rotate Image
        /// </summary>
        /// <remarks>
        /// Rotate an image by specified number of degrees
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RotateImageWithHttpInfoAsync (string degrees, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Files - Watermark Image
        /// </summary>
        /// <remarks>
        /// Add watermark text to an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> WatermarkImageAsync (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Files - Watermark Image
        /// </summary>
        /// <remarks>
        /// Add watermark text to an image
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> WatermarkImageWithHttpInfoAsync (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FilesApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Files - Convert Image Convert an image from one format to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ConvertImage (string format, System.IO.Stream file)
        {
             ApiResponse<System.IO.Stream> localVarResponse = ConvertImageWithHttpInfo(format, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Convert Image Convert an image from one format to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ConvertImageWithHttpInfo (string format, System.IO.Stream file)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling FilesApi->ConvertImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->ConvertImage");

            var localVarPath = "/ConvertImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "image/gif",
                "image/jpeg",
                "image/bmp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarFormParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Convert Image Convert an image from one format to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ConvertImageAsync (string format, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ConvertImageWithHttpInfoAsync(format, file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Convert Image Convert an image from one format to another
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format">Output file format</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ConvertImageWithHttpInfoAsync (string format, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling FilesApi->ConvertImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->ConvertImage");

            var localVarPath = "/ConvertImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "image/gif",
                "image/jpeg",
                "image/bmp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarFormParams.Add("format", this.Configuration.ApiClient.ParameterToString(format)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Crop Image Crop an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream CropImage (string position, decimal width, decimal height, System.IO.Stream file)
        {
             ApiResponse<System.IO.Stream> localVarResponse = CropImageWithHttpInfo(position, width, height, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Crop Image Crop an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> CropImageWithHttpInfo (string position, decimal width, decimal height, System.IO.Stream file)
        {
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling FilesApi->CropImage");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling FilesApi->CropImage");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling FilesApi->CropImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->CropImage");

            var localVarPath = "/CropImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "image/gif",
                "image/jpeg",
                "image/bmp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (position != null) localVarFormParams.Add("position", this.Configuration.ApiClient.ParameterToString(position)); // form parameter
            if (width != null) localVarFormParams.Add("Width", this.Configuration.ApiClient.ParameterToString(width)); // form parameter
            if (height != null) localVarFormParams.Add("Height", this.Configuration.ApiClient.ParameterToString(height)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CropImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Crop Image Crop an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> CropImageAsync (string position, decimal width, decimal height, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await CropImageWithHttpInfoAsync(position, width, height, file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Crop Image Crop an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="position">Crop start position (use negative values to reverse crop area)</param>
        /// <param name="width">Width (X-axis right, negative to reverse)</param>
        /// <param name="height">Height (Y-axis down, negative to reverse)</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> CropImageWithHttpInfoAsync (string position, decimal width, decimal height, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'position' is set
            if (position == null)
                throw new ApiException(400, "Missing required parameter 'position' when calling FilesApi->CropImage");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling FilesApi->CropImage");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling FilesApi->CropImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->CropImage");

            var localVarPath = "/CropImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "image/gif",
                "image/jpeg",
                "image/bmp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (position != null) localVarFormParams.Add("position", this.Configuration.ApiClient.ParameterToString(position)); // form parameter
            if (width != null) localVarFormParams.Add("Width", this.Configuration.ApiClient.ParameterToString(width)); // form parameter
            if (height != null) localVarFormParams.Add("Height", this.Configuration.ApiClient.ParameterToString(height)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CropImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - File to string Convert a file to a Base64 string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <returns>OutputString</returns>
        public OutputString FileToString (System.IO.Stream file)
        {
             ApiResponse<OutputString> localVarResponse = FileToStringWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - File to string Convert a file to a Base64 string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <returns>ApiResponse of OutputString</returns>
        public ApiResponse<OutputString> FileToStringWithHttpInfo (System.IO.Stream file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->FileToString");

            var localVarPath = "/FileToString";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FileToString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Files - File to string Convert a file to a Base64 string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OutputString</returns>
        public async System.Threading.Tasks.Task<OutputString> FileToStringAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OutputString> localVarResponse = await FileToStringWithHttpInfoAsync(file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - File to string Convert a file to a Base64 string
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">Source file (10MB limit)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OutputString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputString>> FileToStringWithHttpInfoAsync (System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->FileToString");

            var localVarPath = "/FileToString";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FileToString", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputString>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OutputString) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputString)));
        }

        /// <summary>
        /// Files - Flip Image Flip an image (horizontal or vertical)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream FlipImage (string orientation, System.IO.Stream file)
        {
             ApiResponse<System.IO.Stream> localVarResponse = FlipImageWithHttpInfo(orientation, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Flip Image Flip an image (horizontal or vertical)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> FlipImageWithHttpInfo (string orientation, System.IO.Stream file)
        {
            // verify the required parameter 'orientation' is set
            if (orientation == null)
                throw new ApiException(400, "Missing required parameter 'orientation' when calling FilesApi->FlipImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->FlipImage");

            var localVarPath = "/FlipImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orientation != null) localVarFormParams.Add("orientation", this.Configuration.ApiClient.ParameterToString(orientation)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlipImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Flip Image Flip an image (horizontal or vertical)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> FlipImageAsync (string orientation, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await FlipImageWithHttpInfoAsync(orientation, file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Flip Image Flip an image (horizontal or vertical)
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orientation">Horizontal or Vertical</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> FlipImageWithHttpInfoAsync (string orientation, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orientation' is set
            if (orientation == null)
                throw new ApiException(400, "Missing required parameter 'orientation' when calling FilesApi->FlipImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->FlipImage");

            var localVarPath = "/FlipImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orientation != null) localVarFormParams.Add("orientation", this.Configuration.ApiClient.ParameterToString(orientation)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FlipImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Generate QR code Generate a QR code image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GenerateQRCode (InputQRCode inputQRCode = default(InputQRCode))
        {
             ApiResponse<System.IO.Stream> localVarResponse = GenerateQRCodeWithHttpInfo(inputQRCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Generate QR code Generate a QR code image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GenerateQRCodeWithHttpInfo (InputQRCode inputQRCode = default(InputQRCode))
        {

            var localVarPath = "/GenerateQRCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputQRCode != null && inputQRCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputQRCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputQRCode; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateQRCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Generate QR code Generate a QR code image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GenerateQRCodeAsync (InputQRCode inputQRCode = default(InputQRCode), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GenerateQRCodeWithHttpInfoAsync(inputQRCode, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Generate QR code Generate a QR code image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputQRCode"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GenerateQRCodeWithHttpInfoAsync (InputQRCode inputQRCode = default(InputQRCode), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/GenerateQRCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inputQRCode != null && inputQRCode.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inputQRCode); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inputQRCode; // byte array
            }

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateQRCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Resize Image Resize an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream ResizeImage (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?))
        {
             ApiResponse<System.IO.Stream> localVarResponse = ResizeImageWithHttpInfo(algorithm, units, file, height, width);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Resize Image Resize an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> ResizeImageWithHttpInfo (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?))
        {
            // verify the required parameter 'algorithm' is set
            if (algorithm == null)
                throw new ApiException(400, "Missing required parameter 'algorithm' when calling FilesApi->ResizeImage");
            // verify the required parameter 'units' is set
            if (units == null)
                throw new ApiException(400, "Missing required parameter 'units' when calling FilesApi->ResizeImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->ResizeImage");

            var localVarPath = "/ResizeImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "image/gif",
                "image/jpeg",
                "image/bmp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (algorithm != null) localVarFormParams.Add("algorithm", this.Configuration.ApiClient.ParameterToString(algorithm)); // form parameter
            if (units != null) localVarFormParams.Add("units", this.Configuration.ApiClient.ParameterToString(units)); // form parameter
            if (height != null) localVarFormParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // form parameter
            if (width != null) localVarFormParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResizeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Resize Image Resize an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> ResizeImageAsync (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await ResizeImageWithHttpInfoAsync(algorithm, units, file, height, width, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Resize Image Resize an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="algorithm">Optimize output quality of the target image</param>
        /// <param name="units">Image adjustment units</param>
        /// <param name="file">Source image file</param>
        /// <param name="height">Image height (pixels or percent) (optional)</param>
        /// <param name="width">Image width (pixels or percent) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> ResizeImageWithHttpInfoAsync (string algorithm, string units, System.IO.Stream file, decimal? height = default(decimal?), decimal? width = default(decimal?), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'algorithm' is set
            if (algorithm == null)
                throw new ApiException(400, "Missing required parameter 'algorithm' when calling FilesApi->ResizeImage");
            // verify the required parameter 'units' is set
            if (units == null)
                throw new ApiException(400, "Missing required parameter 'units' when calling FilesApi->ResizeImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->ResizeImage");

            var localVarPath = "/ResizeImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png",
                "image/gif",
                "image/jpeg",
                "image/bmp"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (algorithm != null) localVarFormParams.Add("algorithm", this.Configuration.ApiClient.ParameterToString(algorithm)); // form parameter
            if (units != null) localVarFormParams.Add("units", this.Configuration.ApiClient.ParameterToString(units)); // form parameter
            if (height != null) localVarFormParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // form parameter
            if (width != null) localVarFormParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResizeImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Rotate Image Rotate an image by specified number of degrees
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream RotateImage (string degrees, System.IO.Stream file)
        {
             ApiResponse<System.IO.Stream> localVarResponse = RotateImageWithHttpInfo(degrees, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Rotate Image Rotate an image by specified number of degrees
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> RotateImageWithHttpInfo (string degrees, System.IO.Stream file)
        {
            // verify the required parameter 'degrees' is set
            if (degrees == null)
                throw new ApiException(400, "Missing required parameter 'degrees' when calling FilesApi->RotateImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->RotateImage");

            var localVarPath = "/RotateImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (degrees != null) localVarFormParams.Add("degrees", this.Configuration.ApiClient.ParameterToString(degrees)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RotateImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Rotate Image Rotate an image by specified number of degrees
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> RotateImageAsync (string degrees, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await RotateImageWithHttpInfoAsync(degrees, file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Rotate Image Rotate an image by specified number of degrees
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Number of degrees</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> RotateImageWithHttpInfoAsync (string degrees, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'degrees' is set
            if (degrees == null)
                throw new ApiException(400, "Missing required parameter 'degrees' when calling FilesApi->RotateImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->RotateImage");

            var localVarPath = "/RotateImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (degrees != null) localVarFormParams.Add("degrees", this.Configuration.ApiClient.ParameterToString(degrees)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RotateImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Watermark Image Add watermark text to an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream WatermarkImage (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file)
        {
             ApiResponse<System.IO.Stream> localVarResponse = WatermarkImageWithHttpInfo(text, font, size, color, horizontal, vertical, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Files - Watermark Image Add watermark text to an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> WatermarkImageWithHttpInfo (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'font' is set
            if (font == null)
                throw new ApiException(400, "Missing required parameter 'font' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'color' is set
            if (color == null)
                throw new ApiException(400, "Missing required parameter 'color' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'horizontal' is set
            if (horizontal == null)
                throw new ApiException(400, "Missing required parameter 'horizontal' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'vertical' is set
            if (vertical == null)
                throw new ApiException(400, "Missing required parameter 'vertical' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->WatermarkImage");

            var localVarPath = "/WatermarkImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarFormParams.Add("text", this.Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (font != null) localVarFormParams.Add("font", this.Configuration.ApiClient.ParameterToString(font)); // form parameter
            if (size != null) localVarFormParams.Add("size", this.Configuration.ApiClient.ParameterToString(size)); // form parameter
            if (color != null) localVarFormParams.Add("color", this.Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (horizontal != null) localVarFormParams.Add("horizontal", this.Configuration.ApiClient.ParameterToString(horizontal)); // form parameter
            if (vertical != null) localVarFormParams.Add("vertical", this.Configuration.ApiClient.ParameterToString(vertical)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Files - Watermark Image Add watermark text to an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> WatermarkImageAsync (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await WatermarkImageWithHttpInfoAsync(text, font, size, color, horizontal, vertical, file, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Files - Watermark Image Add watermark text to an image
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Watermark text</param>
        /// <param name="font">Text font</param>
        /// <param name="size">Font size (points)</param>
        /// <param name="color">Text color hex value</param>
        /// <param name="horizontal">Horizontal alignment</param>
        /// <param name="vertical">Vertical alignment</param>
        /// <param name="file">Source image file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> WatermarkImageWithHttpInfoAsync (string text, string font, decimal size, string color, string horizontal, string vertical, System.IO.Stream file, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'font' is set
            if (font == null)
                throw new ApiException(400, "Missing required parameter 'font' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'size' is set
            if (size == null)
                throw new ApiException(400, "Missing required parameter 'size' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'color' is set
            if (color == null)
                throw new ApiException(400, "Missing required parameter 'color' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'horizontal' is set
            if (horizontal == null)
                throw new ApiException(400, "Missing required parameter 'horizontal' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'vertical' is set
            if (vertical == null)
                throw new ApiException(400, "Missing required parameter 'vertical' when calling FilesApi->WatermarkImage");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling FilesApi->WatermarkImage");

            var localVarPath = "/WatermarkImage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarFormParams.Add("text", this.Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (font != null) localVarFormParams.Add("font", this.Configuration.ApiClient.ParameterToString(font)); // form parameter
            if (size != null) localVarFormParams.Add("size", this.Configuration.ApiClient.ParameterToString(size)); // form parameter
            if (color != null) localVarFormParams.Add("color", this.Configuration.ApiClient.ParameterToString(color)); // form parameter
            if (horizontal != null) localVarFormParams.Add("horizontal", this.Configuration.ApiClient.ParameterToString(horizontal)); // form parameter
            if (vertical != null) localVarFormParams.Add("vertical", this.Configuration.ApiClient.ParameterToString(vertical)); // form parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (apiKeyHeader) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id")))
            {
                localVarHeaderParams["X-IBM-Client-Id"] = this.Configuration.GetApiKeyWithPrefix("X-IBM-Client-Id");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

    }
}
