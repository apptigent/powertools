/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MathApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MathApiTests
    {
        private MathApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MathApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MathApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MathApi
            //Assert.IsInstanceOf(typeof(MathApi), instance);
        }

        
        /// <summary>
        /// Test CalculateAbsolute
        /// </summary>
        [Test]
        public void CalculateAbsoluteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.CalculateAbsolute(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateAddition
        /// </summary>
        [Test]
        public void CalculateAdditionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumbers calculateNumbers = null;
            //var response = instance.CalculateAddition(calculateNumbers);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateAverage
        /// </summary>
        [Test]
        public void CalculateAverageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateSeries calculateSeries = null;
            //var response = instance.CalculateAverage(calculateSeries);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateCosine
        /// </summary>
        [Test]
        public void CalculateCosineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.CalculateCosine(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateDivision
        /// </summary>
        [Test]
        public void CalculateDivisionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumbers calculateNumbers = null;
            //var response = instance.CalculateDivision(calculateNumbers);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateLogarithm
        /// </summary>
        [Test]
        public void CalculateLogarithmTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.CalculateLogarithm(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateMedian
        /// </summary>
        [Test]
        public void CalculateMedianTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateSeries calculateSeries = null;
            //var response = instance.CalculateMedian(calculateSeries);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateMinMax
        /// </summary>
        [Test]
        public void CalculateMinMaxTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateMinMax calculateSeries = null;
            //var response = instance.CalculateMinMax(calculateSeries);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateModulo
        /// </summary>
        [Test]
        public void CalculateModuloTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumbers calculateNumbers = null;
            //var response = instance.CalculateModulo(calculateNumbers);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateMultiplication
        /// </summary>
        [Test]
        public void CalculateMultiplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumbers calculateNumbers = null;
            //var response = instance.CalculateMultiplication(calculateNumbers);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateNthRoot
        /// </summary>
        [Test]
        public void CalculateNthRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumbers calculateNumbers = null;
            //var response = instance.CalculateNthRoot(calculateNumbers);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculatePower
        /// </summary>
        [Test]
        public void CalculatePowerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculatePower calculatePower = null;
            //var response = instance.CalculatePower(calculatePower);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateSine
        /// </summary>
        [Test]
        public void CalculateSineTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.CalculateSine(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateSquareRoot
        /// </summary>
        [Test]
        public void CalculateSquareRootTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.CalculateSquareRoot(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateSubtraction
        /// </summary>
        [Test]
        public void CalculateSubtractionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumbers calculateNumbers = null;
            //var response = instance.CalculateSubtraction(calculateNumbers);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateSum
        /// </summary>
        [Test]
        public void CalculateSumTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateSeries calculateSeries = null;
            //var response = instance.CalculateSum(calculateSeries);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateTangent
        /// </summary>
        [Test]
        public void CalculateTangentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.CalculateTangent(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test CalculateVariance
        /// </summary>
        [Test]
        public void CalculateVarianceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateSeries calculateSeries = null;
            //var response = instance.CalculateVariance(calculateSeries);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertAngle
        /// </summary>
        [Test]
        public void ConvertAngleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertAngle convertAngle = null;
            //var response = instance.ConvertAngle(convertAngle);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertArea
        /// </summary>
        [Test]
        public void ConvertAreaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertArea convertArea = null;
            //var response = instance.ConvertArea(convertArea);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertDistance
        /// </summary>
        [Test]
        public void ConvertDistanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertDistance convertDistance = null;
            //var response = instance.ConvertDistance(convertDistance);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertDuration
        /// </summary>
        [Test]
        public void ConvertDurationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertDuration convertDuration = null;
            //var response = instance.ConvertDuration(convertDuration);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertEnergy
        /// </summary>
        [Test]
        public void ConvertEnergyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertEnergy convertEnergy = null;
            //var response = instance.ConvertEnergy(convertEnergy);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertPower
        /// </summary>
        [Test]
        public void ConvertPowerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertPower convertPower = null;
            //var response = instance.ConvertPower(convertPower);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertSpeed
        /// </summary>
        [Test]
        public void ConvertSpeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertSpeed convertSpeed = null;
            //var response = instance.ConvertSpeed(convertSpeed);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertTemperature
        /// </summary>
        [Test]
        public void ConvertTemperatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertTemperature convertTemperature = null;
            //var response = instance.ConvertTemperature(convertTemperature);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertVolume
        /// </summary>
        [Test]
        public void ConvertVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertVolume convertVolume = null;
            //var response = instance.ConvertVolume(convertVolume);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test ConvertWeight
        /// </summary>
        [Test]
        public void ConvertWeightTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputConvertWeight convertWeight = null;
            //var response = instance.ConvertWeight(convertWeight);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test RandomNumber
        /// </summary>
        [Test]
        public void RandomNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputNumberRange numberRange = null;
            //var response = instance.RandomNumber(numberRange);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test RoundNumber
        /// </summary>
        [Test]
        public void RoundNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateNumber calculateNumber = null;
            //var response = instance.RoundNumber(calculateNumber);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test StandardDeviation
        /// </summary>
        [Test]
        public void StandardDeviationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCalculateSeries calculateSeries = null;
            //var response = instance.StandardDeviation(calculateSeries);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
    }

}
