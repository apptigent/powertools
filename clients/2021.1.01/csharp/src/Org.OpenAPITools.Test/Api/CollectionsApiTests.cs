/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing CollectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CollectionsApiTests
    {
        private CollectionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CollectionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CollectionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CollectionsApi
            //Assert.IsInstanceOf(typeof(CollectionsApi), instance);
        }

        
        /// <summary>
        /// Test AddToCollection
        /// </summary>
        [Test]
        public void AddToCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionModify collectionModify = null;
            //var response = instance.AddToCollection(collectionModify);
            //Assert.IsInstanceOf(typeof(OutputCollectionResult), response, "response is OutputCollectionResult");
        }
        
        /// <summary>
        /// Test CollectionContainsNumber
        /// </summary>
        [Test]
        public void CollectionContainsNumberTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionSearchNumeric collectionSearch = null;
            //var response = instance.CollectionContainsNumber(collectionSearch);
            //Assert.IsInstanceOf(typeof(OutputCollectionNumber), response, "response is OutputCollectionNumber");
        }
        
        /// <summary>
        /// Test CollectionContainsString
        /// </summary>
        [Test]
        public void CollectionContainsStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionSearch collectionSearch = null;
            //var response = instance.CollectionContainsString(collectionSearch);
            //Assert.IsInstanceOf(typeof(OutputCollectionString), response, "response is OutputCollectionString");
        }
        
        /// <summary>
        /// Test CollectionEndsWithString
        /// </summary>
        [Test]
        public void CollectionEndsWithStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionSearch collectionSearch = null;
            //var response = instance.CollectionEndsWithString(collectionSearch);
            //Assert.IsInstanceOf(typeof(OutputCollectionString), response, "response is OutputCollectionString");
        }
        
        /// <summary>
        /// Test CollectionStartsWithString
        /// </summary>
        [Test]
        public void CollectionStartsWithStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionSearch collectionSearch = null;
            //var response = instance.CollectionStartsWithString(collectionSearch);
            //Assert.IsInstanceOf(typeof(OutputCollectionString), response, "response is OutputCollectionString");
        }
        
        /// <summary>
        /// Test CollectionToJSON
        /// </summary>
        [Test]
        public void CollectionToJSONTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionConversion collectionConversion = null;
            //var response = instance.CollectionToJSON(collectionConversion);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test CollectionToXml
        /// </summary>
        [Test]
        public void CollectionToXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionConversionXML collectionConversionXML = null;
            //var response = instance.CollectionToXml(collectionConversionXML);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test CountCollection
        /// </summary>
        [Test]
        public void CountCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionCount collectionCount = null;
            //var response = instance.CountCollection(collectionCount);
            //Assert.IsInstanceOf(typeof(OutputNumber), response, "response is OutputNumber");
        }
        
        /// <summary>
        /// Test FilterCollection
        /// </summary>
        [Test]
        public void FilterCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionFilter collectionFilter = null;
            //var response = instance.FilterCollection(collectionFilter);
            //Assert.IsInstanceOf(typeof(OutputCollectionResult), response, "response is OutputCollectionResult");
        }
        
        /// <summary>
        /// Test RemoveFromCollection
        /// </summary>
        [Test]
        public void RemoveFromCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionModify collectionModify = null;
            //var response = instance.RemoveFromCollection(collectionModify);
            //Assert.IsInstanceOf(typeof(OutputCollectionResult), response, "response is OutputCollectionResult");
        }
        
        /// <summary>
        /// Test ReplaceValuesInCollection
        /// </summary>
        [Test]
        public void ReplaceValuesInCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionReplace collectionReplace = null;
            //var response = instance.ReplaceValuesInCollection(collectionReplace);
            //Assert.IsInstanceOf(typeof(OutputCollectionResult), response, "response is OutputCollectionResult");
        }
        
        /// <summary>
        /// Test SortCollection
        /// </summary>
        [Test]
        public void SortCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionSort collectionSort = null;
            //var response = instance.SortCollection(collectionSort);
            //Assert.IsInstanceOf(typeof(OutputCollectionResult), response, "response is OutputCollectionResult");
        }
        
        /// <summary>
        /// Test SplitCollection
        /// </summary>
        [Test]
        public void SplitCollectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCollectionSplit collectionSplit = null;
            //var response = instance.SplitCollection(collectionSplit);
            //Assert.IsInstanceOf(typeof(OutputMultiCollection), response, "response is OutputMultiCollection");
        }
        
    }

}
