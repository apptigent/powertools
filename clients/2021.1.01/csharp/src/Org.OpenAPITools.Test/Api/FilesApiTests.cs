/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing FilesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FilesApiTests
    {
        private FilesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FilesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FilesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FilesApi
            //Assert.IsInstanceOf(typeof(FilesApi), instance);
        }

        
        /// <summary>
        /// Test ConvertImage
        /// </summary>
        [Test]
        public void ConvertImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string format = null;
            //System.IO.Stream file = null;
            //var response = instance.ConvertImage(format, file);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test CropImage
        /// </summary>
        [Test]
        public void CropImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string position = null;
            //decimal width = null;
            //decimal height = null;
            //System.IO.Stream file = null;
            //var response = instance.CropImage(position, width, height, file);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test FileToString
        /// </summary>
        [Test]
        public void FileToStringTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.FileToString(file);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test FlipImage
        /// </summary>
        [Test]
        public void FlipImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orientation = null;
            //System.IO.Stream file = null;
            //var response = instance.FlipImage(orientation, file);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GenerateQRCode
        /// </summary>
        [Test]
        public void GenerateQRCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputQRCode inputQRCode = null;
            //var response = instance.GenerateQRCode(inputQRCode);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test ResizeImage
        /// </summary>
        [Test]
        public void ResizeImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string algorithm = null;
            //string units = null;
            //System.IO.Stream file = null;
            //decimal? height = null;
            //decimal? width = null;
            //var response = instance.ResizeImage(algorithm, units, file, height, width);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test RotateImage
        /// </summary>
        [Test]
        public void RotateImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string degrees = null;
            //System.IO.Stream file = null;
            //var response = instance.RotateImage(degrees, file);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test WatermarkImage
        /// </summary>
        [Test]
        public void WatermarkImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string text = null;
            //string font = null;
            //decimal size = null;
            //string color = null;
            //string horizontal = null;
            //string vertical = null;
            //System.IO.Stream file = null;
            //var response = instance.WatermarkImage(text, font, size, color, horizontal, vertical, file);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
    }

}
