/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DataApiTests
    {
        private DataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DataApi
            //Assert.IsInstanceOf(typeof(DataApi), instance);
        }

        
        /// <summary>
        /// Test CsvToJson
        /// </summary>
        [Test]
        public void CsvToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputCsvConversionJSON csvConversionJSON = null;
            //var response = instance.CsvToJson(csvConversionJSON);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test JsonToCsv
        /// </summary>
        [Test]
        public void JsonToCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJsonConversionCSV jsonConversionCSV = null;
            //var response = instance.JsonToCsv(jsonConversionCSV);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test JsonToHtml
        /// </summary>
        [Test]
        public void JsonToHtmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJsonConversionHTML jsonConversionHTML = null;
            //var response = instance.JsonToHtml(jsonConversionHTML);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test JsonToXml
        /// </summary>
        [Test]
        public void JsonToXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputJsonConversionXML jsonConversionXML = null;
            //var response = instance.JsonToXml(jsonConversionXML);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test QueryJson
        /// </summary>
        [Test]
        public void QueryJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDataQuery inputDataQuery = null;
            //var response = instance.QueryJson(inputDataQuery);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test QueryXml
        /// </summary>
        [Test]
        public void QueryXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDataQuery inputDataQuery = null;
            //var response = instance.QueryXml(inputDataQuery);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test XmlToJson
        /// </summary>
        [Test]
        public void XmlToJsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputXmlConversionJSON xmlConversionJSON = null;
            //var response = instance.XmlToJson(xmlConversionJSON);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
    }

}
