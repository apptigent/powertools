/* 
 * PowerTools Developer
 *
 * Apptigent PowerTools Developer Edition is a powerful suite of API endpoints for custom applications running on any stack. Manipulate text, modify collections, format dates and times, convert currency, perform advanced mathematical calculations, shorten URL's, encode strings, convert text to speech, translate content into multiple languages, process images, and more. PowerTools is the ultimate developer toolkit.
 *
 * The version of the OpenAPI document: 2021.1.01
 * Contact: support@apptigent.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DateTimeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DateTimeApiTests
    {
        private DateTimeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DateTimeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DateTimeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DateTimeApi
            //Assert.IsInstanceOf(typeof(DateTimeApi), instance);
        }

        
        /// <summary>
        /// Test DateTimeDifference
        /// </summary>
        [Test]
        public void DateTimeDifferenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDateTimeDifference dateTimeDifference = null;
            //var response = instance.DateTimeDifference(dateTimeDifference);
            //Assert.IsInstanceOf(typeof(OutputDateDifference), response, "response is OutputDateDifference");
        }
        
        /// <summary>
        /// Test DateTimeInfo
        /// </summary>
        [Test]
        public void DateTimeInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDateTimeInfo dateTimeInfo = null;
            //var response = instance.DateTimeInfo(dateTimeInfo);
            //Assert.IsInstanceOf(typeof(OutputDateInfo), response, "response is OutputDateInfo");
        }
        
        /// <summary>
        /// Test FormatDateTime
        /// </summary>
        [Test]
        public void FormatDateTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDateTimeFormat dateTimeFormat = null;
            //var response = instance.FormatDateTime(dateTimeFormat);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
        /// <summary>
        /// Test WorldTime
        /// </summary>
        [Test]
        public void WorldTimeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InputDateTimeConversion dateTimeConversion = null;
            //var response = instance.WorldTime(dateTimeConversion);
            //Assert.IsInstanceOf(typeof(OutputString), response, "response is OutputString");
        }
        
    }

}
